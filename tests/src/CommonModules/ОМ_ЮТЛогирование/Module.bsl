//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

// Тестовый модуль для ЮТЛогирование

Процедура ИсполняемыеСценарии() Экспорт
    // Регистрация тестов
    ЮТТесты
        .ДобавитьТестовыйНабор("Логирование")
            .Перед("ПередКаждымТестом")
            .После("ПослеКаждогоТеста")
            .ДобавитьТест("Отладка_ЛогируетСообщение")
            .ДобавитьТест("Информация_ЛогируетСообщение")
            .ДобавитьТест("Предостережение_ЛогируетСообщение")
            .ДобавитьТест("Ошибка_ЛогируетСообщение")
            .ДобавитьТест("Включено_ВозвращаетБулево")
            .ДобавитьТест("УровниЛога_ВозвращаетСтруктуру");
КонецПроцедуры

Процедура ПередКаждымТестом() Экспорт
    // Сохраняем текущие настройки логирования в контекст теста
    СтарыеПараметры = ЮТКонтекстСлужебный.ЗначениеКонтекста("КонтекстЛогирования");
    ЮТест.Контекст().УстановитьЗначение("СтарыеПараметры", СтарыеПараметры);
    ИмяФайлаЛога = ПолучитьИмяВременногоФайла("log");
    ЮТест.Контекст().УстановитьЗначение("ИмяФайлаЛога", ИмяФайлаЛога);
    // Корректно формируем структуру контекста логирования
    КонтекстЛогирования = Новый Структура();
    КонтекстЛогирования.Вставить("Включено", Истина);
    КонтекстЛогирования.Вставить("ФайлЛога", ИмяФайлаЛога);
    КонтекстЛогирования.Вставить("ВыводВКонсоль", Ложь);
    КонтекстЛогирования.Вставить("ФайлЛогаДоступенНаСервере", Ложь);
    КонтекстЛогирования.Вставить("НакопленныеЗаписи", Новый Массив());
    КонтекстЛогирования.Вставить("ОбщееКоличествоТестов", 1);
    КонтекстЛогирования.Вставить("КоличествоВыполненныхТестов", 0);
    КонтекстЛогирования.Вставить("УровеньЛога", 0);
    ЮТКонтекстСлужебный.УстановитьЗначениеКонтекста("КонтекстЛогирования", КонтекстЛогирования);
КонецПроцедуры

Процедура ПослеКаждогоТеста() Экспорт
    // Восстанавливаем настройки логирования из контекста теста
    СтарыеПараметры = ЮТест.Контекст().Значение("СтарыеПараметры");
    Если СтарыеПараметры <> Неопределено Тогда
        ЮТКонтекстСлужебный.УстановитьЗначениеКонтекста("КонтекстЛогирования", СтарыеПараметры);
    КонецЕсли;
    ИмяФайлаЛога = ЮТест.Контекст().Значение("ИмяФайлаЛога");
    Если ЗначениеЗаполнено(ИмяФайлаЛога) Тогда
        Попытка
            ЮТФайлы.УдалитьВременныеФайлы(ЮТКоллекции.ЗначениеВМассиве(ИмяФайлаЛога));
        Исключение
            // Нет действий по требованию линтера
        КонецПопытки;
    КонецЕсли;
КонецПроцедуры

Функция ПрочитатьЛог(ИмяФайла)
    Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
        Возврат "";
    КонецЕсли;
    Если Не ЮТФайлы.Существует(ИмяФайла) Тогда
        Возврат "";
    КонецЕсли;
    Текст = ЮТФайлы.ДанныеТекстовогоФайла(ИмяФайла);
    Попытка
        ЮТФайлы.УдалитьВременныеФайлы(ЮТКоллекции.ЗначениеВМассиве(ИмяФайла));
    Исключение
        // Нет действий по требованию линтера
    КонецПопытки;
    Возврат Текст;
КонецФункции

Процедура Отладка_ЛогируетСообщение() Экспорт
    ИмяФайлаЛога = ЮТест.Контекст().Значение("ИмяФайлаЛога");
    ЮТЛогирование.Отладка("Тест DBG");
    ТекстЛога = ПрочитатьЛог(ИмяФайлаЛога);
    Сообщить(ТекстЛога); // Для отладки
    ЮТест.ОжидаетЧто(ТекстЛога, "Проверка наличия сообщения [DBG]: Тест DBG")
        .Содержит("[DBG]: Тест DBG");
КонецПроцедуры

Процедура Информация_ЛогируетСообщение() Экспорт
    ИмяФайлаЛога = ЮТест.Контекст().Значение("ИмяФайлаЛога");
    ЮТЛогирование.Информация("Тест INF");
    ТекстЛога = ПрочитатьЛог(ИмяФайлаЛога);
    Сообщить(ТекстЛога); // Для отладки
    ЮТест.ОжидаетЧто(ТекстЛога, "Проверка наличия сообщения [INF]: Тест INF")
        .Содержит("[INF]: Тест INF");
КонецПроцедуры

Процедура Предостережение_ЛогируетСообщение() Экспорт
    ИмяФайлаЛога = ЮТест.Контекст().Значение("ИмяФайлаЛога");
    ЮТЛогирование.Предостережение("Тест WRN");
    ТекстЛога = ПрочитатьЛог(ИмяФайлаЛога);
    Сообщить(ТекстЛога); // Для отладки
    ЮТест.ОжидаетЧто(ТекстЛога, "Проверка наличия сообщения [WRN]: Тест WRN")
        .Содержит("[WRN]: Тест WRN");
КонецПроцедуры

Процедура Ошибка_ЛогируетСообщение() Экспорт
    ИмяФайлаЛога = ЮТест.Контекст().Значение("ИмяФайлаЛога");
    ЮТЛогирование.Ошибка("Тест ERR");
    ТекстЛога = ПрочитатьЛог(ИмяФайлаЛога);
    Сообщить(ТекстЛога); // Для отладки
    ЮТест.ОжидаетЧто(ТекстЛога, "Проверка наличия сообщения [ERR]: Тест ERR")
        .Содержит("[ERR]: Тест ERR");
КонецПроцедуры

Процедура Включено_ВозвращаетБулево() Экспорт
    Результат = ЮТЛогирование.Включено();
    ЮТест.ОжидаетЧто(Результат).ИмеетТип("Булево");
КонецПроцедуры

Процедура УровниЛога_ВозвращаетСтруктуру() Экспорт
    Результат = ЮТЛогирование.УровниЛога();
    ЮТест.ОжидаетЧто(Результат)
        .ИмеетТип("ФиксированнаяСтруктура")
        .Свойство("Отладка").Равно("debug")
        .Свойство("Информация").Равно("info")
        .Свойство("Предупреждение").Равно("warning")
        .Свойство("Ошибка").Равно("error");
КонецПроцедуры
