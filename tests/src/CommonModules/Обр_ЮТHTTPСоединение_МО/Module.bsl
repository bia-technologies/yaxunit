//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты.Тег("Мокирование")
		.ДобавитьТест("ВыброситьИсключение")
		.ДобавитьТест("УстановитьHTTPОтвет")
		.ДобавитьТест("УстановитьЗащищенноеСоединение")
		.ДобавитьТест("УстановитьАутентификациюОС")
		.ДобавитьТест("УстановитьПароль")
		.ДобавитьТест("УстановитьПользователя")
		.ДобавитьТест("УстановитьПорт")
		.ДобавитьТест("УстановитьПрокси")
		.ДобавитьТест("УстановитьСервер")
		.ДобавитьТест("УстановитьТаймаут")
		.ДобавитьТест("КонструкторПоУмолчанию")
	;
	
КонецПроцедуры

#Область Тесты

Процедура ВыброситьИсключение() Экспорт
	
	ТекстИсключения = ЮТест.Данные().СлучайнаяСтрока();
	HTTPЗапрос = Новый HTTPЗапрос();
	Параметры = ЮТКоллекции.ЗначениеВМассиве(HTTPЗапрос);
	ПараметрыСМетодом = ЮТКоллекции.ЗначениеВМассиве("GET", HTTPЗапрос);
	HTTPСоединение = HTTPСоединение().ВыброситьИсключение(ТекстИсключения);
	ЮТест.ОжидаетЧто(HTTPСоединение)
		.Метод("ВызватьHTTPМетод", ПараметрыСМетодом).ВыбрасываетИсключение(ТекстИсключения)
		.Метод("CallHTTPMethod", ПараметрыСМетодом).ВыбрасываетИсключение(ТекстИсключения)
		.Метод("Записать", Параметры).ВыбрасываетИсключение(ТекстИсключения)
		.Метод("Put", Параметры).ВыбрасываетИсключение(ТекстИсключения)
		.Метод("Изменить", Параметры).ВыбрасываетИсключение(ТекстИсключения)
		.Метод("Patch", Параметры).ВыбрасываетИсключение(ТекстИсключения)
		.Метод("ОтправитьДляОбработки", Параметры).ВыбрасываетИсключение(ТекстИсключения)
		.Метод("Post", Параметры).ВыбрасываетИсключение(ТекстИсключения)
		.Метод("Получить", Параметры).ВыбрасываетИсключение(ТекстИсключения)
		.Метод("Get", Параметры).ВыбрасываетИсключение(ТекстИсключения)
		.Метод("ПолучитьЗаголовки", Параметры).ВыбрасываетИсключение(ТекстИсключения)
		.Метод("Head", Параметры).ВыбрасываетИсключение(ТекстИсключения)
		.Метод("Удалить", Параметры).ВыбрасываетИсключение(ТекстИсключения)
		.Метод("Delete", Параметры).ВыбрасываетИсключение(ТекстИсключения)
	;
	
КонецПроцедуры

Процедура УстановитьHTTPОтвет() Экспорт
	
	HTTPОтвет = ЮТест.Данные().HTTPОтвет();
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPСоединение = HTTPСоединение().УстановитьHTTPОтвет(HTTPОтвет);
	ЮТест.ОжидаетЧто(HTTPСоединение)
		.ИмеетТип("ОбработкаОбъект.ЮТHTTPСоединение")
		.Что(HTTPСоединение.ВызватьHTTPМетод("GET", HTTPЗапрос)).Равно(HTTPОтвет)
		.Что(HTTPСоединение.CallHTTPMethod("GET", HTTPЗапрос)).Равно(HTTPОтвет)
		.Что(HTTPСоединение.Записать(HTTPЗапрос)).Равно(HTTPОтвет)
		.Что(HTTPСоединение.Put(HTTPЗапрос)).Равно(HTTPОтвет)
		.Что(HTTPСоединение.Изменить(HTTPЗапрос)).Равно(HTTPОтвет)
		.Что(HTTPСоединение.Patch(HTTPЗапрос)).Равно(HTTPОтвет)
		.Что(HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос)).Равно(HTTPОтвет)
		.Что(HTTPСоединение.Post(HTTPЗапрос)).Равно(HTTPОтвет)
		.Что(HTTPСоединение.Получить(HTTPЗапрос)).Равно(HTTPОтвет)
		.Что(HTTPСоединение.Get(HTTPЗапрос)).Равно(HTTPОтвет)
		.Что(HTTPСоединение.ПолучитьЗаголовки(HTTPЗапрос)).Равно(HTTPОтвет)
		.Что(HTTPСоединение.Head(HTTPЗапрос)).Равно(HTTPОтвет)
		.Что(HTTPСоединение.Удалить(HTTPЗапрос)).Равно(HTTPОтвет)
		.Что(HTTPСоединение.Delete(HTTPЗапрос)).Равно(HTTPОтвет)
	;
	
КонецПроцедуры

Процедура УстановитьЗащищенноеСоединение() Экспорт
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
	HTTPСоединение = HTTPСоединение().УстановитьЗащищенноеСоединение(ЗащищенноеСоединение);
	ЮТест.ОжидаетЧто(HTTPСоединение)
		.ИмеетТип("ОбработкаОбъект.ЮТHTTPСоединение")
		.Свойство("ЗащищенноеСоединение").Равно(ЗащищенноеСоединение)
		.Свойство("SecureConnection").Равно(ЗащищенноеСоединение)
	;
	
КонецПроцедуры

Процедура УстановитьАутентификациюОС() Экспорт
	
	ИспользоватьАутентификациюОС = ЮТест.Данные().СлучайноеБулево();
	HTTPСоединение = HTTPСоединение().УстановитьАутентификациюОС(ИспользоватьАутентификациюОС);
	ЮТест.ОжидаетЧто(HTTPСоединение)
		.ИмеетТип("ОбработкаОбъект.ЮТHTTPСоединение")
		.Свойство("ИспользоватьАутентификациюОС").Равно(ИспользоватьАутентификациюОС)
		.Свойство("UseOSAuthentication").Равно(ИспользоватьАутентификациюОС)
	;
	
КонецПроцедуры

Процедура УстановитьПароль() Экспорт
	
	Пароль = ЮТест.Данные().СлучайнаяСтрока();
	HTTPСоединение = HTTPСоединение().УстановитьПароль(Пароль);
	ЮТест.ОжидаетЧто(HTTPСоединение)
		.ИмеетТип("ОбработкаОбъект.ЮТHTTPСоединение")
		.Свойство("Пароль").Равно(Пароль)
		.Свойство("Password").Равно(Пароль)
	;
	
КонецПроцедуры

Процедура УстановитьПользователя() Экспорт
	
	Пользователь = ЮТест.Данные().СлучайнаяСтрока();
	HTTPСоединение = HTTPСоединение().УстановитьПользователя(Пользователь);
	ЮТест.ОжидаетЧто(HTTPСоединение)
		.ИмеетТип("ОбработкаОбъект.ЮТHTTPСоединение")
		.Свойство("Пользователь").Равно(Пользователь)
		.Свойство("User").Равно(Пользователь)
	;
	
КонецПроцедуры

Процедура УстановитьПорт() Экспорт
	
	Порт = ЮТест.Данные().СлучайноеЧисло();
	HTTPСоединение = HTTPСоединение().УстановитьПорт(Порт);
	ЮТест.ОжидаетЧто(HTTPСоединение)
		.ИмеетТип("ОбработкаОбъект.ЮТHTTPСоединение")
		.Свойство("Порт").Равно(Порт)
		.Свойство("Port").Равно(Порт)
	;
	
КонецПроцедуры

Процедура УстановитьПрокси() Экспорт
	
	ИнтернетПрокси = Новый ИнтернетПрокси();
	HTTPСоединение = HTTPСоединение().УстановитьПрокси(ИнтернетПрокси);
	ЮТест.ОжидаетЧто(HTTPСоединение)
		.ИмеетТип("ОбработкаОбъект.ЮТHTTPСоединение")
		.Свойство("Прокси").Равно(ИнтернетПрокси)
		.Свойство("Proxy").Равно(ИнтернетПрокси)
	;
	
КонецПроцедуры

Процедура УстановитьСервер() Экспорт
	
	Сервер = ЮТест.Данные().СлучайнаяСтрока();
	HTTPСоединение = HTTPСоединение().УстановитьСервер(Сервер);
	ЮТест.ОжидаетЧто(HTTPСоединение)
		.ИмеетТип("ОбработкаОбъект.ЮТHTTPСоединение")
		.Свойство("Сервер").Равно(Сервер)
		.Свойство("Host").Равно(Сервер)
	;
	
КонецПроцедуры

Процедура УстановитьТаймаут() Экспорт
	
	Таймаут = ЮТест.Данные().СлучайноеЧисло();
	HTTPСоединение = HTTPСоединение().УстановитьТаймаут(Таймаут);
	ЮТест.ОжидаетЧто(HTTPСоединение)
		.ИмеетТип("ОбработкаОбъект.ЮТHTTPСоединение")
		.Свойство("Таймаут").Равно(Таймаут)
		.Свойство("Timeout").Равно(Таймаут)
	;
	
КонецПроцедуры

Процедура КонструкторПоУмолчанию() Экспорт
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL();
	ИспользоватьАутентификациюОС = ЮТест.Данные().СлучайноеБулево();
	Пароль = ЮТест.Данные().СлучайнаяСтрока();
	Пользователь = ЮТест.Данные().СлучайнаяСтрока();
	Порт = ЮТест.Данные().СлучайноеЧисло();
	Прокси = Новый ИнтернетПрокси();
	Сервер = ЮТест.Данные().СлучайнаяСтрока();
	Таймаут = ЮТест.Данные().СлучайноеЧисло();
	
	HTTPСоединение = HTTPСоединение().КонструкторПоУмолчанию(Сервер);
	ЮТест.ОжидаетЧто(HTTPСоединение, "Конструктор по умолчанию без параметров")
		.ИмеетТип("ОбработкаОбъект.ЮТHTTPСоединение")
		.Свойство("ЗащищенноеСоединение").ЭтоНеопределено()
		.Свойство("SecureConnection").ЭтоНеопределено()
		.Свойство("ИспользоватьАутентификациюОС").ЭтоЛожь()
		.Свойство("UseOSAuthentication").ЭтоЛожь()
		.Свойство("Пароль").Равно("")
		.Свойство("Password").Равно("")
		.Свойство("Пользователь").Равно("")
		.Свойство("User").Равно("")
		.Свойство("Порт").Равно(80)
		.Свойство("Port").Равно(80)
		.Свойство("Прокси").ИмеетТип("ИнтернетПрокси")
		.Свойство("Proxy").ИмеетТип("ИнтернетПрокси")
		.Свойство("Сервер").Равно(Сервер)
		.Свойство("Host").Равно(Сервер)
		.Свойство("Таймаут").Равно(0)
		.Свойство("Timeout").Равно(0)
	;
	
	HTTPСоединение = HTTPСоединение().КонструкторПоУмолчанию(Сервер, , , , Прокси, , ЗащищенноеСоединение);
	ЮТест.ОжидаетЧто(HTTPСоединение, "Конструктор по умолчанию с использованием прокси и защищенного соединения")
		.ИмеетТип("ОбработкаОбъект.ЮТHTTPСоединение")
		.Свойство("ЗащищенноеСоединение").Равно(ЗащищенноеСоединение)
		.Свойство("SecureConnection").Равно(ЗащищенноеСоединение)
		.Свойство("ИспользоватьАутентификациюОС").ЭтоЛожь()
		.Свойство("UseOSAuthentication").ЭтоЛожь()
		.Свойство("Пароль").Равно("")
		.Свойство("Password").Равно("")
		.Свойство("Пользователь").Равно("")
		.Свойство("User").Равно("")
		.Свойство("Порт").Равно(443)
		.Свойство("Port").Равно(443)
		.Свойство("Прокси").Равно(Прокси)
		.Свойство("Proxy").Равно(Прокси)
		.Свойство("Сервер").Равно(Сервер)
		.Свойство("Host").Равно(Сервер)
		.Свойство("Таймаут").Равно(0)
		.Свойство("Timeout").Равно(0)
	;
	
	HTTPСоединение = HTTPСоединение().КонструкторПоУмолчанию(
			Сервер, Порт, Пользователь, Пароль, Прокси, Таймаут, ЗащищенноеСоединение, ИспользоватьАутентификациюОС);
	ЮТест.ОжидаетЧто(HTTPСоединение, "Конструктор по умолчанию с заполнением всех параметров")
		.ИмеетТип("ОбработкаОбъект.ЮТHTTPСоединение")
		.Свойство("ЗащищенноеСоединение").Равно(ЗащищенноеСоединение)
		.Свойство("SecureConnection").Равно(ЗащищенноеСоединение)
		.Свойство("ИспользоватьАутентификациюОС").Равно(ИспользоватьАутентификациюОС)
		.Свойство("UseOSAuthentication").Равно(ИспользоватьАутентификациюОС)
		.Свойство("Пароль").Равно(Пароль)
		.Свойство("Password").Равно(Пароль)
		.Свойство("Пользователь").Равно(Пользователь)
		.Свойство("User").Равно(Пользователь)
		.Свойство("Порт").Равно(Порт)
		.Свойство("Port").Равно(Порт)
		.Свойство("Прокси").Равно(Прокси)
		.Свойство("Proxy").Равно(Прокси)
		.Свойство("Сервер").Равно(Сервер)
		.Свойство("Host").Равно(Сервер)
		.Свойство("Таймаут").Равно(Таймаут)
		.Свойство("Timeout").Равно(Таймаут)
	;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция HTTPСоединение()
	
	Возврат ЮТест.Данные().HTTPСоединение();
	
КонецФункции

#КонецОбласти
