//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты
		.ДобавитьТест("ЗначениеСвойства")
		.ДобавитьТест("ДобавитьКДате")
		.ДобавитьТест("Инкремент")
		.ДобавитьТест("ЧислоВСтроку")
		.ДобавитьТест("ПредставлениеПродолжительности")
		.ДобавитьТест("ПредставлениеУниверсальнойДата")
		.ДобавитьТест("ДанныеТекстовогоФайла")
		.ДобавитьТест("ЗначениеИзJSON")
		.ДобавитьТест("ПеременнаяСодержитСвойство")
		.ДобавитьТест("СвойствоПеременной")
		.ДобавитьТест("СообщитьПользователю")
		.ДобавитьТест("СтрокаJSON")
		.ДобавитьТест("УстановленБезопасныйРежим")
		.ДобавитьТест("МестноеВремяПоВременнойМетке")
		.ДобавитьТест("ПродолжительностьВСекундах")
		.ДобавитьТест("Модуль")
		.ДобавитьСерверныйТест("Менеджер")
		.ДобавитьТест("ТипСтруктуры")
		.ДобавитьТест("ЭтаСтруктураИмеетТип")
		.ДобавитьТест("УказатьТипСтруктуры")
		.ДобавитьТест("Пауза")
		.ДобавитьТест("ВывестиВКонсоль")
		.ДобавитьТест("Макет")
		.добавитьСерверныйТест("ЗначениеСвойства_Субконто")
	;
	
КонецПроцедуры

Процедура ЗначениеСвойства() Экспорт
	
	// Тест простого свойства
	Объект = Новый Структура("Имя", "Тест");
	ЮТест.ОжидаетЧто(ЮТОбщий.ЗначениеСвойства(Объект, "Имя"))
		.Равно("Тест");
	
	// Тест вложенного свойства
	Объект = Новый Структура("Вложенный", Новый Структура("Имя", "Тест"));
	ЮТест.ОжидаетЧто(ЮТОбщий.ЗначениеСвойства(Объект, "Вложенный.Имя"))
		.Равно("Тест");
	
	// Тест элемента массива
	Объект = Новый Структура("Массив", ЮТКоллекции.ЗначениеВМассиве("Тест"));
	ЮТест.ОжидаетЧто(ЮТОбщий.ЗначениеСвойства(Объект, "Массив[0]"))
		.Равно("Тест");
	
	// Тест отрицательного индекса
	Объект = Новый Структура("Массив", ЮТКоллекции.ЗначениеВМассиве("Тест1", "Тест2"));
	ЮТест.ОжидаетЧто(ЮТОбщий.ЗначениеСвойства(Объект, "Массив[-1]"))
		.Равно("Тест2");
	
КонецПроцедуры

Процедура ДобавитьКДате() Экспорт
	
	Дата = '20240101';
	
	// Тест добавления дней
	ЮТест.ОжидаетЧто(ЮТОбщий.ДобавитьКДате(Дата, 1, "день"))
		.Равно('20240102');
	
	// Тест добавления месяцев
	ЮТест.ОжидаетЧто(ЮТОбщий.ДобавитьКДате(Дата, 1, "месяц"))
		.Равно('20240201');
	
	// Тест добавления кварталов
	ЮТест.ОжидаетЧто(ЮТОбщий.ДобавитьКДате(Дата, 1, "квартал"))
		.Равно('20240401');
	
	// Тест добавления лет
	ЮТест.ОжидаетЧто(ЮТОбщий.ДобавитьКДате(Дата, 1, "год"))
		.Равно('20250101');
	
КонецПроцедуры

Процедура Инкремент() Экспорт
	
	// Тест инкремента с шагом по умолчанию
	ЮТест.ОжидаетЧто(ЮТОбщий.Инкремент(1))
		.Равно(2);
	
	// Тест инкремента с заданным шагом
	ЮТест.ОжидаетЧто(ЮТОбщий.Инкремент(1, 2))
		.Равно(3);
	
КонецПроцедуры

Процедура ЧислоВСтроку() Экспорт
	
	// Тест положительного числа
	ЮТест.ОжидаетЧто(ЮТОбщий.ЧислоВСтроку(123))
		.Равно("123");
	
	// Тест отрицательного числа
	ЮТест.ОжидаетЧто(ЮТОбщий.ЧислоВСтроку(-123))
		.Равно("-123");
	
	// Тест нуля
	ЮТест.ОжидаетЧто(ЮТОбщий.ЧислоВСтроку(0))
		.Равно("0");
	
КонецПроцедуры

Процедура ПредставлениеПродолжительности() Экспорт
	
	// Тест продолжительности в секундах
	ЮТест.ОжидаетЧто(ЮТОбщий.ПредставлениеПродолжительности(1000))
		.Равно("1 сек");
	
	// Тест продолжительности с миллисекундами
	ЮТест.ОжидаетЧто(ЮТОбщий.ПредставлениеПродолжительности(1500))
		.Равно("1.500 сек");
	
КонецПроцедуры

Процедура ПредставлениеУниверсальнойДата() Экспорт
	
	// Тест текущей даты
	ТекущаяДата = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ЮТест.ОжидаетЧто(ЮТОбщий.ПредставлениеУниверсальнойДата(ТекущаяДата))
		.Заполнено()
		.Содержит(".");
	
	// Тест только времени
	ЮТест.ОжидаетЧто(ЮТОбщий.ПредставлениеУниверсальнойДата(ТекущаяДата, Истина))
		.Заполнено()
		.Содержит(":");
	
КонецПроцедуры

Процедура ПеременнаяСодержитСвойство() Экспорт
	
	// Тест существующего свойства
	Объект = Новый Структура("Имя", "Тест");
	ЮТест.ОжидаетЧто(ЮТОбщий.ПеременнаяСодержитСвойство(Объект, "Имя"))
		.ЭтоИстина();
	
	// Тест отсутствующего свойства
	ЮТест.ОжидаетЧто(ЮТОбщий.ПеременнаяСодержитСвойство(Объект, "Несуществующее"))
		.ЭтоЛожь();
	
	// Тест неопределенного значения
	ЮТест.ОжидаетЧто(ЮТОбщий.ПеременнаяСодержитСвойство(Неопределено, "Имя"))
		.ЭтоЛожь();
	
КонецПроцедуры

Процедура СвойствоПеременной() Экспорт
	
	// Тест существующего свойства
	Объект = Новый Структура("Имя", "Тест");
	ЮТест.ОжидаетЧто(ЮТОбщий.СвойствоПеременной(Объект, "Имя"))
		.Равно("Тест");
	
	// Тест отсутствующего свойства
	ЮТест.ОжидаетЧто(ЮТОбщий.СвойствоПеременной(Объект, "Несуществующее", "По умолчанию"))
		.Равно("По умолчанию");
	
	// Тест неопределенного значения
	ЮТест.ОжидаетЧто(ЮТОбщий.СвойствоПеременной(Неопределено, "Имя", "По умолчанию"))
		.Равно("По умолчанию");
	
КонецПроцедуры

Процедура ТипСтруктуры() Экспорт
	
	// Тест структуры с типом
	Структура = Новый Структура;
	Структура.Вставить("__type__", "ТестовыйТип");
	ЮТест.ОжидаетЧто(ЮТОбщий.ТипСтруктуры(Структура))
		.Равно("ТестовыйТип");
	
	// Тест структуры без типа
	Структура = Новый Структура;
	ЮТест.ОжидаетЧто(ЮТОбщий.ТипСтруктуры(Структура))
		.Равно(Неопределено);
	
КонецПроцедуры

Процедура ЭтаСтруктураИмеетТип() Экспорт
	
	// Тест структуры с указанным типом
	Структура = Новый Структура;
	Структура.Вставить("__type__", "ТестовыйТип");
	ЮТест.ОжидаетЧто(ЮТОбщий.ЭтаСтруктураИмеетТип(Структура, "ТестовыйТип"))
		.ЭтоИстина();
	
	// Тест структуры с другим типом
	ЮТест.ОжидаетЧто(ЮТОбщий.ЭтаСтруктураИмеетТип(Структура, "ДругойТип"))
		.ЭтоЛожь();
	
	// Тест структуры без типа
	Структура = Новый Структура;
	ЮТест.ОжидаетЧто(ЮТОбщий.ЭтаСтруктураИмеетТип(Структура, "ТестовыйТип"))
		.ЭтоЛожь();
	
КонецПроцедуры

Процедура УказатьТипСтруктуры() Экспорт
	
	// Тест установки типа
	Структура = Новый Структура;
	ЮТОбщий.УказатьТипСтруктуры(Структура, "ТестовыйТип");
	ЮТест.ОжидаетЧто(Структура["__type__"])
		.Равно("ТестовыйТип");
	
КонецПроцедуры

Процедура Пауза() Экспорт
	
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ЮТОбщий.Пауза(1);
	ЮТОбщий.Пауза(1);
	ЮТОбщий.Пауза(1);
	Дельта = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;
	
	ЮТест.ОжидаетЧто(Дельта)
		.МеждуВключаяГраницы(3000, 3999);
	
КонецПроцедуры

Процедура ВывестиВКонсоль() Экспорт
	
	ЮТОбщий.ВывестиВКонсоль(ТекущаяДата());
	
КонецПроцедуры

#Если Сервер Тогда
Процедура Менеджер() Экспорт
	
	Варианты = ЮТест.Варианты("Параметр, Результат")
		.Добавить("Справочник.Товары", Справочники.Товары)
		.Добавить("Справочники.Товары", Справочники.Товары)
		.Добавить(Справочники.Товары, Справочники.Товары)
		.Добавить(Справочники.Товары.ПустаяСсылка(), Справочники.Товары)
		.Добавить(Тип("СправочникМенеджер.Товары"), Справочники.Товары)
		.Добавить(Тип("СправочникСсылка.Товары"), Справочники.Товары)
		.Добавить(ЮТМетаданные.ОписаниеОбъектаМетаданных("Справочник.Товары"), Справочники.Товары)
		.Добавить("РегистрыНакопления.Взаиморасчеты", РегистрыНакопления.Взаиморасчеты)
		;
	
	Для Каждого Вариант Из Варианты.СписокВариантов() Цикл
		
		Описание = СтрШаблон("%1 (%2)", Вариант.Параметр, ТипЗнч(Вариант.Параметр));
		ЮТест.ОжидаетЧто(ЮТОбщий.Менеджер(Вариант.Параметр), Описание)
			.Равно(Вариант.Результат);
		
	КонецЦикла;
	
КонецПроцедуры
#КонецЕсли

#Если Сервер Тогда
Процедура ЗначениеСвойства_Субконто() Экспорт
	
	Валюта = ЮТест.Данные().СоздатьЭлемент(Справочники.Валюты);
	Счет = ЮТест.Данные().КонструкторОбъекта("ПланыСчетов.Основной")
		.ФикцияОбязательныхПолей()
		.Установить("Валютный", Истина)
		.Установить("Количественный", Истина)
		.ТабличнаяЧасть("ВидыСубконто")
			.ДобавитьСтроку()
				.Установить("ВидСубконто", ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконто.Валюта"))
				.Фикция("Суммовой")
				.Установить("Валютный", Истина)
				.Установить("Количественный", Истина)
		.Записать();
	
	Набор = РегистрыБухгалтерии.Основной.СоздатьНаборЗаписей();
	Запись = Набор.Добавить();
	Запись.Счет = Счет;
	Запись.Субконто.Валюта = Валюта;
	
	ЮТест.ОжидаетЧто(Запись)
		.Свойство("Субконто.Валюта").Равно(Валюта);
	
КонецПроцедуры
#КонецЕсли

Процедура ДанныеТекстовогоФайла() Экспорт
	
	// Тест чтения существующего файла
	ПутьКФайлу = ПолучитьИмяВременногоФайла("txt");
	Текст = "Тестовый текст";
	ЮТФайлы.ЗаписатьТекстВФайла(ПутьКФайлу, Текст);
	
	ЮТест.ОжидаетЧто(ЮТОбщий.ДанныеТекстовогоФайла(ПутьКФайлу))
		.Равно(Текст);
	
	УдалитьФайлы(ПутьКФайлу);
	
КонецПроцедуры

Процедура ЗначениеИзJSON() Экспорт
	
	// Тест десериализации простого JSON
	JSON = "{""имя"": ""Иван"", ""возраст"": 30}";
	ОжидаемоеЗначение = Новый Структура;
	ОжидаемоеЗначение.Вставить("имя", "Иван");
	ОжидаемоеЗначение.Вставить("возраст", 30);
	
	ЮТест.ОжидаетЧто(ЮТОбщий.ЗначениеИзJSON(JSON))
		.Равно(ОжидаемоеЗначение);
	
	// Тест десериализации вложенного JSON
	JSON = "{""пользователь"": {""имя"": ""Иван"", ""адрес"": {""город"": ""Москва""}}}";
	ОжидаемоеЗначение = Новый Структура;
	ОжидаемоеЗначение.Вставить("пользователь", Новый Структура);
	ОжидаемоеЗначение.пользователь.Вставить("имя", "Иван");
	ОжидаемоеЗначение.пользователь.Вставить("адрес", Новый Структура);
	ОжидаемоеЗначение.пользователь.адрес.Вставить("город", "Москва");
	
	ЮТест.ОжидаетЧто(ЮТОбщий.ЗначениеИзJSON(JSON))
		.Равно(ОжидаемоеЗначение);
	
КонецПроцедуры

Процедура СообщитьПользователю() Экспорт
	
	// Тест сообщения пользователю
	ЮТОбщий.СообщитьПользователю("Тестовое сообщение");
	
КонецПроцедуры

Процедура СтрокаJSON() Экспорт
	
	// Тест преобразования структуры в JSON
	Структура = Новый Структура;
	Структура.Вставить("имя", "Иван");
	Структура.Вставить("возраст", 30);
	
	ЮТест.ОжидаетЧто(ЮТОбщий.СтрокаJSON(Структура, Ложь))
		.Содержит("""имя"": ""Иван""")
		.Содержит("""возраст"": 30");
	
КонецПроцедуры

Процедура УстановленБезопасныйРежим() Экспорт
	
	// Тест проверки безопасного режима
	ЮТест.ОжидаетЧто(ЮТОбщий.УстановленБезопасныйРежим())
		.ИмеетТип("Булево");
	
КонецПроцедуры

Процедура МестноеВремяПоВременнойМетке() Экспорт
	
	// Тест преобразования временной метки в местное время
	ВременнаяМетка = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ЮТест.ОжидаетЧто(ЮТОбщий.МестноеВремяПоВременнойМетке(ВременнаяМетка))
		.Заполнено();
	
КонецПроцедуры

Процедура ПродолжительностьВСекундах() Экспорт
	
	// Тест преобразования продолжительности в секунды
	ЮТест.ОжидаетЧто(ЮТОбщий.ПродолжительностьВСекундах(60000))
		.Равно(60);
	
КонецПроцедуры

Процедура Модуль() Экспорт
	
	// Тест получения модуля объекта
	ЮТест.ОжидаетЧто(ЮТОбщий.Модуль("ОМ_ЮТОбщий"))
		.Равно(ОМ_ЮТОбщий);
	
КонецПроцедуры

Процедура Макет() Экспорт
	
	// Тест получения макета
	ЮТест.ОжидаетЧто(ЮТОбщий.Макет("ОбщийМакет.ЮТ_МакетТестовыхДанных"))
		.ИмеетТип("ТабличныйДокумент");
	
	// Тест получения области макета
	ЮТест.ОжидаетЧто(ЮТОбщий.Макет("ОбщийМакет.ЮТ_МакетТестовыхДанных.R2C1:R5C11"))
		.ИмеетТип("ТабличныйДокумент");
	
	// Тест получения несуществующего макета
	ЮТест.ОжидаетЧто(ЮТОбщий)
		.Метод("Макет").Параметр("НесуществующийМакет")
		.ВыбрасываетИсключение("Некорректное имя макет");
	
КонецПроцедуры

#КонецОбласти
