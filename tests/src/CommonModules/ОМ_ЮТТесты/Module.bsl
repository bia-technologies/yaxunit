//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты
		.ДобавитьТест("СПараметрами")
		.ДобавитьТест("Представление")
		.ДобавитьТест("СПараметрамиНаКлиенте")
		.ДобавитьТест("СПараметрамиНаСервере")
		.ДобавитьТест("СвойствоОтчета_Тест")
		.ДобавитьТест("СвойствоАлюр_Тест")
	;
	
КонецПроцедуры

Процедура ПередКаждымТестом() Экспорт
	
	ОписаниеМодуля = ЮТФабрика.ОписаниеМетаданныеМодуля();
	ОписаниеМодуля.КлиентУправляемоеПриложение = Истина;
	ОписаниеМодуля.КлиентОбычноеПриложение = Истина;
	ОписаниеМодуля.Сервер = Истина;
	
	ЮТТестыСлужебный.ПередЧтениемСценариевМодуля(ОписаниеМодуля);
	
КонецПроцедуры

Процедура СПараметрами() Экспорт
	ЮТТесты
		.ДобавитьТест("Тест1")
		.ДобавитьТест("Тест2").СПараметрами(1, 2, 3)
		.ДобавитьТест("Тест3")
			.СПараметрами(1)
			.СПараметрами(2)
			.СПараметрами(3)
	;
	
	ЮТест.ОжидаетЧто(ТестыТекущегоНабора())
		.ИмеетДлину(5)
		.Свойство("[0].Параметры").ЭтоНеопределено()
		.Свойство("[1].Параметры").ИмеетДлину(3)
			.Свойство("[1].Параметры[0]").Равно(1)
			.Свойство("[1].Параметры[1]").Равно(2)
			.Свойство("[1].Параметры[2]").Равно(3)
		.Свойство("[2].Параметры").ИмеетДлину(1)
		.Свойство("[3].Параметры[0]").Равно(2)
		.Свойство("[4].Параметры[0]").Равно(3)
	;
	
КонецПроцедуры

Процедура Представление() Экспорт
	
	ЮТТесты
		.ДобавитьТестовыйНабор("Набор1").Представление("Представление набора")
		.ДобавитьТест("Тест1").Представление("Представление теста")
			.ДобавитьТест("Тест2")
				.СПараметрами(1).Представление("Представление теста 2", Истина)
				.СПараметрами(2).Представление("Представление теста 3")
	;
	
	ЮТест.ОжидаетЧто(ТекущийНабор())
		.Свойство("Представление").Равно("Представление набора")
		.Свойство("Тесты[0].Представление").Равно("Представление теста")
		.Свойство("Тесты[1].Представление").Равно("Тест2. Представление теста 2")
		.Свойство("Тесты[2].Представление").Равно("Представление теста 3");
	
КонецПроцедуры

Процедура СПараметрамиНаКлиенте() Экспорт
	
	КонтекстыВызова = ЮТФабрика.КонтекстыВызова();
	ЮТТесты
		.ДобавитьКлиентскийТест("Тест1")
			.СПараметрамиНаКлиенте(1)
		.ДобавитьТест("Тест2")
			.СПараметрамиНаКлиенте(1, 2, 3)
			.СПараметрами(2)
	;
	
	ЮТест.ОжидаетЧто(ТестыТекущегоНабора())
		.ИмеетДлину(3)
		.Свойство("[0].Параметры").ИмеетДлину(1)
		.Свойство("[0].КонтекстВызова").Равно(ЮТКоллекции.ЗначениеВМассиве(КонтекстыВызова.КлиентУправляемоеПриложение, КонтекстыВызова.КлиентОбычноеПриложение))
		.Свойство("[1].Параметры").ИмеетДлину(3)
		.Свойство("[1].КонтекстВызова").Равно(ЮТКоллекции.ЗначениеВМассиве(КонтекстыВызова.КлиентУправляемоеПриложение, КонтекстыВызова.КлиентОбычноеПриложение))
		.Свойство("[2].КонтекстВызова").ИмеетДлину(3)
	;
	
	ЮТест.ОжидаетЧто(ЮТТесты.ДобавитьСерверныйТест("Тест3"))
		.Метод("СПараметрамиНаКлиенте").Параметр(1)
		.ВыбрасываетИсключение("Не пересекаются контексты базового теста [Сервер] и устанавливаемые [КлиентУправляемоеПриложение, КлиентОбычноеПриложение]");
	
КонецПроцедуры

Процедура СПараметрамиНаСервере() Экспорт
	
	КонтекстыВызова = ЮТФабрика.КонтекстыВызова();
	ЮТТесты
		.ДобавитьСерверныйТест("Тест1")
			.СПараметрамиНаСервере(1)
		.ДобавитьТест("Тест2")
			.СПараметрамиНаСервере(1, 2, 3)
			.СПараметрами(2)
	;
	
	ЮТест.ОжидаетЧто(ТестыТекущегоНабора())
		.ИмеетДлину(3)
		.Свойство("[0].Параметры").ИмеетДлину(1)
		.Свойство("[0].КонтекстВызова").Равно(ЮТКоллекции.ЗначениеВМассиве(КонтекстыВызова.Сервер))
		.Свойство("[1].Параметры").ИмеетДлину(3)
		.Свойство("[1].КонтекстВызова").Равно(ЮТКоллекции.ЗначениеВМассиве(КонтекстыВызова.Сервер))
		.Свойство("[2].КонтекстВызова").ИмеетДлину(3)
	;
	
	ЮТест.ОжидаетЧто(ЮТТесты.ДобавитьКлиентскийТест("Тест3"))
		.Метод("СПараметрамиНаСервере").Параметр(1)
		.ВыбрасываетИсключение("Не пересекаются контексты базового теста [КлиентУправляемоеПриложение, КлиентОбычноеПриложение] и устанавливаемые [Сервер]");
	
КонецПроцедуры

Процедура СвойствоОтчета_Тест() Экспорт
	
	СвойстваОтчета = ЮТАлюр.Свойства();
	ПроизвольноеСвойство = "Произвольное свойство";
	
	ЮТТесты
		.ДобавитьТест("Тест1")
			.СвойствоОтчета(СвойстваОтчета.Серьезность, "critical")
			.СвойствоОтчета(СвойстваОтчета.Описание, "Мой первый тест")
			.СвойствоОтчета(ПроизвольноеСвойство, ПроизвольноеСвойство)
	;
	
	ЮТест.ОжидаетЧто(ТестыТекущегоНабора())
		.ИмеетДлину(1)
		.Свойство("[0].СвойстваОтчета")
			.ИмеетДлину(3)
		.ИмеетСвойство("severity")
		.ИмеетСвойство("description")
		.ИмеетСвойство(ПроизвольноеСвойство)
	;
КонецПроцедуры

Процедура СвойствоАлюр_Тест() Экспорт
	
	Свойства = ЮТАлюр.Свойства();
	СтруктураСвойств = Новый Структура;
	СтруктураСвойств.Вставить(Свойства.Серьезность, "critical");
	СтруктураСвойств.Вставить(Свойства.Описание, "Мой первый тест");
	СтруктураСвойств.Вставить("Произвольное свойство", "Произвольное свойство");
	
	ЮТТесты
		.ДобавитьТест("Тест1")
			.СвойстваAllure(СтруктураСвойств)
	;
	
	ЮТест.ОжидаетЧто(ТестыТекущегоНабора())
		.ИмеетДлину(1)
		.Свойство("[0].СвойстваAllure")
			.ИмеетДлину(3)
		.ИмеетСвойство("severity")
		.ИмеетСвойство("description")
		.ИмеетСвойство("Произвольное свойство")
	;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекущийНабор()
	
	Возврат ЮТТестыСлужебный.Контекст().ТекущийНабор;
	
КонецФункции

Функция ТестыТекущегоНабора()
	
	Возврат ТекущийНабор().Тесты;
	
КонецФункции

#КонецОбласти
