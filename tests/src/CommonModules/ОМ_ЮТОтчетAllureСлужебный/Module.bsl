//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты
		.Настроить(ЮТАлюр
			.Epic("Unit tests")
			.Suite("Проверка формирования отчета Allure")
			.Feature("Проверка формирования отчета Allure")
			.Пакет("ФормированиеОтчета.Allure")
			.Owner("alkoleft")
			.Свойство("Проверяемый объект", "ЮТОтчетAllureСлужебный"))
		.ДобавитьТест("ПараметрыГенерацииОтчета")
		.ДобавитьТест("ЗаписатьОтчет")
		.ДобавитьТест("ОписаниеТеста")
		.ДобавитьТест("ОписаниеТеста_Представление")
		.ДобавитьТест("ОписаниеТеста_Теги")
		.ДобавитьТест("ОписаниеТеста_СвойстваAllure")
	;
	
КонецПроцедуры

Процедура ПараметрыГенерацииОтчета() Экспорт
	
	ЮТАлюр.Описание("Проверка параметров генерации отчета Allure")
		.Серьезность(ЮТАлюр.УровниСерьезности().Критический);
	
	Параметры = ЮТОтчетAllureСлужебный.ПараметрыГенерацииОтчета();
	
	ЮТест.ОжидаетЧто(Параметры)
		.Свойство("Форматы")
			.ИмеетДлину(1)
			.ИмеетСвойство("allure");
	
КонецПроцедуры

Процедура ЗаписатьОтчет() Экспорт
	
	ЮТАлюр.Описание("Проверка записи отчета Allure в файл")
		.Серьезность(ЮТАлюр.УровниСерьезности().Критический);
	
	РезультатТестирования = ТестовыеДанные.РезультатТестирования();
	РезультатТестирования[0].Теги = ЮТКоллекции.ЗначениеВМассиве("Тестовый модуль");
	
	Каталог = ЮТест.Данные().НовоеИмяВременногоФайла();
	СоздатьКаталог(Каталог);
	Формат = ЮТОтчетAllureСлужебный.ПараметрыГенерацииОтчета().Форматы.allure;
	ЮТОтчетAllureСлужебный.ЗаписатьОтчет(РезультатТестирования, Каталог, Формат, Неопределено);
	
КонецПроцедуры

Процедура ОписаниеТеста() Экспорт
	
	ЮТАлюр.Описание("Проверка формирования описания теста в формате Allure")
		.Серьезность(ЮТАлюр.УровниСерьезности().Критический);
	
	Модуль = ТестовыеДанные.ОписаниеТестовогоМодуля();
	Набор = ТестовыеДанные.ОписаниеТестовогоНабора(Модуль);
	Тест = ТестовыеДанные.ОписаниеТеста(Модуль, Набор);
	
	ОписаниеТеста = ЮТОтчетAllureСлужебный.ОписаниеТеста(Тест, Набор, Модуль);
	ЮТест.ОжидаетЧто(ОписаниеТеста)
		.ИмеетТип("Структура")
		.Заполнено()
	;
	
	ИмяТестовогоНабора = Модуль.Метаданные.Имя;
	ИмяВложенногоНабора = СтрШаблон("%1 [%2]", Набор.Представление, Тест.Режим);
	СодержитМетку(ОписаниеТеста, "suite", ИмяТестовогоНабора);
	СодержитМетку(ОписаниеТеста, "subSuite", ИмяВложенногоНабора);
	
	Набор.Представление = Модуль.Метаданные.Имя;
	ОписаниеТеста = ЮТОтчетAllureСлужебный.ОписаниеТеста(Тест, Набор, Модуль);
	СодержитМетку(ОписаниеТеста, "suite", ИмяТестовогоНабора);
	ЮТест.ОжидаетЧто(ОписаниеТеста)
		.Свойство("labels")
		.НеСодержит(ЮТест.Предикат()
			.Реквизит("name").Равно("subSuite"))
	;
	
КонецПроцедуры

Процедура ОписаниеТеста_Представление() Экспорт
	
	ЮТАлюр.Описание("Проверка формирования представления теста")
		.Серьезность(ЮТАлюр.УровниСерьезности().Незначительный);
	
	Модуль = ТестовыеДанные.ОписаниеТестовогоМодуля();
	Набор = ТестовыеДанные.ОписаниеТестовогоНабора(Модуль);
	Тест = ТестовыеДанные.ОписаниеТеста(Модуль, Набор);
	Тест.Имя = "Нужное представление";
	
	ОписаниеТеста = ЮТОтчетAllureСлужебный.ОписаниеТеста(Тест, Набор, Модуль);
	ЮТест.ОжидаетЧто(ОписаниеТеста)
		.ИмеетТип("Структура")
		.Свойство("name").Равно(Тест.Имя)
		.Заполнено()
	;
	
КонецПроцедуры

Процедура ОписаниеТеста_Теги() Экспорт
	
	ЮТАлюр.Описание("Проверка установки тегов")
		.Серьезность(ЮТАлюр.УровниСерьезности().Незначительный);
	
	Модуль = ТестовыеДанные.ОписаниеТестовогоМодуля();
	Набор = ТестовыеДанные.ОписаниеТестовогоНабора(Модуль);
	Тест = ТестовыеДанные.ОписаниеТеста(Модуль, Набор);
	
	Модуль.Теги = ЮТСтроки.РазделитьСтроку("Модуль, Тег1, Тег 2", ",");
	Набор.Теги = ЮТСтроки.РазделитьСтроку("Набор, ТЕГ 2, Тег3", ",");
	Тест.Теги = СтрРазделить("Тест, тег3, тег4", ", ", Ложь);
	ОписаниеТеста = ЮТОтчетAllureСлужебный.ОписаниеТеста(Тест, Набор, Модуль);
	
	Для Каждого Метка Из ЮТСтроки.РазделитьСтроку("Модуль, Набор, Тест, Тег 2, Тег3, тег4", ",") Цикл
		СодержитМетку(ОписаниеТеста, "tag", Метка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОписаниеТеста_СвойстваAllure() Экспорт
	
	ЮТАлюр.Описание("Проверка заполнения установленных свойств Allure")
		.Серьезность(ЮТАлюр.УровниСерьезности().Незначительный);
	
	ПроизвольноеСвойство = "Произвольное свойство";
	ПроизвольноеСвойство2 = "Произвольное свойство";
	
	Модуль = ТестовыеДанные.ОписаниеТестовогоМодуля();
	Набор = ТестовыеДанные.ОписаниеТестовогоНабора(Модуль);
	Тест = ТестовыеДанные.ОписаниеТеста(Модуль, Набор);
	
	Модуль.СвойстваAllure.Вставить("epic", "Эпичный");
	Модуль.СвойстваAllure.Вставить("severity", "blocker");
	Набор.СвойстваAllure.Вставить("feature", "Функциональный");
	Тест.СвойстваAllure.Вставить("story", "История");
	Тест.СвойстваAllure.Вставить(ПроизвольноеСвойство, ПроизвольноеСвойство);
	Тест.СвойстваОтчета.Вставить(ПроизвольноеСвойство2, ПроизвольноеСвойство2);
	Тест.СвойстваAllure.Вставить("description", "Описание");
	
	ОписаниеТеста = ЮТОтчетAllureСлужебный.ОписаниеТеста(Тест, Набор, Модуль);
	
	ЮТест.ОжидаетЧто(ОписаниеТеста)
		.Свойство("description").Равно("Описание")
		.Свойство("labels")
			.Содержит(ЮТест.Предикат()
				.Реквизит("name").Равно("severity")
				.Реквизит("value").Равно("blocker"))
			.Содержит(ЮТест.Предикат()
				.Реквизит("name").Равно("epic")
				.Реквизит("value").Равно("Эпичный"))
			.Содержит(ЮТест.Предикат()
				.Реквизит("name").Равно("feature")
				.Реквизит("value").Равно("Функциональный"))
			.Содержит(ЮТест.Предикат()
				.Реквизит("name").Равно("story")
				.Реквизит("value").Равно("История"))
			.Содержит(ЮТест.Предикат()
				.Реквизит("name").Равно(ПроизвольноеСвойство)
				.Реквизит("value").Равно(ПроизвольноеСвойство))
			.Содержит(ЮТест.Предикат()
				.Реквизит("name").Равно(ПроизвольноеСвойство2)
				.Реквизит("value").Равно(ПроизвольноеСвойство2))
	;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СодержитМетку(ОписаниеТеста, ИмяМетки, ЗначениеМетки)
	
	ЮТест.ОжидаетЧто(ОписаниеТеста)
		.Свойство("labels")
		.Содержит(ЮТест.Предикат()
			.Реквизит("name").Равно(ИмяМетки)
			.Реквизит("value").Равно(ЗначениеМетки))
	;
КонецПроцедуры

#КонецОбласти
