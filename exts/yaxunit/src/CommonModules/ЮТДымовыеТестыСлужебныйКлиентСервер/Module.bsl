//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2024 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Функция ИспользоватьДымовыеТесты() Экспорт
	
	ДымовыеТесты = ПараметрыДымовыхТестов();
	Возврат ИспользоватьНастройку(ДымовыеТесты, Ложь);
	
КонецФункции

Функция ИспользоватьВидДымовыхТесты(КлючНастройки) Экспорт
	
	Параметры = ПараметрыВидаДымовогоТеста(КлючНастройки);
	Возврат Параметры.Использовать;
	
КонецФункции

Функция ПараметрыДымовыхТестов() Экспорт
	
	ПараметрыЗапуска = ЮТКонтекстСлужебный.ПараметрыЗапуска();
	Возврат ЮТКоллекции.ЗначениеСтруктуры(ПараметрыЗапуска, "ДымовыеТесты");
	
КонецФункции

Функция ПараметрыВидаДымовогоТеста(Ключ) Экспорт
	
	Настройка = Новый Структура("Использовать", Ложь);
	
	ДымовыеТесты = ПараметрыДымовыхТестов();
	Настройка.Использовать = ИспользоватьНастройку(ДымовыеТесты, Ложь);
	
	Если НЕ Настройка.Использовать Или ТипЗнч(ДымовыеТесты) = Тип("Булево") Тогда
		Возврат Настройка;
	КонецЕсли;
	
	НастройкиТеста = ЮТКоллекции.ЗначениеСтруктуры(ДымовыеТесты, Ключ);
	
	Использовать = ИспользоватьНастройку(НастройкиТеста, Ложь);
	Если ТипЗнч(НастройкиТеста) = Тип("Структура") Тогда
		НастройкиТеста.Вставить("Использовать", Использовать);
		Возврат НастройкиТеста;
	КонецЕсли;
	
	Настройка.Использовать = Использовать;
	Возврат Настройка;
	
КонецФункции

Функция ИспользоватьНастройку(Настройка, ЗначениеПоУмолчанию) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Настройка) Или Настройка = Ложь Тогда
		Использовать = ЗначениеПоУмолчанию;
	ИначеЕсли Настройка = Истина Тогда
		Использовать = Истина;
	Иначе
		Использовать = ЮТКоллекции.ЗначениеСтруктуры(Настройка, "Использовать", ЗначениеПоУмолчанию);
	КонецЕсли;
	
	Возврат Использовать;
	
КонецФункции

Функция ПрочитанБазовыеЭлементНастройки(Настройки, Ключ, Значение, Путь) Экспорт
	
	Если СтрСравнить(Ключ, "Использовать") = 0 Тогда
		Настройки.Использовать = Значение;
	ИначеЕсли СтрСравнить(Ключ, "Исключения") = 0 Тогда
		ПрочитатьИсключения(Настройки, Значение, Путь);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьНаборИсключений(НаборыИсключений, ЭлементНастройки) Экспорт
	
	Если ЭлементНастройки <> Неопределено И ЗначениеЗаполнено(ЭлементНастройки.Исключения) Тогда
		НаборыИсключений.Добавить(ЭлементНастройки.Исключения);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодходитПодНаборыИсключений(Ключ, НаборыИсключений) Экспорт
	
	Для Каждого Набор Из НаборыИсключений Цикл
		
		Если ПодходитПодИсключения(Ключ, Набор) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПодходитПодИсключения(Ключ, НаборИсключений) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НаборИсключений) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ОписаниеИсключения Из НаборИсключений Цикл
		
		Если ЮТСтроки.СоответствуетШаблону(Ключ, ОписаниеИсключения) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НормализованнаяНастройкаИсключений(Исключения) Экспорт
	
	Если ТипЗнч(Исключения) = Тип("Строка") Тогда
		Результат = Новый Массив;
		Результат.Добавить(Исключения);
	ИначеЕсли ТипЗнч(Исключения) = Тип("Массив") Тогда
		Результат = Исключения;
	ИначеЕсли Исключения <> Неопределено Тогда
		ВызватьИсключение "Некорректный тип элемента настроек `Исключения`. Допустимо: Строка или Массив из Строка";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПрочитатьИсключения(Настройки, Исключения, Путь)
	
	Если ТипЗнч(Исключения) = Тип("Строка") Тогда
		Настройки.Исключения.Добавить(Исключения);
	ИначеЕсли ТипЗнч(Исключения) = Тип("Массив") Тогда
		Настройки.Исключения = Исключения;
	ИначеЕсли Исключения <> Неопределено Тогда
		ВызватьИсключение СтрШаблон("Некорректный тип элемента настроек `%1.Исключения`. Допустимо: Строка или Массив из Строка", Путь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
