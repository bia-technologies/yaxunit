//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает текущее состояние исполнения тестов
//
// Возвращаемое значение:
//  Структура - Текущее состояние исполнения тестов
//
Функция ТекущееСостояние() Экспорт
	
	//@skip-check undefined-variable
	Возврат ЮТТекущееСостояниеИсполненияТестов;
	
КонецФункции

// Устанавливает значение состояния этапа по указанному ключу
//
// Параметры:
//  Ключ - Строка - Идентификатор значения состояния
//  Значение - Произвольный - Значение для сохранения в состоянии
//
Процедура УстановитьЗначениеСостоянияЭтапа(Ключ, Значение) Экспорт
	
	ТекущееСостояние = ТекущееСостояние();
	Если ТекущееСостояние = Неопределено Тогда
		ВызватьИсключение "Текущее состояние исполнения тестов не инициализировано";
	Иначе
		ТекущееСостояние.Состояние.Вставить(Ключ, Значение);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет значение состояния этапа по указанному ключу
//
// Параметры:
//  Ключ - Строка - Идентификатор значения состояния для удаления
//
Процедура УдалитьЗначениеСостоянияЭтапа(Ключ) Экспорт
	
	ТекущееСостояние = ТекущееСостояние();
	Если ТекущееСостояние = Неопределено Тогда
		ВызватьИсключение "Текущее состояние исполнения тестов не инициализировано";
	Иначе
		ТекущееСостояние.Состояние.Удалить(Ключ);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает значение состояния этапа по имени реквизита
//
// Параметры:
//  ИмяРеквизита - Строка - Имя реквизита для получения значения
//  ЗначениеПоУмолчанию - Произвольный - Значение, возвращаемое если реквизит не найден
//
// Возвращаемое значение:
//  Произвольный - Значение реквизита или значение по умолчанию
//
Функция ЗначениеСостоянияЭтапа(ИмяРеквизита, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	ТекущееСостояние = ТекущееСостояние();
	Если ТекущееСостояние = Неопределено Тогда
		ВызватьИсключение "Текущее состояние исполнения тестов не инициализировано";
	Иначе
		Возврат ЮТКоллекции.ЗначениеСтруктуры(ТекущееСостояние.Состояние, ИмяРеквизита, ЗначениеПоУмолчанию);
	КонецЕсли;
	
КонецФункции

// Возвращает последнюю ошибку этапа и очищает её из состояния
//
// Возвращаемое значение:
//  ИнформацияОбОшибке - Информация об ошибке или Неопределено, если ошибок нет
//
Функция ПоследняяОшибкаЭтапа() Экспорт
	
	Если ЮТТекущееСостояниеИсполненияТестов <> Неопределено Тогда
		Ошибка = ЮТТекущееСостояниеИсполненияТестов.Ошибка;
		ЮТТекущееСостояниеИсполненияТестов.Ошибка = Неопределено;
	Иначе
		Ошибка = Неопределено;
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

// Проверяет наличие зацикливания в процессе выполнения
//
// Возвращаемое значение:
//  Булево - Истина, если обнаружено зацикливание, иначе Ложь
//
Функция Зацикливание() Экспорт
	
	КритерийЗацикливания = 100;
	
	Состояние = ТекущееСостояние();
	Состояние.СчетчикЗацикливания = Состояние.СчетчикЗацикливания + 1;
	
	Возврат Состояние.СчетчикЗацикливания >= КритерийЗацикливания;
	
КонецФункции

// Инициализирует состояние исполнения тестов
//
// Параметры:
//  Обработчик - ОписаниеОповещения - Обработчик запуска этапа
//  ПараметрыИсполнения - Структура - Параметры исполнения этапа
//  Результат - Произвольный - Объект для хранения результатов
//
Процедура ИнициализироватьСостояние(Обработчик, ПараметрыИсполнения, Результат) Экспорт
	
	ЮТТекущееСостояниеИсполненияТестов = Новый Структура("Обработчик, ПараметрыИсполнения, Результат", Обработчик, ПараметрыИсполнения, Результат);
	ЮТТекущееСостояниеИсполненияТестов.Вставить("Состояние", Новый Структура);
	ЮТТекущееСостояниеИсполненияТестов.Вставить("СчетчикЗацикливания", 0);
	ЮТТекущееСостояниеИсполненияТестов.Вставить("Ошибка", Неопределено);
	
КонецПроцедуры

// Сбрасывает текущее состояние исполнения тестов
//
Процедура СброситьСостояние() Экспорт
	
	ЮТТекущееСостояниеИсполненияТестов = Неопределено; // BSLLS:UnusedLocalVariable-off
	
КонецПроцедуры

#КонецОбласти
