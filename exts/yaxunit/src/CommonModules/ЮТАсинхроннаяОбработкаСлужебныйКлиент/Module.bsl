//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Процедура ВызватьОбработчик(Обработчик, Результат = Неопределено) Экспорт
	
	Если Обработчик <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Обработчик, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВызватьСледующийОбработчик(ПараметрыИсполнения, Результат = Неопределено) Экспорт
	
	Обработчик = СледующийОбработчик(ПараметрыИсполнения);
	Если Обработчик <> Неопределено Тогда
		ЮТЛогирование.Отладка("Вызов обработчика исполнителя: " + Обработчик.ИмяПроцедуры);
		ВызватьОбработчик(Обработчик, Результат);
	КонецЕсли;
	
КонецПроцедуры

Функция СледующийОбработчик(ПараметрыИсполнения) Экспорт
	
	ПараметрыИсполнения.ИндексСледующегоОбработчика = ПараметрыИсполнения.ИндексСледующегоОбработчика + 1;
	Если ПараметрыИсполнения.ИндексСледующегоОбработчика < ПараметрыИсполнения.Цепочка.Количество() Тогда
		Обработчик = ПараметрыИсполнения.Цепочка[ПараметрыИсполнения.ИндексСледующегоОбработчика];
	КонецЕсли;
	
	Возврат Обработчик;
	
КонецФункции

Функция ТекущийОбработчик(ПараметрыИсполнения) Экспорт
	
	Возврат ПараметрыИсполнения.Цепочка[ПараметрыИсполнения.ИндексСледующегоОбработчика];
	
КонецФункции

Процедура ДобавитьОбработчикЦепочки(ПараметрыИсполнения, Модуль, ИмяМетода) Экспорт
	
	Обработчик = Новый ОписаниеОповещения(ИмяМетода, Модуль, ПараметрыИсполнения, "ОбработчикОшибки", ЮТИсполнительСлужебныйКлиент);
	ПараметрыИсполнения.Цепочка.Добавить(Обработчик);
	
КонецПроцедуры

Функция ЦепочкаАсинхроннойОбработки() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("Цепочка", Новый Массив());
	Параметры.Вставить("ИндексСледующегоОбработчика", -1);
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПустойОбработчик(КоличествоПараметров = 1) Экспорт
	
	МаксимальноеДопустимоеЧислоПараметров = 3;
	
	Если КоличествоПараметров >= 1 И КоличествоПараметров <= МаксимальноеДопустимоеЧислоПараметров Тогда
		Возврат Новый ОписаниеОповещения("ПустойОбработчик" + КоличествоПараметров, ЭтотОбъект);
	Иначе
		ВызватьИсключение СтрШаблон("Пустой обработчик с %1 параметрами не реализован", КоличествоПараметров);
	КонецЕсли;
	
КонецФункции

// BSLLS:MissingParameterDescription-off

//@skip-check module-empty-method
//@skip-check doc-comment-parameter-section
Процедура ПустойОбработчик1(Параметр1) Экспорт
	
КонецПроцедуры

//@skip-check module-empty-method
//@skip-check doc-comment-parameter-section
Процедура ПустойОбработчик2(Параметр1, Параметр2) Экспорт
	
КонецПроцедуры

//@skip-check module-empty-method
//@skip-check doc-comment-parameter-section
Процедура ПустойОбработчик3(Параметр1, Параметр2, Параметр3) Экспорт
	
КонецПроцедуры
// BSLLS:MissingParameterDescription-on

Процедура ОтложенныйВызов(ИмяМетода, Интервал = 0.1) Экспорт
	
	ПодключитьОбработчикОжидания(ИмяМетода, Интервал, Истина);
	
КонецПроцедуры

#КонецОбласти
