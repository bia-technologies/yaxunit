//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

// ЗагрузитьТесты
// 	Читает наборы тестов (тестовые модули) из расширений
// Параметры:
//  ПараметрыЗапускаТестов - см. ЮТФабрика.ПараметрыЗапуска
//
// Возвращаемое значение:
//  Массив из см. ЮТФабрикаСлужебный.ОписаниеТестовогоМодуля - Набор описаний тестовых модулей, которые содержат информацию о запускаемых тестах
Функция ЗагрузитьТесты(ПараметрыЗапускаТестов) Экспорт

	ЮТФильтрацияСлужебный.УстановитьКонтекст(ПараметрыЗапускаТестов);
	
	ТестовыеМодули = ТестовыеМодули();
	
	Результат = ТестовыеСценарии(ТестовыеМодули, ПараметрыЗапускаТестов);
	
	ЮТЗависимостиСлужебныйКлиент.ДедупликацияЗависимостей(Результат);
	
	ОчиститьЗначенияСостояния();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// ТестовыеМодули
//  Возвращает описания модулей, содержащих тесты
// Возвращаемое значение:
//  Массив из см. ЮТМетаданныеСлужебныйВызовСервера.МетаданныеМодуля - Тестовые модули
Функция ТестовыеМодули()
	
	Ключи = КлючиСостояния();
	
	ТестовыеМодули = ЮТСостояниеИсполненияТестовСлужебный.ЗначениеСостоянияЭтапа(Ключи.ТестовыеМодули);
	
	Если ЮТСостояниеИсполненияТестовСлужебный.ЗначениеСостоянияЭтапа(Ключи.ТестовыеМодулиЗагружены, Ложь) Тогда
		Возврат ТестовыеМодули;
	КонецЕсли;
	
	ОтфильтрованныеМодули = ОтфильтрованныеМодули();
	
	ОшибочныйМодуль = ЮТСостояниеИсполненияТестовСлужебный.ЗначениеСостоянияЭтапа(Ключи.ТекущийМодуль);
	ПропуститьМодуль = ОшибочныйМодуль <> Неопределено;
	
	Если ТестовыеМодули = Неопределено Тогда
		ТестовыеМодули = Новый Массив;
		ЮТСостояниеИсполненияТестовСлужебный.УстановитьЗначениеСостоянияЭтапа(Ключи.ТестовыеМодули, ТестовыеМодули);
	КонецЕсли;
	
	Для Каждого ОписаниеМодуля Из ОтфильтрованныеМодули Цикл
		
		Если ПропуститьМодуль Тогда
			Если ОписаниеМодуля.Имя = ОшибочныйМодуль Тогда
				ПропуститьМодуль = Ложь;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		ЮТСостояниеИсполненияТестовСлужебный.УстановитьЗначениеСостоянияЭтапа(Ключи.ТекущийМодуль, ОписаниеМодуля.Имя);
		
		Если НЕ ЮТЧитательСлужебный.ЭтоТестовыйМодуль(ОписаниеМодуля) Тогда
			ЮТЛогирование.Отладка("	Пропущен, это не тестовый модуль");
		Иначе
			ЮТЛогирование.Отладка("	Добавлен");
			ТестовыеМодули.Добавить(ОписаниеМодуля);
		КонецЕсли;
		
	КонецЦикла;
	
	ЮТСостояниеИсполненияТестовСлужебный.УстановитьЗначениеСостоянияЭтапа(Ключи.ТестовыеМодулиЗагружены, Истина);
	ЮТСостояниеИсполненияТестовСлужебный.УстановитьЗначениеСостоянияЭтапа(Ключи.ТекущийМодуль, Неопределено);
	
	Возврат ТестовыеМодули;
	
КонецФункции

Функция ОтфильтрованныеМодули()
	
	Ключи = КлючиСостояния();
	
	МодулиРасширения = ЮТМетаданныеСлужебныйВызовСервера.МодулиРасширений();
	МодулиДвижка = ЮТМетаданныеСлужебныйВызовСервера.ИменаМодулейДвижка();
	
	ОтфильтрованныеМодули = ЮТСостояниеИсполненияТестовСлужебный.ЗначениеСостоянияЭтапа(Ключи.ОтфильтрованныеМодули);
	
	Если ОтфильтрованныеМодули = Неопределено Тогда
		
		ОтфильтрованныеМодули = Новый Массив;
		
		Для Каждого ОписаниеМодуля Из МодулиРасширения Цикл
			
			Если МодулиДвижка.Найти(ОписаниеМодуля.Имя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЮТЛогирование.Отладка("Анализ модуля: " + ОписаниеМодуля.Имя);
			
			Если НЕ ЮТФильтрацияСлужебный.ЭтоПодходящийМодуль(ОписаниеМодуля) Тогда
				ЮТЛогирование.Отладка("	Пропущен, не подходит под отбор");
			Иначе
				ОтфильтрованныеМодули.Добавить(ОписаниеМодуля);
			КонецЕсли;
			
		КонецЦикла;
		
		ЮТСостояниеИсполненияТестовСлужебный.УстановитьЗначениеСостоянияЭтапа(Ключи.ОтфильтрованныеМодули, ОтфильтрованныеМодули);
		
	КонецЕсли;
	
	Возврат ОтфильтрованныеМодули;
	
КонецФункции

Функция ТестовыеСценарии(ТестовыеМодули, ПараметрыЗапускаТестов)
	
	Ключи = КлючиСостояния();
	
	Результат = ЮТСостояниеИсполненияТестовСлужебный.ЗначениеСостоянияЭтапа(Ключи.ЗарегистрированныеСценарииМодуля);
	
	Если Результат = Неопределено Тогда
		Результат = Новый Массив;
		ЮТСостояниеИсполненияТестовСлужебный.УстановитьЗначениеСостоянияЭтапа(Ключи.ЗарегистрированныеСценарииМодуля, Результат);
	КонецЕсли;
	
	ОшибочныйМодуль = ЮТСостояниеИсполненияТестовСлужебный.ЗначениеСостоянияЭтапа(Ключи.ТекущийМодуль);
	Если ОшибочныйМодуль <> Неопределено Тогда
		ТекстОшибки = СтрШаблон("Обнаружена ошибка загрузки сценариев модуля `%1`, детали ошибки смотрите выше.", ОшибочныйМодуль);
		ЮТОбщий.СообщитьПользователю(ТекстОшибки);
		ЮТЛогирование.Ошибка(ТекстОшибки);
	КонецЕсли;
	
	ПропуститьМодуль = ОшибочныйМодуль <> Неопределено;
	
	Для Каждого ОписаниеМодуля Из ТестовыеМодули Цикл
		
		Если ПропуститьМодуль Тогда
			Если ОписаниеМодуля.Имя = ОшибочныйМодуль Тогда
				Ошибка = ЮТСостояниеИсполненияТестовСлужебный.ПоследняяОшибкаЭтапа();
				Если Ошибка <> Неопределено Тогда
					ОписаниеТестовогоМодуля = ЮТЧитательСлужебный.ОписаниеТестовогоМодуляСОшибкой(ОписаниеМодуля, Ошибка);
				Иначе
					ОписаниеТестовогоМодуля = ЮТЧитательСлужебный.ОписаниеТестовогоМодуляСОшибкой(ОписаниеМодуля, "Ошибка загрузки тестов");
				КонецЕсли;
				Результат.Добавить(ОписаниеТестовогоМодуля);
				ПропуститьМодуль = Ложь;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		ЮТСостояниеИсполненияТестовСлужебный.УстановитьЗначениеСостоянияЭтапа(Ключи.ТекущийМодуль, ОписаниеМодуля.Имя);
		ОписаниеТестовогоМодуля = ЗарегистрированныеСценарииМодуля(ОписаниеМодуля, ПараметрыЗапускаТестов);
		
		Если ОписаниеТестовогоМодуля = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ОписаниеТестовогоМодуля);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗарегистрированныеСценарииМодуля(МетаданныеМодуля, ПараметрыЗапуска)
	
	// TODO Фильтрация по путям
	ОписаниеМодуля = Неопределено;
	
#Если ТолстыйКлиентОбычноеПриложение Тогда
	Если МетаданныеМодуля.КлиентОбычноеПриложение Тогда
		ОписаниеМодуля = ЮТЧитательСлужебный.ИсполняемыеСценарииМодуля(МетаданныеМодуля);
	ИначеЕсли МетаданныеМодуля.Сервер Тогда
		ОписаниеМодуля = ЮТЧитательСлужебныйВызовСервера.ИсполняемыеСценарииМодуля(МетаданныеМодуля);
		ЮТЛогированиеСлужебный.ВывестиСерверныеСообщения();
	КонецЕсли;
#ИначеЕсли ТолстыйКлиентУправляемоеПриложение Или ТонкийКлиент Тогда
	Если МетаданныеМодуля.КлиентУправляемоеПриложение Тогда
		ОписаниеМодуля = ЮТЧитательСлужебный.ИсполняемыеСценарииМодуля(МетаданныеМодуля);
	ИначеЕсли МетаданныеМодуля.Сервер Тогда
		ОписаниеМодуля = ЮТЧитательСлужебныйВызовСервера.ИсполняемыеСценарииМодуля(МетаданныеМодуля);
		ЮТЛогированиеСлужебный.ВывестиСерверныеСообщения();
	КонецЕсли;
#Иначе
	ВызватьИсключение "Чтение списка тестов модуля в недоступном контексте";
#КонецЕсли
	
	Возврат ОписаниеМодуля;
	
КонецФункции

Процедура ОчиститьЗначенияСостояния()
	
	Для Каждого Ключ Из КлючиСостояния() Цикл
		ЮТСостояниеИсполненияТестовСлужебный.УдалитьЗначениеСостоянияЭтапа(Ключ.Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция КлючиСостояния()
	
	Ключи = Новый Структура;
	Ключи.Вставить("ТестовыеМодули", "Загрузка_ТестовыеМодули");
	Ключи.Вставить("ТестовыеМодулиЗагружены", "Загрузка_ТестовыеМодулиЗагружены");
	Ключи.Вставить("ТекущийМодуль", "Загрузка_ТекущийМодуль");
	Ключи.Вставить("ОтфильтрованныеМодули", "Загрузка_ОтфильтрованныеМодули");
	Ключи.Вставить("ЗарегистрированныеСценарииМодуля", "Загрузка_ЗарегистрированныеСценарииМодуля");
	
	Возврат Ключи;
	
КонецФункции

#КонецОбласти
