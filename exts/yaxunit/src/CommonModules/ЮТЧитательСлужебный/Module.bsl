//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

// ПрочитатьНаборТестов
// 	Читает набор тестов из модуля
// Параметры:
//  МетаданныеМодуля - см. ЮТФабрика.ОписаниеМетаданныеМодуля
//
// Возвращаемое значение:
//  - Неопределено - Если это не тестовый модуль
//  - см. ЮТФабрикаСлужебный.ОписаниеТестовогоМодуля
Функция ИсполняемыеСценарииМодуля(Знач МетаданныеМодуля) Экспорт
	
	ЭтоТестовыйМодуль = Истина;
	
	ЮТСобытияСлужебный.ПередЧтениемСценариевМодуля(МетаданныеМодуля);
	
	ПолноеИмяМетода = МетаданныеМодуля.Имя + "." + ИмяМетодаСценариев();
	Ошибка = ЮТМетодыСлужебный.ВыполнитьМетодКонфигурацииСПерехватомОшибки(ПолноеИмяМетода, Неопределено);
	
	Если Ошибка <> Неопределено Тогда
		
		ТипыОшибок = ЮТФабрикаСлужебный.ТипыОшибок();
		ТипОшибки = ЮТРегистрацияОшибокСлужебный.ТипОшибки(Ошибка, ПолноеИмяМетода);
		
		Если ТипОшибки = ТипыОшибок.ТестНеРеализован Тогда
			ЭтоТестовыйМодуль = Ложь;
			Ошибка = Неопределено;
		ИначеЕсли ТипОшибки = ТипыОшибок.МалоПараметров Тогда
			Ошибка = ЮТМетодыСлужебный.ВыполнитьМетодКонфигурацииСПерехватомОшибки(ПолноеИмяМетода, Неопределено, ЮТКоллекции.ЗначениеВМассиве(Неопределено));
			
			Сообщение = "Используется устаревшая сигнатура метода `ИсполняемыеСценарии`, метод не должен принимать параметров.";
			ЮТОбщий.СообщитьПользователю(Сообщение);
			ЮТЛогирование.Предостережение(Сообщение);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Ошибка <> Неопределено Тогда
		
		ОписаниеТестовогоМодуля = ОписаниеТестовогоМодуляСОшибкой(МетаданныеМодуля, Ошибка);
		
	ИначеЕсли ЭтоТестовыйМодуль Тогда
		
		ОписаниеТестовогоМодуля = ЮТТестыСлужебный.ОписаниеМодуля();
		ЮТФильтрацияСлужебный.ОтфильтроватьТестовыеНаборы(ОписаниеТестовогоМодуля);
		ЮТСобытияСлужебный.ПослеЧтенияСценариевМодуля(ОписаниеТестовогоМодуля);
		
	Иначе
		
		ОписаниеТестовогоМодуля = Неопределено;
		
	КонецЕсли;
	
	Возврат ОписаниеТестовогоМодуля;
	
КонецФункции

Функция ОписаниеТестовогоМодуляСОшибкой(МетаданныеМодуля, Ошибка) Экспорт
	
	НаборПоУмолчанию = ЮТФабрикаСлужебный.ОписаниеТестовогоНабора(МетаданныеМодуля.Имя);
	ЮТРегистрацияОшибокСлужебный.ЗарегистрироватьОшибкуЧтенияТестов(НаборПоУмолчанию, "Ошибка формирования списка тестовых методов", Ошибка);
	
	ОписаниеТестовогоМодуля = ЮТФабрикаСлужебный.ОписаниеТестовогоМодуля(МетаданныеМодуля, Новый Массив);
	ОписаниеТестовогоМодуля.НаборыТестов.Добавить(НаборПоУмолчанию);
	
	Возврат ОписаниеТестовогоМодуля;
	
КонецФункции

Функция ИсполняемыеСценарииОбъекта(Объект, МетаданныеОбъекта) Экспорт
	
	ЭтоТестовыйМодуль = Истина;
	
	ЮТСобытияСлужебный.ПередЧтениемСценариевМодуля(МетаданныеОбъекта);
	ИмяМетода = ИмяМетодаСценариев();
	
	Ошибка = ЮТМетодыСлужебный.ВыполнитьМетодОбъектаСПерехватомОшибки(Объект, ИмяМетода);
	
	Если Ошибка <> Неопределено Тогда
		
		ТипыОшибок = ЮТФабрикаСлужебный.ТипыОшибок();
		ТипОшибки = ЮТРегистрацияОшибокСлужебный.ТипОшибки(Ошибка, ИмяМетода);
		
		Если ТипОшибки = ТипыОшибок.ТестНеРеализован Тогда
			ЭтоТестовыйМодуль = Ложь;
			Ошибка = Неопределено;
		ИначеЕсли ТипОшибки = ТипыОшибок.МалоПараметров Тогда
			Ошибка = ЮТМетодыСлужебный.ВыполнитьМетодОбъектаСПерехватомОшибки(Объект, ИмяМетода, ЮТКоллекции.ЗначениеВМассиве(Неопределено));
			
			Сообщение = "Используется устаревшая сигнатура метода `ИсполняемыеСценарии`, метод не должен принимать параметров.";
			ЮТОбщий.СообщитьПользователю(Сообщение);
			ЮТЛогирование.Предостережение(Сообщение);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Ошибка <> Неопределено Тогда
		
		НаборПоУмолчанию = ЮТФабрикаСлужебный.ОписаниеТестовогоНабора(МетаданныеОбъекта.Имя);
		ЮТРегистрацияОшибокСлужебный.ЗарегистрироватьОшибкуЧтенияТестов(НаборПоУмолчанию, "Ошибка формирования списка тестовых методов", Ошибка);
		
		ОписаниеТестовогоМодуля = ЮТФабрикаСлужебный.ОписаниеТестовогоМодуля(МетаданныеОбъекта, Новый Массив);
		ОписаниеТестовогоМодуля.НаборыТестов.Добавить(НаборПоУмолчанию);
		
	ИначеЕсли ЭтоТестовыйМодуль Тогда
		
		ОписаниеТестовогоМодуля = ЮТТестыСлужебный.ОписаниеМодуля();
		ЮТФильтрацияСлужебный.ОтфильтроватьТестовыеНаборы(ОписаниеТестовогоМодуля);
		ЮТСобытияСлужебный.ПослеЧтенияСценариевМодуля(ОписаниеТестовогоМодуля);
		
	Иначе
		
		ОписаниеТестовогоМодуля = Неопределено;
		
	КонецЕсли;
	
	Возврат ОписаниеТестовогоМодуля;
	
КонецФункции

// ЭтоТестовыйМодуль
//   Проверяет, является ли модуль модулем с тестами
// Параметры:
//  МетаданныеМодуля - Структура - Описание метаданных модуля, см. ЮТФабрика.ОписаниеМетаданныеМодуля
//
// Возвращаемое значение:
//  Булево - Этот модуль содержит тесты
Функция ЭтоТестовыйМодуль(МетаданныеМодуля) Экспорт
	
	Если МетаданныеМодуля.Глобальный Или МетаданныеМодуля.ВызовСервера Тогда
		Возврат Ложь;
	КонецЕсли;
	
#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТонкийКлиент Тогда
	Если МетаданныеМодуля.КлиентУправляемоеПриложение Тогда
		Возврат ЮТМетодыСлужебный.МетодМодуляСуществует(МетаданныеМодуля.Имя, ИмяМетодаСценариев());
	КонецЕсли;
#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
	Если МетаданныеМодуля.КлиентОбычноеПриложение Тогда
		Возврат ЮТМетодыСлужебный.МетодМодуляСуществует(МетаданныеМодуля.Имя, ИмяМетодаСценариев());
	КонецЕсли;
#КонецЕсли

#Если Сервер Тогда
	Возврат ЮТМетодыСлужебный.МетодМодуляСуществует(МетаданныеМодуля.Имя, ИмяМетодаСценариев());
#КонецЕсли
	
	Если МетаданныеМодуля.Сервер Тогда
		//@skip-check unknown-method-property
		Возврат ЮТЧитательСлужебныйВызовСервера.ЭтоТестовыйМодуль(МетаданныеМодуля);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяМетодаСценариев()
	
	Возврат "ИсполняемыеСценарии";
	
КонецФункции

#КонецОбласти
