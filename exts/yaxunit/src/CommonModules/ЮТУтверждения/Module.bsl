//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2023 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

/////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции, предназначенные для использования другими 
// объектами конфигурации или другими программами
///////////////////////////////////////////////////////////////////////////////// 
#Область ПрограммныйИнтерфейс

#Область УтвержденияBDD

// Что
//  Подготавливает Контекст для проверки утверждения.
//  Проверка выполнения выполняется через вызов другого метода
//  Например: ЮТУтверждения.Что(...).ЭтоИстина(...);
// 
// Параметры:
//  ПроверяемоеЗначение - Произвольный -  Проверяемое фактическое значение
//  Сообщение - Строка - Описание проверки, которое будет выведено при возникновении ошибки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Что(Знач ПроверяемоеЗначение, Знач Сообщение = "") Экспорт
	
	Контекст = ИнициализироватьКонтекстУтверждения();
	Контекст.ПроверяемоеЗначение = ПроверяемоеЗначение;
	Контекст.ПрефиксОшибки = Сообщение;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Метод
// Запоминает описание метода (имя и параметры) для последующей проверки
// 
// Параметры:
//  ИмяМетода - Строка - Наименование метода
//  ПараметрыМетода - Массив из Произвольный - Параметры вызываемого метода
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Метод(Знач ИмяМетода, Знач ПараметрыМетода = Неопределено) Экспорт
	
	ПроверитьТипЗначения(ИмяМетода, "Строка", "имени метода", Истина);
	ПроверитьТипЗначения(ПараметрыМетода, "Массив", "параметров метода", Истина);
	
	Контекст = Контекст();
	Контекст.ИмяМетода = ИмяМетода;
	Контекст.ПараметрыМетода = ПараметрыМетода;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Параметр
//  Добавляет параметр метода для последующего вызова метода и проверки
// 
// Параметры:
//  ЗначениеПараметра - Произвольный - Параметр вызываемого метода
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Параметр(Знач ЗначениеПараметра) Экспорт
	
	Контекст = Контекст();
	
	Если НЕ ЗначениеЗаполнено(Контекст.ИмяМетода) Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения("Перед установкой параметров нужно указать метод");
	КонецЕсли;
	
	Если Контекст.ПараметрыМетода = Неопределено Тогда
		Контекст.ПараметрыМетода = ЮТОбщий.ЗначениеВМассиве(ЗначениеПараметра);
	Иначе
		Контекст.ПараметрыМетода.Добавить(ЗначениеПараметра);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

Функция ИмеющееПредставление(Представление) Экспорт
	
	Контекст().ПредставлениеПроверяемогоЗначения = Представление;
	Возврат ЮТУтверждения;
	
КонецФункции

// Свойство
//  Проверяет наличие свойства и запоминает имя свойства для последующей проверки
//  Следующие проверки будет относится к этому свойству
// 
// Параметры:
//  ИмяСвойства - Строка - Наименование свойства объекта.
//  						Возможно обращение к вложенным свойствам через точку
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Свойство(Знач ИмяСвойства, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	Контекст = Контекст();
	Контекст.ИмяСвойства = Неопределено; // Очищаем для формирования корректного сообщения об ошибке
	
	Путь = НормализованныйПутьКСвойству(Контекст.ПроверяемоеЗначение, ИмяСвойства, Истина);
	
	Контекст.ИмяСвойства = ИмяСвойства;
	Контекст.НормализованныйПутьКСвойству = Путь;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// НетСвойства
//  Проверяет отсутствие свойства основного объекта
//  И сбрасывает ранее установленное проверяемое свойство
//  
// Параметры:
//  ИмяСвойства - Строка - Наименование свойства объекта.
//  						Возможно обращение к вложенным свойствам через точку
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НетСвойства(Знач ИмяСвойства, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	Контекст = Контекст();
	Контекст.ИмяСвойства = Неопределено; // Очищаем для формирования корректного сообщения об ошибке
	
	Если ЗначениеСодержитСвойство(Контекст.ПроверяемоеЗначение, ИмяСвойства) Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуСравнения(СтрШаблон("не содержит свойство `%1`", ИмяСвойства), Неопределено, ИмяСвойства);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

//  Проверяет наличие элемента с указанным индексом и позиционируется на нем для последующих проверок
// 
// Параметры:
//  Индекс - Число - Индекс элемента коллекции
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Элемент(Знач Индекс, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	Возврат Свойство(Индекс, ОписаниеПроверки);
	
КонецФункции

// Используется после вызова метода "Свойство", для переключения с ранее указанного свойства на объект 
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Объект() Экспорт
	
	Контекст = Контекст();
	Контекст.ИмяСвойства = Неопределено;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет наличие свойства у объекта/его свойства
//  В отличии от метода `Свойство`, не позиционируется на указанное свойство
// Параметры:
//  ИмяСвойства - Строка - Наименование свойства объекта.
//  						Возможно обращение к вложенным свойствам через точку
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ИмеетСвойство(Знач ИмяСвойства, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверяемоеЗначение = ПроверяемоеЗначение();
	НормализованныйПутьКСвойству(ПроверяемоеЗначение, ИмяСвойства, Истина);
	
	Возврат ЮТУтверждения;
	
КонецФункции

//  Проверяет отсутствие свойства у объекта/его свойства
//  
// Параметры:
//  ИмяСвойства - Строка - Наименование свойства объекта.
//  						Возможно обращение к вложенным свойствам через точку
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеИмеетСвойства(Знач ИмяСвойства, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверяемоеЗначение = ПроверяемоеЗначение();
	
	Если ЗначениеСодержитСвойство(ПроверяемоеЗначение, ИмяСвойства) Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуСравнения(СтрШаблон("не содержит свойство `%1`", ИмяСвойства), Неопределено, ИмяСвойства);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет наличие свойств у проверяемого объекта (или его свойства), а также их соответствие их значениям параметра
// 
// Параметры:
//  ОжидаемоеЗначение - Структура - Проверяемый объект должен иметь свойства указанные в параметре
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ИмеетСвойстваРавные(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверяемоеЗначение = ПроверяемоеЗначение();
	ОбъектыРавны(ПроверяемоеЗначение, ОжидаемоеЗначение);
	
	Возврат ЮТУтверждения;
	
КонецФункции

// ЭтоИстина
// Проверяет установленное значение Контекста (или его свойство) на равенство "Истина" (Булево).
// При сравнении также проверяется совпадение типов проверяемого и ожидаемого значения
// 
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоИстина(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	СравнитьЗначения(Истина, Ложь, "является истиной");
	Возврат ЮТУтверждения;
	
КонецФункции

// ЭтоНеИстина
// Проверяет установленное значение Контекста (или его свойство)на НЕ равенство "Истина" (Булево).
// При сравнении также проверяется совпадение типов проверяемого и ожидаемого значения
// 
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоНеИстина(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	СравнитьЗначения(Истина, Истина, "является истиной");
	Возврат ЮТУтверждения;
	
КонецФункции

// ЭтоЛожь
// Проверяет установленное значение Контекста (или его свойство) на равенство "Ложь" (Булево).
// При сравнении также проверяется совпадение типов проверяемого и ожидаемого значения
// 
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоЛожь(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	СравнитьЗначения(Ложь, Ложь, "является ложью");
	Возврат ЮТУтверждения;
	
КонецФункции

// ЭтоНеЛожь
// Проверяет установленное значение Контекста (или его свойство) на НЕ равенство "Ложь" (Булево).
// При сравнении также проверяется совпадение типов проверяемого и ожидаемого значения
// 
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоНеЛожь(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	СравнитьЗначения(Ложь, Истина, "является ложью");
	Возврат ЮТУтверждения;
	
КонецФункции

// Равно
// Проверяет установленное значение Контекста (или его свойство) на равенство ожидаемому.
// При сравнении также проверяется совпадение типов проверяемого и ожидаемого значения
// Для сериализуемых объектов проверяется равенство по значению
// 
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) равно этому значению
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Равно(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	СравнитьЗначения(ОжидаемоеЗначение, Ложь, СтрШаблон("равно `%1`", ОжидаемоеЗначение));
	Возврат ЮТУтверждения;
	
КонецФункции

// НеРавно
//  Проверяет установленное значение Контекста (или его свойство) на НЕ равенство ожидаемому.
//  При сравнении также проверяется совпадение типов проверяемого и ожидаемого значения
//  Для сериализуемых значений проверяется равенство по значению
//  
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) НЕ равно этому значению
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеРавно(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	СравнитьЗначения(ОжидаемоеЗначение, Истина, СтрШаблон("равно `%1`", ОжидаемоеЗначение));
	Возврат ЮТУтверждения;
	
КонецФункции

// Больше
//  Проверяет установленное значение Контекста (или его свойство), оно должно быть больше ожидаемого.
// 
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) Больше этого значения
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Больше(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = ПроверяемоеЗначение > ОжидаемоеЗначение;
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуСравнения(СтрШаблон("больше чем `%1`", ОжидаемоеЗначение), ПроверяемоеЗначение, ОжидаемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// БольшеИлиРавно
//  Проверяет установленное значение Контекста (или его свойство), оно должно быть больше или равно ожидаемому.
// 
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) Больше этого значения или равно ему
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция БольшеИлиРавно(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = ПроверяемоеЗначение >= ОжидаемоеЗначение;
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуСравнения(СтрШаблон("больше или равно `%1`", ОжидаемоеЗначение), ПроверяемоеЗначение, ОжидаемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Меньше
//  Проверяет установленное значение Контекста (или его свойство), оно должно быть меньше ожидаемого.
// 
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) меньше этого значения
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Меньше(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = ПроверяемоеЗначение < ОжидаемоеЗначение;
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуСравнения(СтрШаблон("меньше чем `%1`", ОжидаемоеЗначение), ПроверяемоеЗначение, ОжидаемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// МеньшеИлиРавно
//  Проверяет установленное значение Контекста (или его свойство), оно должно быть меньше или равно ожидаемому.
// 
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) меньше этого значения или равно ему
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция МеньшеИлиРавно(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = ПроверяемоеЗначение <= ОжидаемоеЗначение;
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат Тогда
		Сообщение = СтрШаблон("меньше или равно `%1`", ОжидаемоеЗначение);
		ЮТРегистрацияОшибок.СгенерироватьОшибкуСравнения(Сообщение, ПроверяемоеЗначение, ОжидаемоеЗначение);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Заполнено
// Проверяет установленное значение Контекста (или его свойство) на "заполненность" (обертка для ЗначениеЗаполнено)
// 
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Заполнено(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверитьЗаполненность(Ложь);
	Возврат ЮТУтверждения;
	
КонецФункции

// НеЗаполнено
// Проверяет установленное значение Контекста (или его свойство) на "не заполненность" (обертка для ЗначениеЗаполнено)
// 
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеЗаполнено(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверитьЗаполненность(Истина);
	Возврат ЮТУтверждения;
	
КонецФункции

// Существует
// Проверяет установленное значение Контекста (или его свойство) на "существование", т.е. отличие от Null и Неопределено.
// 
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Существует(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверитьСуществование(Ложь);
	Возврат ЮТУтверждения;
	
КонецФункции

// НеСуществует
// Проверяет установленное значение Контекста (или его свойство) на "не существование", т.е. оно равно Null или Неопределено.
// 
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеСуществует(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверитьСуществование(Истина);
	Возврат ЮТУтверждения;
	
КонецФункции

// ЭтоНеопределено
// Проверяет установленное значение Контекста (или его свойство) не равенство `Неопределено`.
// 
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоНеопределено(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	СравнитьЗначения(Неопределено, Ложь, "является неопределено");
	Возврат ЮТУтверждения;
	
КонецФункции

// ЭтоНеНеопределено
// Проверяет установленное значение Контекста (или его свойство) на не равенство `Неопределено`
// 
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоНеНеопределено(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	СравнитьЗначения(Неопределено, Истина, "является неопределено");
	Возврат ЮТУтверждения;
	
КонецФункции

// ЭтоNull
// Проверяет установленное значение Контекста (или его свойство) на равенство `Null`.
// 
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоNull(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	СравнитьЗначения(Null, Ложь, "является null");
	Возврат ЮТУтверждения;
	
КонецФункции

// ЭтоНеNull
// Проверяет установленное значение Контекста (или его свойство) на не равенство `Null`
// 
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоНеNull(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	СравнитьЗначения(Null, Истина, "является null");
	Возврат ЮТУтверждения;
	
КонецФункции

// ИмеетТип
// Проверяет установленное значение Контекста (или его свойство) на соответствие переданному типу.
// 
// Параметры:
//  ОжидаемоеЗначение - Строка, Тип, ОписаниеТипов - Ожидается, что значение Контекста (или его свойство) имеет данный тип
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ИмеетТип(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверитьТипПараметра(ОжидаемоеЗначение, Ложь);
	Возврат ЮТУтверждения;
	
КонецФункции

// НеИмеетТип
// Проверяет установленное значение Контекста (или его свойство) на несоответствие переданному типу.
// 
// Параметры:
//  ОжидаемоеЗначение - Строка, Тип, ОписаниеТипов - Ожидается, что значение Контекста (или его свойство) НЕ имеет данный тип
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеИмеетТип(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверитьТипПараметра(ОжидаемоеЗначение, Истина);
	Возврат ЮТУтверждения;
	
КонецФункции

// Содержит
// Проверяет установленное значение Контекста (или его свойство) на наличие в нем искомого.
// Проверка поддерживается для следующих типов проверяемого значения:
// - Строка - по вхождению
// - Массив - по наличию равного элемента
// - Структура - по наличию равного значения
// - Соответствие - по наличию равного значения
// - СписокЗначений - по наличию равного значения
// - ФиксированныйМассив - по наличию равного значения
// - ФиксированнаяСтруктура - по наличию равного значения
// - ФиксированноеСоответствие - по наличию равного значения
// При сравнении также проверяется совпадение типов
// 
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) содержит указанное значение
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Содержит(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверитьСодержание(ОжидаемоеЗначение, Ложь);
	Возврат ЮТУтверждения;
	
КонецФункции

// НеСодержит
//  Проверяет установленное значение Контекста (или его свойство) на наличие в нем искомого.
//  Проверка поддерживается для следующих типов проверяемого значения: 
//  	- Строка - по отсутствию вхождению
//  	- Массив - по отсутствию равного элемента
//  	- Структура - по отсутствию равного значения
//  	- Соответствие - по отсутствию равного значения
//  	- СписокЗначений - по отсутствию равного значения
//  	- ФиксированныйМассив - по отсутствию равного значения
//  	- ФиксированнаяСтруктура - по отсутствию равного значения
//  	- ФиксированноеСоответствие - по отсутствию равного значения
//  При сравнении также проверяется совпадение типов
// 
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) НЕ содержит указанное
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеСодержит(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверитьСодержание(ОжидаемоеЗначение, Истина);
	Возврат ЮТУтверждения;
	
КонецФункции

// ИмеетДлину
//  Проверяет установленное значение Контекста (или его свойство) на длину или размер коллекции
//  Проверка поддерживается для следующих типов проверяемого значения: 
//  	- Строка
//  	- Массив
//  	- Структура
//  	- Соответствие
//  	- СписокЗначений
//  	- ФиксированныйМассив
//  	- ФиксированнаяСтруктура
//  	- ФиксированноеСоответствие
//  	- ТаблицаЗначения
// 
// Параметры:
//  ОжидаемоеЗначение - Число - Ожидается, что значение Контекста (или его свойство) имеет указанную длину или размер
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ИмеетДлину(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверитьДлину(ОжидаемоеЗначение, Ложь);
	Возврат ЮТУтверждения;
	
КонецФункции

// ИмеетДлинуБольше
//  Проверяет установленное значение Контекста (или его свойство) на длину или размер коллекции
//  Проверка поддерживается для следующих типов проверяемого значения: 
//  	- Строка
//  	- Массив
//  	- Структура
//  	- Соответствие
//  	- СписокЗначений
//  	- ФиксированныйМассив
//  	- ФиксированнаяСтруктура
//  	- ФиксированноеСоответствие
//  	- ТаблицаЗначения
// 
// Параметры:
//  ОжидаемоеЗначение - Число - Ожидается, что значение Контекста (или его свойство) имеет указанную длину или размер
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ИмеетДлинуБольше(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверитьТипЗначения(ОжидаемоеЗначение, "Число");
	
	ФактическаяДлина = ДлинаПроверяемогоЗначения();
	Результат = ФактическаяДлина > ОжидаемоеЗначение;
	
	Сообщение = СтрШаблон("имеет длину (размер) больше `%1`", ОжидаемоеЗначение);
	ОбработатьРезультатСравнения(Результат, Сообщение, Ложь, ФактическаяДлина, ОжидаемоеЗначение);
	Возврат ЮТУтверждения;
	
КонецФункции

// ИмеетДлинуМеньше
//  Проверяет установленное значение Контекста (или его свойство) на длину или размер коллекции
//  Проверка поддерживается для следующих типов проверяемого значения: 
//  	- Строка
//  	- Массив
//  	- Структура
//  	- Соответствие
//  	- СписокЗначений
//  	- ФиксированныйМассив
//  	- ФиксированнаяСтруктура
//  	- ФиксированноеСоответствие
//  	- ТаблицаЗначения
// 
// Параметры:
//  ОжидаемоеЗначение - Число - Ожидается, что значение Контекста (или его свойство) имеет указанную длину или размер
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ИмеетДлинуМеньше(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверитьТипЗначения(ОжидаемоеЗначение, "Число");
	
	ФактическаяДлина = ДлинаПроверяемогоЗначения();
	Результат = ФактическаяДлина < ОжидаемоеЗначение;
	
	Сообщение = СтрШаблон("имеет длину (размер) меньше `%1`", ОжидаемоеЗначение);
	ОбработатьРезультатСравнения(Результат, Сообщение, Ложь, ФактическаяДлина, ОжидаемоеЗначение);
	Возврат ЮТУтверждения;
	
КонецФункции

// НеИмеетДлину
//  Проверяет установленное значение Контекста (или его свойство) на длину или размер коллекции, которые не должны совпадать с указанным значением
//  Проверка поддерживается для следующих типов проверяемого значения: 
//  	- Строка
//  	- Массив
//  	- Структура
//  	- Соответствие
//  	- СписокЗначений
//  	- ФиксированныйМассив
//  	- ФиксированнаяСтруктура
//  	- ФиксированноеСоответствие
//  	- ТаблицаЗначения
// 
// Параметры:
//  ОжидаемоеЗначение - Число - Ожидается, что значение Контекста (или его свойство) не имеет указанную дину или размер
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеИмеетДлину(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверитьДлину(ОжидаемоеЗначение, Истина);
	Возврат ЮТУтверждения;
	
КонецФункции

// ВыбрасываетИсключение
//  Проверяет установленный для проверки метод Контекста на то, что метод упадет по исключению, 
//  далее текст исключения проверяется на ожидаемый.
// 
// Параметры:
//  ОжидаемоеЗначение - Строка - Ожидается, что сообщение об ошибке будет содержать данный текст
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ВыбрасываетИсключение(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	Попытка
		Контекст = Контекст();
		Модуль = ПроверяемоеЗначение();
		Результат = ВызватьМетод(Модуль, Контекст.ИмяМетода, Контекст.ПараметрыМетода);
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не Результат.ИсключениеВозникло Тогда
		ТекстОшибки = СтрШаблон("ожидали, что метод `%1` вызовет исключение `%2`, но это не так.", Контекст.ИмяМетода, ОжидаемоеЗначение);
		ЮТРегистрацияОшибок.УстановитьДанныеОшибкиСравнения(Результат.ТекстИсключения, ОжидаемоеЗначение);
		ЮТРегистрацияОшибок.ВызватьОшибкуПроверки(ТекстОшибки);
	ИначеЕсли СтрНайти(Результат.ТекстИсключения, ОжидаемоеЗначение) = 0 Тогда
		ТекстОшибки = СтрШаблон("ожидали, что метод `%1` вызовет исключение `%2`, но получили `%3`.",
			Контекст.ИмяМетода,
			ОжидаемоеЗначение,
			Результат.ТекстИсключения);
		ЮТРегистрацияОшибок.УстановитьДанныеОшибкиСравнения(Результат.ТекстИсключения, ОжидаемоеЗначение);
		ЮТРегистрацияОшибок.ВызватьОшибкуПроверки(ТекстОшибки);
	Иначе
		Возврат ЮТУтверждения;
	КонецЕсли;
	
КонецФункции

// НеВыбрасываетИсключение
//  Проверяет установленный для проверки метод Контекста на то, что метод не упадет по исключению
//  или упадет по исключению текст которого не содержит ожидаемый
// 
// Параметры:
//  ОжидаемоеЗначение - Строка - Ожидается, что сообщение об ошибке НЕ будет содержать данный текст
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеВыбрасываетИсключение(Знач ОжидаемоеЗначение = Неопределено, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	Попытка
		Контекст = Контекст();
		Модуль = ПроверяемоеЗначение();
		Результат = ВызватьМетод(Модуль, Контекст.ИмяМетода, Контекст.ПараметрыМетода)
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Результат.ИсключениеВозникло Тогда
		ЮТРегистрацияОшибок.УстановитьДанныеОшибкиСравнения(Результат.ТекстИсключения, ОжидаемоеЗначение);
		
		Если НЕ ЗначениеЗаполнено(ОжидаемоеЗначение) Тогда
			ТекстОшибки = СтрШаблон("ожидали, что метод `%1` не вызовет исключение, но это не так.", Контекст.ИмяМетода);
			ЮТРегистрацияОшибок.ВызватьОшибкуПроверки(ТекстОшибки);
		ИначеЕсли СтрНайти(Результат.ТекстИсключения, ОжидаемоеЗначение) <> 0 Тогда
			ТекстОшибки = СтрШаблон("ожидали, что метод `%1` не вызовет исключение `%2`, но это не так.", Контекст.ИмяМетода, ОжидаемоеЗначение);
			ЮТРегистрацияОшибок.ВызватьОшибкуПроверки(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство), ожидается что оно начинается на указанное значение
// При этом проверяемое значение должно быть строкой
// 
// Параметры:
//  СтрокаПоиска - Строка - Строка поиска
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НачинаетсяС(СтрокаПоиска, ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверяемоеЗначение = ПроверяемоеЗначение();
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверитьТипЗначения(ПроверяемоеЗначение, "Строка", "проверяемого значения");
	ПроверитьТипЗначения(СтрокаПоиска, "Строка", "ожидаемого значения");
	ПроверитьЗаполненностьЗначения(СтрокаПоиска, "ожидаемое значение");
	
	Результат = СтрНачинаетсяС(ПроверяемоеЗначение, СтрокаПоиска);
	
	Если НЕ Результат Тогда
		Сообщение = СтрШаблон("начинается с `%1`", СтрокаПоиска);
		ЮТРегистрацияОшибок.СгенерироватьОшибкуСравнения(Сообщение, ПроверяемоеЗначение, СтрокаПоиска);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство), ожидается что оно заканчивается на указанное значение
// При этом проверяемое значение должно быть строкой
// 
// Параметры:
//  СтрокаПоиска - Строка - Строка поиска
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЗаканчиваетсяНа(СтрокаПоиска, ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверяемоеЗначение = ПроверяемоеЗначение();
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверитьТипЗначения(ПроверяемоеЗначение, "Строка", "проверяемого значения");
	ПроверитьТипЗначения(СтрокаПоиска, "Строка", "ожидаемого значения");
	ПроверитьЗаполненностьЗначения(СтрокаПоиска, "ожидаемое значение");
	
	Результат = СтрЗаканчиваетсяНа(ПроверяемоеЗначение, СтрокаПоиска);
	
	Если НЕ Результат Тогда
		Сообщение = СтрШаблон("заканчивается на `%1`", СтрокаПоиска);
		ЮТРегистрацияОшибок.СгенерироватьОшибкуСравнения(Сообщение, ПроверяемоеЗначение, СтрокаПоиска);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет вхождение установленного значение (или его свойства) в заданный интервал
// Проверяемое значение может находится на границе интервала
// Параметры:
//  НачалоИнтервала - Произвольный - Левая граница интервала. Может иметь любой тип, позволяющий сравнивать значения
//  ОкончаниеИнтервала - Произвольный - Правая граница. Может иметь любой тип, позволяющий сравнивать значения
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция МеждуВключаяГраницы(НачалоИнтервала, ОкончаниеИнтервала, ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверитьМежду(НачалоИнтервала, ОкончаниеИнтервала, Истина, Истина);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет вхождение установленного значение (или его свойства) в заданный интервал
// Проверяемое значение не может находится на границе интервала
// 
// Параметры:
//  НачалоИнтервала - Произвольный - Левая граница интервала. Может иметь любой тип, позволяющий сравнивать значения
//  ОкончаниеИнтервала - Произвольный - Правая граница. Может иметь любой тип, позволяющий сравнивать значения
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция МеждуИсключаяГраницы(НачалоИнтервала, ОкончаниеИнтервала, ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверитьМежду(НачалоИнтервала, ОкончаниеИнтервала, Ложь, Ложь);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет вхождение установленного значение (или его свойства) в заданный интервал
// Проверяемое значение может находится на начальной границе интервала
// 
// Параметры:
//  НачалоИнтервала - Произвольный - Левая граница интервала. Может иметь любой тип, позволяющий сравнивать значения
//  ОкончаниеИнтервала - Произвольный - Правая граница. Может иметь любой тип, позволяющий сравнивать значения
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция МеждуВключаяНачалоГраницы(НачалоИнтервала, ОкончаниеИнтервала, ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверитьМежду(НачалоИнтервала, ОкончаниеИнтервала, Истина, Ложь);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет вхождение установленного значение (или его свойства) в заданный интервал
// Проверяемое значение может находится на конечной границе интервала
// 
// Параметры:
//  НачалоИнтервала - Произвольный - Левая граница интервала. Может иметь любой тип, позволяющий сравнивать значения
//  ОкончаниеИнтервала - Произвольный - Правая граница. Может иметь любой тип, позволяющий сравнивать значения
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция МеждуВключаяОкончаниеГраницы(НачалоИнтервала, ОкончаниеИнтервала, ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверитьМежду(НачалоИнтервала, ОкончаниеИнтервала, Ложь, Истина);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет каждый элемент установленного значения (или его свойства), все элементы должны иметь указанное свойство
// 
// Параметры:
//  ИмяСвойства - Строка
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция КаждыйЭлементСодержитСвойство(ИмяСвойства, ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверяемоеЗначение = ПроверяемоеЗначение();
	ОбъектПроверки = "каждый элемент проверяемого значения";
	
	Для Каждого Элемент Из ПроверяемоеЗначение Цикл
		
		Если НЕ ЗначениеСодержитСвойство(Элемент, ИмяСвойства) Тогда
			Сообщение = СтрШаблон("содержит свойство `%1`", ИмяСвойства);
			ЮТРегистрацияОшибок.СгенерироватьОшибкуСравнения(Сообщение, ПроверяемоеЗначение, ИмяСвойства, ОбъектПроверки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет каждый элемент установленного значения (или его свойства), 
// все элементы должны иметь указанное свойство, которое равно ожидаемому значению
// 
// Параметры:
//  ИмяСвойства - Строка
//  ОжидаемоеЗначение - Произвольный - Ожидаемое значение свойства
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция КаждыйЭлементСодержитСвойствоСоЗначением(ИмяСвойства, ОжидаемоеЗначение, ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверяемоеЗначение = ПроверяемоеЗначение();
	ОбъектПроверки = "каждый элемент проверяемого значения";
	ОписаниеОжидания = Новый Структура(ИмяСвойства, ОжидаемоеЗначение);
	
	Для Каждого Элемент Из ПроверяемоеЗначение Цикл
		
		Путь = НормализованныйПутьКСвойству(Элемент, ИмяСвойства, Ложь);
		Если Путь = Неопределено Тогда
			Сообщение = СтрШаблон("содержит свойство `%1`", ИмяСвойства);
			ЮТРегистрацияОшибок.СгенерироватьОшибкуСравнения(Сообщение, ПроверяемоеЗначение, ОписаниеОжидания, ОбъектПроверки);
		КонецЕсли;
		
		ЗначениеСвойства = ЗначениеСвойства(Элемент, Путь);
		
		Если НЕ ЗначенияРавны(ЗначениеСвойства, ОжидаемоеЗначение) Тогда
			Сообщение = СтрШаблон("содержит свойство `%1`, которое равно `%2`", ИмяСвойства, ОжидаемоеЗначение);
			ЮТРегистрацияОшибок.СгенерироватьОшибкуСравнения(Сообщение, ПроверяемоеЗначение, ОписаниеОжидания, ОбъектПроверки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет элементы установленного значения (или его свойства), хотя бы один из них должен иметь указанное свойство
// 
// Параметры:
//  ИмяСвойства - Строка
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЛюбойЭлементСодержитСвойство(ИмяСвойства, ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверяемоеЗначение = ПроверяемоеЗначение();
	ОбъектПроверки = "хоть один элемент проверяемого значения";
	
	Найден = Ложь;
	Для Каждого Элемент Из ПроверяемоеЗначение Цикл
		
		Если ЗначениеСодержитСвойство(Элемент, ИмяСвойства) Тогда
			Найден = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Найден Тогда
		Сообщение = СтрШаблон("содержит свойство `%1`", ИмяСвойства);
		ЮТРегистрацияОшибок.СгенерироватьОшибкуСравнения(Сообщение, ПроверяемоеЗначение, ИмяСвойства, ОбъектПроверки);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет элементы установленного значения (или его свойства), 
// хотя бы один из них должен иметь указанное свойство, которое равно ожидаемому значению
// 
// Параметры:
//  ИмяСвойства - Строка
//  ОжидаемоеЗначение - Произвольный - Ожидаемое значение свойства
//  ОписаниеПроверки - Строка - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЛюбойЭлементСодержитСвойствоСоЗначением(ИмяСвойства, ОжидаемоеЗначение, ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверяемоеЗначение = ПроверяемоеЗначение();
	ОбъектПроверки = "хоть один элемент проверяемого значения";
	
	НайденоСвойство = Ложь;
	НайденоЗначение = Ложь;
	Для Каждого Элемент Из ПроверяемоеЗначение Цикл
		
		Путь = НормализованныйПутьКСвойству(Элемент, ИмяСвойства, Ложь);
		Если Путь = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НайденоСвойство = Истина;
		ЗначениеСвойства = ЗначениеСвойства(Элемент, Путь);
		
		Если ЗначенияРавны(ЗначениеСвойства, ОжидаемоеЗначение) Тогда
			НайденоЗначение = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеОжидания = Новый Структура(ИмяСвойства, ОжидаемоеЗначение);
	Если НЕ НайденоСвойство Тогда
		Сообщение = СтрШаблон("содержит свойство `%1`", ИмяСвойства);
		ЮТРегистрацияОшибок.СгенерироватьОшибкуСравнения(Сообщение, ПроверяемоеЗначение, ОписаниеОжидания, ОбъектПроверки);
	ИначеЕсли НЕ НайденоЗначение Тогда
		Сообщение = СтрШаблон("содержит свойство `%1`, которое равно `%2`", ИмяСвойства, ОжидаемоеЗначение);
		ЮТРегистрацияОшибок.СгенерироватьОшибкуСравнения(Сообщение, ПроверяемоеЗначение, ОписаниеОжидания, ОбъектПроверки);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение (или его свойства) на соответствие утверждениям предиката
// см. ЮТест.Предикат
// 
// Параметры:
//  Предикат - Массив из см. ЮТФабрика.ВыражениеПредиката - Набор утверждений, см. ЮТПредикаты.Получить
//           - см. ЮТФабрика.ВыражениеПредиката
//           - ОбщийМодуль.ЮТПредикаты - Модуль настройки предикатов, см. ЮТест.Предикат
//  ОписаниеПроверки - Строка, Неопределено - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция СоответствуетПредикату(Предикат, ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверяемоеЗначение = ПроверяемоеЗначение();
	
	ПараметрыСообщенийОбОшибке = ПараметрыСообщенийОбОшибке(ПроверяемоеЗначение, ОписаниеПроверки);
	
	РезультатПроверки = ЮТПредикатыКлиентСервер.ПроверитьПредикаты(ПроверяемоеЗначение, Предикат, ПараметрыСообщенийОбОшибке);
	
	Если НЕ РезультатПроверки.Успешно Тогда
		ОбработатьРезультатПроверки(РезультатПроверки);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет каждый элемент установленного значения (или его свойства), 
// все элементы должны соответствовать утверждениям предиката.
// см. ЮТест.Предикат
// 
// Параметры:
//  Предикат - Массив из см. ЮТФабрика.ВыражениеПредиката - Набор утверждений, см. ЮТПредикаты.Получить
//           - см. ЮТФабрика.ВыражениеПредиката
//           - ОбщийМодуль.ЮТПредикаты - Модуль настройки предикатов, см. ЮТест.Предикат
//  ОписаниеПроверки - Строка, Неопределено - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция КаждыйЭлементСоответствуетПредикату(Предикат, ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверяемоеЗначение = ПроверяемоеЗначение();
	
	ПараметрыСообщенийОбОшибке = ПараметрыСообщенийОбОшибке(ПроверяемоеЗначение, ОписаниеПроверки, "каждый элемент проверяемого значения");
	
	Для Каждого Элемент Из ПроверяемоеЗначение Цикл
		
		РезультатПроверки = ЮТПредикатыКлиентСервер.ПроверитьПредикаты(Элемент, Предикат, ПараметрыСообщенийОбОшибке);
		Если НЕ РезультатПроверки.Успешно Тогда
			ОбработатьРезультатПроверки(РезультатПроверки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет элементы установленного значения (или его свойства), 
// хотя бы один из них должен соответствовать утверждениям предиката.
// см. ЮТест.Предикат
// 
// Параметры:
//  Предикат - Массив из см. ЮТФабрика.ВыражениеПредиката - Набор утверждений, см. ЮТПредикаты.Получить
//           - см. ЮТФабрика.ВыражениеПредиката
//           - ОбщийМодуль.ЮТПредикаты - Модуль настройки предикатов, см. ЮТест.Предикат
//  ОписаниеПроверки - Строка, Неопределено - Описание конкретной проверки
// 
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЛюбойЭлементСоответствуетПредикату(Предикат, ОписаниеПроверки = Неопределено) Экспорт
	
	УстановитьОписаниеПроверки(ОписаниеПроверки);
	ПроверяемоеЗначение = ПроверяемоеЗначение();
	
	ПараметрыСообщенийОбОшибке = ПараметрыСообщенийОбОшибке(ПроверяемоеЗначение, ОписаниеПроверки);
	
	Успешно = Ложь;
	
	Для Каждого Элемент Из ПроверяемоеЗначение Цикл
		
		РезультатПроверки = ЮТПредикатыКлиентСервер.ПроверитьПредикаты(Элемент, Предикат, ПараметрыСообщенийОбОшибке);
		Если РезультатПроверки.Успешно Тогда
			Успешно = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Успешно Тогда
		Сообщение = ЮТПредикатыКлиентСервер.ПредставлениеПредикатов(Предикат, " и ");
		ЮТРегистрацияОшибок.СгенерироватьОшибкуУтверждения(Сообщение, ПроверяемоеЗначение, "один из элементов проверяемого значения");
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции для служебного использования внутри подсистемы
///////////////////////////////////////////////////////////////////////////////// 

#Область СлужебныйПрограммныйИнтерфейс

// Сбросить контекст.
// Используется для принудительного сброса контекста утверждения
Процедура СброситьКонтекст() Экспорт
	
	ИнициализироватьКонтекстУтверждения();
	
КонецПроцедуры

// Инициализирует контекст утверждений
// 
// Возвращаемое значение:
//  Структура - контекст утверждений:
// * ПроверяемоеЗначение - Произвольный
//                       - Неопределено
// * ПредставлениеПроверяемогоЗначения - Неопределено
//                                     - Строка
// * ПрефиксОшибки - Строка
// * ИмяМетода - Строка
// * ИмяСвойства - Строка
//               - Неопределено
// * НормализованныйПутьКСвойству - Неопределено - Не указано свойство
//                                - Массив из Строка, Число
// * ПараметрыМетода - Неопределено - Не установлены
//                   - Массив из Произвольный
// * ОписаниеПроверки - Строка
//                    - Неопределено
Функция НовыйКонтекстУтверждения() Экспорт
	
	Контекст = Новый Структура;
	
	Контекст.Вставить("ПроверяемоеЗначение", Неопределено);
	Контекст.Вставить("ПредставлениеПроверяемогоЗначения", Неопределено);
	Контекст.Вставить("ПрефиксОшибки", "");
	Контекст.Вставить("ИмяМетода", "");
	Контекст.Вставить("ИмяСвойства", Неопределено);
	Контекст.Вставить("НормализованныйПутьКСвойству", Неопределено);
	Контекст.Вставить("ПараметрыМетода", Неопределено);
	Контекст.Вставить("ОписаниеПроверки", Неопределено);
	
	Возврат Контекст;
	
КонецФункции

// Обработчик события "ПередКаждымТестом"
// 
// Параметры:
//  ОписаниеСобытия - см. ЮТФабрика.ОписаниеСобытияИсполненияТестов
Процедура ПередКаждымТестом(ОписаниеСобытия) Экспорт
	
	СброситьКонтекст();
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, составляющие внутреннюю реализацию модуля 
///////////////////////////////////////////////////////////////////////////////// 

#Область СлужебныеПроцедурыИФункции

#Область Контекст

Функция ИнициализироватьКонтекстУтверждения()
	
	Контекст = НовыйКонтекстУтверждения();
	
	ЮТКонтекст.УстановитьКонтекстУтверждений(Контекст);
	ЮТКонтекст.УстановитьКонтекстОшибки();
	
	Возврат Контекст;
	
КонецФункции

Функция Контекст() Экспорт
	
	КонтекстУтверждения = ЮТКонтекст.КонтекстПроверки();
	
	Если КонтекстУтверждения = Неопределено Тогда
		КонтекстУтверждения = ИнициализироватьКонтекстУтверждения();
	КонецЕсли;
	
	Возврат КонтекстУтверждения;
	
КонецФункции

#КонецОбласти

Функция ПроверяемоеЗначение()
	
	Контекст = Контекст();
	
	Если Контекст.ИмяСвойства <> Неопределено Тогда
		Значение = ЗначениеСвойства(Контекст.ПроверяемоеЗначение, Контекст.НормализованныйПутьКСвойству);
	Иначе
		Значение = Контекст.ПроверяемоеЗначение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ЗначениеСвойства(Объект, НормализованныйПутьКСвойству)
	
	Значение = Объект;
	Для Каждого Часть Из НормализованныйПутьКСвойству Цикл
		
		Если ТипЗнч(Значение) = Тип("ХранилищеЗначения") Тогда
			Значение = Значение.Получить();
		КонецЕсли;
		
		Если ТипЗнч(Часть) = Тип("Число") И Часть < 0 И ТипЗнч(Значение) <> Тип("Соответствие") Тогда
			Часть = Значение.Количество() + Часть;
		КонецЕсли;
		
		Значение = Значение[Часть];
		
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

Функция ЗначенияРавны(Значение1, Значение2)
	
	Возврат ТипЗнч(Значение1) = ТипЗнч(Значение2) И
		(Значение1 = Значение2 ИЛИ СравнитьПоЗначению(Значение1, Значение2));
	
КонецФункции

Функция НормализованныйПутьКСвойству(Знач Значение, Цепочка, ФиксироватьОшибку = Истина)
	
	ПутьКСвойству = Новый Массив();
	
	ТипПути = ТипЗнч(Цепочка);
	
	Если ТипПути = Тип("Строка") Тогда
		
		Части = СтрРазделить(Цепочка, ".");
		
		ПройденныйПуть = Новый Массив();
		
		Для Каждого Часть Из Части Цикл
			
			ПройденныйПуть.Добавить(Часть);
			
			ПозицияИндекса = СтрНайти(Часть, "[");
			
			Если ПозицияИндекса > 0 И ПозицияИндекса > 0 И СтрЗаканчиваетсяНа(Часть, "]") Тогда
				
				Если ПозицияИндекса > 1 Тогда
					ПутьКСвойству.Добавить(Лев(Часть, ПозицияИндекса - 1));
				КонецЕсли;
				
				Пока ПозицияИндекса > 0 Цикл
					
					ЗакрывающаяПозиция = СтрНайти(Часть, "]", , ПозицияИндекса);
					ИндексСтрокой = Сред(Часть, ПозицияИндекса + 1, ЗакрывающаяПозиция - ПозицияИндекса - 1);
					Индекс = Число(ИндексСтрокой);
					ПутьКСвойству.Добавить(Индекс);
					
					ПозицияИндекса = СтрНайти(Часть, "[", , ЗакрывающаяПозиция);
					
				КонецЦикла;
				
			Иначе
				
				ПутьКСвойству.Добавить(Часть);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипПути = Тип("Соответствие") Тогда
		
		ПутьКСвойству.Добавить(Цепочка);
		
	ИначеЕсли ТипПути = Тип("Число") Тогда
		
		ПутьКСвойству.Добавить(Цепочка);
		
	КонецЕсли;
	
	ПройденныйПуть = Новый Массив();
	
	Для Каждого Часть Из ПутьКСвойству Цикл
		
		ПройденныйПуть.Добавить(Часть);
		
		Если ТипЗнч(Значение) = Тип("ХранилищеЗначения") Тогда
			Значение = Значение.Получить();
		КонецЕсли;
		
		Попытка
			ЕстьСвойство = ЗначениеИмеетСвойство(Значение, Часть);
		Исключение
			ЕстьСвойство = Ложь;
		КонецПопытки;
		
		Если ЕстьСвойство Тогда
			Значение = Значение[Часть];
		ИначеЕсли ФиксироватьОшибку Тогда
			ПутьСвойства = СтрСоединить(ПройденныйПуть, ".");
			ЮТРегистрацияОшибок.СгенерироватьОшибкуСравнения(СтрШаблон("содержит свойство `%1`", ПутьСвойства), Значение, Цепочка);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПутьКСвойству;
	
КонецФункции

Функция ЗначениеСодержитСвойство(Знач Значение, Знач ИмяСвойства)
	
	Возврат НормализованныйПутьКСвойству(Значение, ИмяСвойства, Ложь) <> Неопределено;
	
КонецФункции

Функция ЗначениеИмеетСвойство(Значение, Свойство)
	
	Результат = Ложь;
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗначения = Тип("Структура") Или ТипЗначения = Тип("ФиксированнаяСтруктура") Тогда
		
		Результат = Значение.Свойство(Свойство);
		
	ИначеЕсли ТипЗначения = Тип("Соответствие") Или ТипЗначения = Тип("ФиксированноеСоответствие") Тогда
		
		Для Каждого КлючЗначение Из Значение Цикл
			
			Если КлючЗначение.Ключ = Свойство И ТипЗнч(КлючЗначение.Ключ) = ТипЗнч(Свойство) Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Свойство) = Тип("Число") Тогда
		
		Если Свойство < 0 Тогда
			Свойство = Значение.Количество() + Свойство;
		КонецЕсли;
		Результат = Свойство >= 0 И Значение.Количество() > Свойство;
		
	Иначе
		
		Результат = ЮТОбщий.ПеременнаяСодержитСвойство(Значение, Свойство);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиЗначение(ПроверяемоеЗначение, ОжидаемоеЗначение)
	
	ТипПроверяемогоЗначения = ТипЗнч(ПроверяемоеЗначение);
	ИскомоеЗначениеНайдено = Неопределено;
	
	Если ТипПроверяемогоЗначения = Тип("Строка") Тогда
		
		ИскомоеЗначениеНайдено = СтрНайти(ПроверяемоеЗначение, ОжидаемоеЗначение) > 0;
		
	ИначеЕсли ЭтоТипМассива(ТипПроверяемогоЗначения) Тогда
		
		Индекс = ПроверяемоеЗначение.Найти(ОжидаемоеЗначение);
		ИскомоеЗначениеНайдено = Индекс <> Неопределено;
		
	ИначеЕсли ЭтоТипКлючЗначение(ТипПроверяемогоЗначения) Тогда
		
		ИскомоеЗначениеНайдено = Ложь;
		ТипОжидаемогоЗначения = ТипЗнч(ОжидаемоеЗначение);
		
		Для Каждого КлючЗначение Из ПроверяемоеЗначение Цикл
			Если КлючЗначение.Значение = ОжидаемоеЗначение И ТипЗнч(КлючЗначение.Значение) = ТипОжидаемогоЗначения Тогда
				ИскомоеЗначениеНайдено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипПроверяемогоЗначения = Тип("СписокЗначений") Тогда
		
		ИскомоеЗначениеНайдено = ПроверяемоеЗначение.НайтиПоЗначению(ОжидаемоеЗначение) <> Неопределено;
		
	КонецЕсли;
	
	Возврат ИскомоеЗначениеНайдено;
	
КонецФункции

Функция ДлинаЗначения(ПроверяемоеЗначение)
	
	ТипПроверяемогоЗначения = ТипЗнч(ПроверяемоеЗначение);
	
	Если ТипПроверяемогоЗначения = Тип("Строка") Тогда
		
		ФактическаяДлина = СтрДлина(ПроверяемоеЗначение);
		
	Иначе
		
		Попытка
			ФактическаяДлина = ПроверяемоеЗначение.Количество();
		Исключение
			ФактическаяДлина = Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ФактическаяДлина;
	
КонецФункции

Функция ВызватьМетод(Модуль, ИмяМетода, ПараметрыМетода)
	
#Если ВебКлиент Тогда
	ВызватьИсключение ЮТОбщий.МетодНеДоступен("ЮТУтверждения.ВызватьМетод");
#Иначе
	Если Не ЗначениеЗаполнено(ИмяМетода) Тогда
		ВызватьИсключение "ИмяМетода не заполнено в контексте. Воспользуйтесь предварительно методом интерфейса `Метод(ИмяМетода)`";
	КонецЕсли;
	
	СтрокаПараметры = "";
	
	Если ЭтоТипМассива(ТипЗнч(ПараметрыМетода)) Тогда
		Для Сч = 0 По ПараметрыМетода.ВГраница() Цикл
			СтрокаПараметры = ЮТОбщий.ДобавитьСтроку(СтрокаПараметры, СтрШаблон("ПараметрыМетода[%1]", Сч), ", ");
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыМетода) Тогда
		ВызватьИсключение СтрШаблон("Не верный тип параметров `%1`, должен быть массив", ТипЗнч(ПараметрыМетода));
	КонецЕсли;
	
	Если Модуль <> Неопределено Тогда
		СтрокаДляВыполнения = СтрШаблон("Модуль.%1(%2)", ИмяМетода, СтрокаПараметры);
	Иначе
		СтрокаДляВыполнения = СтрШаблон("%1(%2)", ИмяМетода, СтрокаПараметры);
	КонецЕсли;
	
	Результат = Новый Структура("ИсключениеВозникло, ТекстИсключения", Ложь);
	
	Попытка
		//@skip-check server-execution-safe-mode
		Выполнить(СтрокаДляВыполнения);
	Исключение
		Результат.ИсключениеВозникло = Истина;
		Результат.ТекстИсключения = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
#КонецЕсли
	
КонецФункции

#Область ПроверкаТипов

Процедура ПроверитьТипПараметра(Знач ОжидаемоеЗначение, Реверс = Ложь)
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		ПроверитьТипЗначения(ОжидаемоеЗначение, Новый ОписаниеТипов("ОписаниеТипов, Тип, Строка"));
		Результат = ТипЗначенияСоответствует(ПроверяемоеЗначение, ОжидаемоеЗначение);
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Сообщение = СтрШаблон("имеет тип `%1`", ОжидаемоеЗначение);
	ОбработатьРезультатСравнения(Результат, Сообщение, Реверс, ТипЗнч(ПроверяемоеЗначение), ОжидаемоеЗначение);
	
КонецПроцедуры

Процедура ПроверитьТипЗначения(Значение,
							   Знач ОжидаемыйТип,
							   Описание = "ожидаемого значения",
							   ЕслиУстановлен = Ложь,
							   Суффикс = Неопределено)
	
	Если ЕслиУстановлен И Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Соответствует = ТипЗначенияСоответствует(Значение, ОжидаемыйТип);
	
	Если НЕ Соответствует Тогда
		ТекстОшибки = СтрШаблон("Не верный тип %1 (`%2`), должен быть `%3`%4",
								Описание,
								ТипЗнч(Значение),
								ОжидаемыйТип,
								Суффикс);
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Функция ТипЗначенияСоответствует(Значение, ОжидаемыйТип)
	
	ТипОжидаемогоТипа = ТипЗнч(ОжидаемыйТип);
	
	Если ТипОжидаемогоТипа = Тип("Строка") Тогда
		Если СтрНайти(ОжидаемыйТип, ",") Тогда
			ОжидаемыйТип = Новый ОписаниеТипов(ОжидаемыйТип);
			ТипОжидаемогоТипа = Тип("ОписаниеТипов");
		Иначе
			ОжидаемыйТип = Тип(ОжидаемыйТип);
			ТипОжидаемогоТипа = Тип("Тип");
		КонецЕсли;
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипОжидаемогоТипа = Тип("ОписаниеТипов") Тогда
		// СодержитТип не подходит, всегда выдает истину если проверяем Тип("Неопределено")
		Соответствует = ОжидаемыйТип.Типы().Найти(ТипЗначения) <> Неопределено
			И ОжидаемыйТип.ПривестиЗначение(Значение) = Значение;
	Иначе
		Соответствует = ТипЗначения = ОжидаемыйТип;
	КонецЕсли;
	
	Возврат Соответствует;
	
КонецФункции

Функция ЭтоТипМассива(Тип)
	
	Возврат Тип = Тип("Массив") Или Тип = Тип("ФиксированныйМассив");
	
КонецФункции

Функция ЭтоТипКлючЗначение(Тип)
	
	Возврат Тип = Тип("Структура") Или Тип = Тип("ФиксированнаяСтруктура")
		Или Тип = Тип("Соответствие") Или Тип = Тип("ФиксированноеСоответствие");
	
КонецФункции

#КонецОбласти

Функция СравнитьПоЗначению(Значение1, Значение2)
	
	Попытка
		СтрокаСравнения1 = ЮТОбщий.СтрокаJSON(Значение1);
		СтрокаСравнения2 = ЮТОбщий.СтрокаJSON(Значение2);
		Возврат СтрокаСравнения1 = СтрокаСравнения2;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура УстановитьОписаниеПроверки(ОписаниеПроверки)
	
	Контекст().ОписаниеПроверки = ОписаниеПроверки;
	
КонецПроцедуры

Процедура СравнитьЗначения(ОжидаемоеЗначение, Реверс, Сообщение)
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = ЗначенияРавны(ПроверяемоеЗначение, ОжидаемоеЗначение);
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	ОбработатьРезультатСравнения(Результат, Сообщение, Реверс, ПроверяемоеЗначение, ОжидаемоеЗначение);
	
КонецПроцедуры

Процедура ПроверитьЗаполненность(Реверс)
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = ЗначениеЗаполнено(ПроверяемоеЗначение);
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	ОбработатьРезультатСравнения(Результат, "является заполненным", Реверс, ПроверяемоеЗначение, Неопределено);
	
КонецПроцедуры

Процедура ПроверитьСуществование(Реверс)
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = ПроверяемоеЗначение <> Null И ПроверяемоеЗначение <> Неопределено;
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	ОбработатьРезультатСравнения(Результат, "существует", Реверс, ПроверяемоеЗначение, Неопределено);
	
КонецПроцедуры

Процедура ПроверитьСодержание(ОжидаемоеЗначение, Реверс)
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		Результат = НайтиЗначение(ПроверяемоеЗначение, ОжидаемоеЗначение);
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Результат = Неопределено Тогда
		ТекстОшибки = СтрШаблон("Тип проверяемого значения `%1` не обрабатывается утверждением", ТипЗнч(ПроверяемоеЗначение));
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ТекстОшибки);
	КонецЕсли;
	
	Сообщение = СтрШаблон("содержит `%1`", ОжидаемоеЗначение);
	ОбработатьРезультатСравнения(Результат, Сообщение, Реверс, ПроверяемоеЗначение, ОжидаемоеЗначение);
	
КонецПроцедуры

Функция ДлинаПроверяемогоЗначения()
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение();
		ФактическаяДлина = ДлинаЗначения(ПроверяемоеЗначение);
	Исключение
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если ФактическаяДлина = Неопределено Тогда
		ТекстОшибки = СтрШаблон("Тип проверяемого значения `%1` не обрабатывается утверждением", ТипЗнч(ПроверяемоеЗначение));
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ТекстОшибки);
	КонецЕсли;
	
	Возврат ФактическаяДлина;
	
КонецФункции

Процедура ПроверитьДлину(ОжидаемоеЗначение, Реверс)
	
	ПроверитьТипЗначения(ОжидаемоеЗначение, "Число");
	
	ФактическаяДлина = ДлинаПроверяемогоЗначения();
	Результат = ФактическаяДлина = ОжидаемоеЗначение;
	
	Сообщение = СтрШаблон("имеет длину (размер) `%1`", ОжидаемоеЗначение);
	ОбработатьРезультатСравнения(Результат, Сообщение, Реверс, ФактическаяДлина, ОжидаемоеЗначение);
	
КонецПроцедуры

Процедура ОбработатьРезультатСравнения(Знач Результат, Знач Сообщение, Реверс, ПроверяемоеЗначение, ОжидаемоеЗначение)
	
	Если Реверс Тогда
		Результат = НЕ Результат;
		Сообщение = "не " + Сообщение;
	КонецЕсли;
	
	Если Не Результат Тогда
		ЮТРегистрацияОшибок.СгенерироватьОшибкуСравнения(Сообщение, ПроверяемоеЗначение, ОжидаемоеЗначение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьМежду(НачалоИнтервала, ОкончаниеИнтервала, ВключаяНачало, ВключаяОкончание)
	
	ПроверяемоеЗначение = ПроверяемоеЗначение();
	
	ТипЗначения = ТипЗнч(ПроверяемоеЗначение);
	
	Суффикс = ". Он должен совпадать с типом проверяемого значения";
	ПроверитьТипЗначения(НачалоИнтервала, ТипЗначения, "левой границы интервала", , Суффикс);
	ПроверитьТипЗначения(ОкончаниеИнтервала, ТипЗначения, "правой границы интервала", , Суффикс);
	
	Если НачалоИнтервала > ОкончаниеИнтервала Тогда
		ТекстОшибки = СтрШаблон("Не корректно задан интервал, левая граница (%1) не должна быть больше правой (%2)",
								НачалоИнтервала,
								ОкончаниеИнтервала);
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ТекстОшибки);
	КонецЕсли;
	Результат = Истина;
	
	Если ВключаяНачало Тогда
		Результат = НачалоИнтервала <= ПроверяемоеЗначение;
	Иначе
		Результат = НачалоИнтервала < ПроверяемоеЗначение;
	КонецЕсли;
	
	Если ВключаяОкончание Тогда
		Результат = Результат И ПроверяемоеЗначение <= ОкончаниеИнтервала;
	Иначе
		Результат = Результат И ПроверяемоеЗначение < ОкончаниеИнтервала;
	КонецЕсли;
	
	Если Не Результат Тогда
		Интервал = СтрШаблон("%1%2; %3%4",
			?(ВключаяНачало, "[", "("),
			НачалоИнтервала,
			ОкончаниеИнтервала,
			?(ВключаяОкончание, "]", ")"),);
		Сообщение = "находится в интервале " + Интервал;
		ЮТРегистрацияОшибок.СгенерироватьОшибкуСравнения(Сообщение, ПроверяемоеЗначение, Интервал);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполненностьЗначения(Значение, Описание)
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		ТекстОшибки = СтрШаблон("Ожидали, что %1 заполнено, но это не так", Описание);
		ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(ТекстОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ОбъектыРавны(Объект, ОбъектЭталон) Экспорт
	
	Ключи = ЮТОбщий.ВыгрузитьЗначения(ОбъектЭталон, "Ключ");
	
	ЭтоСоответствие = ТипЗнч(Объект) = Тип("Соответствие") ИЛИ ТипЗнч(Объект) = Тип("ФиксированноеСоответствие");
	ЭтоСтруктура = ТипЗнч(Объект) = Тип("Структура") ИЛИ ТипЗнч(Объект) = Тип("ФиксированнаяСтруктура");
	
	ЗначениеОтсутствующегоРеквизита = Новый УникальныйИдентификатор();
	
	Если НЕ ЭтоСтруктура И НЕ ЭтоСоответствие Тогда
		СтруктураОбъекта = Новый Структура(СтрСоединить(Ключи, ","));
		Для Каждого Ключ Из Ключи Цикл
			СтруктураОбъекта[Ключ] = ЗначениеОтсутствующегоРеквизита;
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(СтруктураОбъекта, Объект);
	Иначе
		СтруктураОбъекта = Объект;
	КонецЕсли;
	
	Для Каждого Ключ Из Ключи Цикл
		
		Если Не ЭтоСоответствие И (Не СтруктураОбъекта.Свойство(Ключ) Или СтруктураОбъекта[Ключ] = ЗначениеОтсутствующегоРеквизита) Тогда
			Сообщение = СтрШаблон("не содержат свойство '%1'", Ключ);
			ЮТРегистрацияОшибок.СгенерироватьОшибкуСравнения(Сообщение, СтруктураОбъекта, ОбъектЭталон);
		КонецЕсли;
		
		Если НЕ ЗначенияРавны(Объект[Ключ], ОбъектЭталон[Ключ]) Тогда
			Сообщение = СтрШаблон("имеет свойство '%1', которое равно `%2`", Ключ, ОбъектЭталон[Ключ]);
			ЮТРегистрацияОшибок.СгенерироватьОшибкуСравнения(Сообщение, СтруктураОбъекта, ОбъектЭталон);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьРезультатПроверки(Результат)
	
	Если НЕ Результат.Успешно Тогда
		
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			
			Если ТипЗнч(Сообщение) = Тип("Структура") Тогда
				ЮТРегистрацияОшибок.УстановитьДанныеОшибкиСравнения(Сообщение.ПроверяемоеЗначение, Сообщение.ОжидаемоеЗначение);
				
				ТекстИсключения = СтрШаблон("%1 <%2>", ЮТРегистрацияОшибок.ПрефиксОшибкиУтверждений(), Сообщение.Сообщение);
				ВызватьИсключение ТекстИсключения;
			Иначе
				ЮТРегистрацияОшибок.СгенерироватьОшибкуВыполнения(Сообщение);
			КонецЕсли;
			
		КонецЦикла;
		
		ВызватьИсключение "Провальный результат проверки не содержит сообщения";
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыСообщенийОбОшибке(ПроверяемоеЗначение, ОписаниеПроверки, ОбъектПроверки = "проверяемое значение")
	
	Контекст = Контекст();
	ПолноеОписаниеПроверки = ЮТОбщий.ДобавитьСтроку(Контекст.ПрефиксОшибки, ОписаниеПроверки, " ");
	ПредставлениеЗначения = СтрШаблон("`%1`", ПроверяемоеЗначение);
	
	Возврат ЮТПредикатыКлиентСервер.ПараметрыСообщенийОбОшибке(ПолноеОписаниеПроверки, ОбъектПроверки, ПредставлениеЗначения);
	
КонецФункции

#КонецОбласти
