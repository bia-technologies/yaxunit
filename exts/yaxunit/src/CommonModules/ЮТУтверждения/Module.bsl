//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2024 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область ПрограммныйИнтерфейс

// Инициализирует модуль для проверки утверждений.
//
// * Запоминает проверяемое значение.
// * Запоминает описание.
// * Сбрасывает настройки предыдущих утверждений.
//
// Утверждения формируются методами этого модуля.
//
// Параметры:
//  ПроверяемоеЗначение - Произвольный -  Проверяемое фактическое значение
//  Сообщение - Строка - Описание проверки, которое будет выведено при возникновении ошибки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
// Примеры
//  ЮТУтверждения.Что(...).ЭтоИстина(...);
//
Функция Что(Знач ПроверяемоеЗначение, Знач Сообщение = "") Экспорт
	
	Контекст = НовыйКонтекстУтверждения(ПроверяемоеЗначение);
	
	Контекст.ОбъектПроверки.Значение = ПроверяемоеЗначение;
	Контекст.ПрефиксОшибки = Сообщение;
	
	СброситьКонтекст();
	ЮТКонтекстСлужебный.УстановитьКонтекстУтверждений(Контекст);
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Запоминает описание метода (имя и параметры) для последующей проверки.
//
// Параметры:
//  ИмяМетода - Строка - Наименование метода
//  ПараметрыМетода - Массив из Произвольный - Параметры вызываемого метода. 
//    В качестве конструктора параметров можно использовать см. ЮТМетоды.МассивПараметров
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Метод(Знач ИмяМетода, Знач ПараметрыМетода = Неопределено) Экспорт
	
	Контекст = Контекст();
	
	ПроверитьТипЗначения(Контекст, ИмяМетода, "Строка", "имени метода", Истина);
	ПроверитьТипЗначения(Контекст, ПараметрыМетода, "Массив", "параметров метода", Истина);
	
	Контекст = Контекст();
	Контекст.ИмяМетода = ИмяМетода;
	Контекст.ПараметрыМетода = ПараметрыМетода;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Добавляет параметр метода для последующего вызова метода и проверки.
//
// Параметры:
//  ЗначениеПараметра - Произвольный - Параметр вызываемого метода
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Параметр(Знач ЗначениеПараметра) Экспорт
	
	Контекст = Контекст();
	
	Если НЕ ЗначениеЗаполнено(Контекст.ИмяМетода) Тогда
		ЮТРегистрацияОшибокСлужебный.СгенерироватьОшибкуВыполнения("Перед установкой параметров нужно указать метод", Контекст);
	КонецЕсли;
	
	Если Контекст.ПараметрыМетода = Неопределено Тогда
		Контекст.ПараметрыМетода = ЮТКоллекции.ЗначениеВМассиве(ЗначениеПараметра);
	Иначе
		Контекст.ПараметрыМетода.Добавить(ЗначениеПараметра);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Устанавливает описание проверяемого объекта.
//
// Параметры:
//  Представление - Строка - Представление
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ИмеющееПредставление(Представление) Экспорт
	
	Контекст().ОбъектПроверки.Представление = Представление;
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет наличие свойства и запоминает его для последующих проверок.
//
// Важно, следующие проверки будут относится к этому свойству.
// Для переключения на проверки объекта можно воспользоваться методом см. Объект.
//
// Параметры:
//  ИмяСвойства - Строка - Наименование свойства объекта.
//                         Возможно обращение к вложенным свойствам через точку
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Свойство(Знач ИмяСвойства, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	Контекст.ОбъектПроверки.ИмяСвойства = Неопределено; // Очищаем для формирования корректного сообщения об ошибке
	
	Путь = НормализованныйПутьКСвойству(Контекст.ОбъектПроверки.Значение, ИмяСвойства, Истина);
	
	Контекст.ОбъектПроверки.ИмяСвойства = ИмяСвойства;
	Контекст.НормализованныйПутьКСвойству = Путь;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет отсутствие свойства основного объекта.
// А также сбрасывает ранее установленное проверяемое свойство (см. Свойство).
//
// Параметры:
//  ИмяСвойства - Строка - Наименование свойства объекта.
//  						Возможно обращение к вложенным свойствам через точку
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НетСвойства(Знач ИмяСвойства, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	Контекст.ОбъектПроверки.ИмяСвойства = Неопределено; // Очищаем для формирования корректного сообщения об ошибке
	
	Если ЗначениеСодержитСвойство(Контекст.ОбъектПроверки.Значение, ИмяСвойства) Тогда
		СгенерироватьОшибкуСравнения(СтрШаблон("не содержит свойство `%1`", ИмяСвойства), Неопределено, ИмяСвойства);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет наличие элемента с указанным индексом и позиционируется на нем для последующих проверок.
//
// Важно, следующие проверки будут относится к этому элементу.
// Для переключения на проверки объекта можно воспользоваться методом см. Объект.
//
// Параметры:
//  Индекс - Число - Индекс элемента коллекции
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Элемент(Знач Индекс, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	Возврат Свойство(Индекс, ОписаниеПроверки);
	
КонецФункции

// Используется после вызова метода см. Свойство, для переключения с ранее указанного свойства на объект.
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Объект() Экспорт
	
	Контекст = Контекст();
	Контекст.ОбъектПроверки.ИмяСвойства = Неопределено;
	
	Возврат ЮТУтверждения;
	
КонецФункции

#Область УтвержденияПредикатов

// Проверяет установленное значение Контекста (или его свойство) на равенство ожидаемому.
//
// При сравнении также проверяется совпадение типов проверяемого и ожидаемого значения.
// Для сериализуемых объектов проверяется равенство по значению.
//
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) равно этому значению
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Равно(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПараметрыСравнения = Новый Структура("ГлубокийАнализ", Истина);
	ПроверитьПредикатУтверждения(ЮТПредикаты.Выражения().Равно, ОжидаемоеЗначение, ОписаниеПроверки, ПараметрыСравнения);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на НЕ равенство ожидаемому.
//
// При сравнении также проверяется совпадение типов проверяемого и ожидаемого значения
// Для сериализуемых значений проверяется равенство по значению
//
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) НЕ равно этому значению
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеРавно(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПараметрыСравнения = Новый Структура("ГлубокийАнализ", Истина);
	ПроверитьПредикатУтверждения(ЮТПредикаты.Выражения().НеРавно, ОжидаемоеЗначение, ОписаниеПроверки, ПараметрыСравнения);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство), оно должно быть больше ожидаемого.
//
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) Больше этого значения
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Больше(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьПредикатУтверждения(ЮТПредикаты.Выражения().Больше, ОжидаемоеЗначение, ОписаниеПроверки);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство), оно должно быть больше или равно ожидаемому.
//
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) Больше этого значения или равно ему
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция БольшеИлиРавно(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьПредикатУтверждения(ЮТПредикаты.Выражения().БольшеРавно, ОжидаемоеЗначение, ОписаниеПроверки);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство), оно должно быть меньше ожидаемого.
//
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) меньше этого значения
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Меньше(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьПредикатУтверждения(ЮТПредикаты.Выражения().Меньше, ОжидаемоеЗначение, ОписаниеПроверки);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство), оно должно быть меньше или равно ожидаемому.
//
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) меньше этого значения или равно ему
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция МеньшеИлиРавно(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьПредикатУтверждения(ЮТПредикаты.Выражения().МеньшеРавно, ОжидаемоеЗначение, ОписаниеПроверки);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на "заполненность" (обертка для `ЗначениеЗаполнено`).
//
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Заполнено(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьПредикатУтверждения(ЮТПредикаты.Выражения().Заполнено, , ОписаниеПроверки);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на "не заполненность" (обертка для `ЗначениеЗаполнено`)
//
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеЗаполнено(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьПредикатУтверждения(ЮТПредикаты.Выражения().НеЗаполнено, , ОписаниеПроверки);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на соответствие переданному типу.
//
// Параметры:
//  ОжидаемоеЗначение - Строка, Тип, ОписаниеТипов - Ожидается, что значение Контекста (или его свойство) имеет данный тип
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ИмеетТип(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьПредикатУтверждения(ЮТПредикаты.Выражения().ИмеетТип, ОжидаемоеЗначение, ОписаниеПроверки);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на несоответствие переданному типу.
//
// Параметры:
//  ОжидаемоеЗначение - Строка, Тип, ОписаниеТипов - Ожидается, что значение Контекста (или его свойство) НЕ имеет данный тип
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеИмеетТип(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьПредикатУтверждения(ЮТПредикаты.Выражения().НеИмеетТип, ОжидаемоеЗначение, ОписаниеПроверки);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на наличие в нем искомого.
//
// Проверка поддерживается для следующих типов проверяемого значения:
//
// - Строка - по вхождению
// - Массив - по наличию равного элемента
// - Структура - по наличию равного значения
// - Соответствие - по наличию равного значения
// - СписокЗначений - по наличию равного значения
// - ФиксированныйМассив - по наличию равного значения
// - ФиксированнаяСтруктура - по наличию равного значения
// - ФиксированноеСоответствие - по наличию равного значения
// - Произвольный итерируемый объект для проверки на соответствие предикату
//
// При сравнении также проверяется совпадение типов
//
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) содержит указанное значение
//                    - ОбщийМодуль - Модуль настройки предикатов, см. ЮТест.Предикат
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Содержит(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	Если ЮТПредикатыСлужебныйКлиентСервер.ЭтоПредикат(ОжидаемоеЗначение) Тогда
		ПроверитьСодержаниеПредиката(ОжидаемоеЗначение, ОписаниеПроверки, Ложь);
	Иначе
		ПроверитьПредикатУтверждения(ЮТПредикаты.Выражения().Содержит, ОжидаемоеЗначение, ОписаниеПроверки);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на наличие в нем искомого.
//
// Проверка поддерживается для следующих типов проверяемого значения:
//
//  - Строка - по отсутствию вхождению
//  - Массив - по отсутствию равного элемента
//  - Структура - по отсутствию равного значения
//  - Соответствие - по отсутствию равного значения
//  - СписокЗначений - по отсутствию равного значения
//  - ФиксированныйМассив - по отсутствию равного значения
//  - ФиксированнаяСтруктура - по отсутствию равного значения
//  - ФиксированноеСоответствие - по отсутствию равного значения
//  - Произвольный итерируемый объект для проверки на соответствие предикату
//
//  При сравнении также проверяется совпадение типов
//
// Параметры:
//  ОжидаемоеЗначение - Произвольный - Ожидается, что значение Контекста (или его свойство) НЕ содержит указанное
//                    - ОбщийМодуль - Модуль настройки предикатов, см. ЮТест.Предикат
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеСодержит(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	Если ЮТПредикатыСлужебныйКлиентСервер.ЭтоПредикат(ОжидаемоеЗначение) Тогда
		ПроверитьСодержаниеПредиката(ОжидаемоеЗначение, ОписаниеПроверки, Истина);
	Иначе
		ПроверитьПредикатУтверждения(ЮТПредикаты.Выражения().НеСодержит, ОжидаемоеЗначение, ОписаниеПроверки);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на наличие подстроки, соответствующей регулярному выражению
//
// Параметры:
//  Шаблон - Строка - Регулярное выражение, по которому ищем подстроку
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция СодержитСтрокуПоШаблону(Знач Шаблон, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьПредикатУтверждения(ЮТПредикаты.Выражения().СодержитСтрокуПоШаблону, Шаблон, ОписаниеПроверки);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на отсутствие подстроки, соответствующей регулярному выражению
//
// Параметры:
//  Шаблон - Строка - Регулярное выражение, по которому ищем подстроку
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеСодержитСтрокуПоШаблону(Знач Шаблон, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьПредикатУтверждения(ЮТПредикаты.Выражения().НеСодержитСтрокуПоШаблону, Шаблон, ОписаниеПроверки);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет наличие свойства у объекта/его свойства.
//  В отличии от метода см. Свойство не позиционируется на указанное свойство.
// Параметры:
//  ИмяСвойства - Строка - Наименование свойства объекта.
//  						Возможно обращение к вложенным свойствам через точку
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ИмеетСвойство(Знач ИмяСвойства, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьПредикатУтверждения(ЮТПредикаты.Выражения().ИмеетСвойство, ИмяСвойства, ОписаниеПроверки);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет отсутствие свойства у объекта/его свойства.
//  В отличии от метода см. НетСвойства не сбрасывает позиционирование проверки.
//
// Параметры:
//  ИмяСвойства - Строка - Наименование свойства объекта.
//  						Возможно обращение к вложенным свойствам через точку
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеИмеетСвойства(Знач ИмяСвойства, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьПредикатУтверждения(ЮТПредикаты.Выражения().НеИмеетСвойство, ИмяСвойства, ОписаниеПроверки);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет значение (или его свойство), оно должно входить в указанный список.
//
// Параметры:
//  Значения - Массив из Произвольный - Значения для проверки
//           - СписокЗначений из Произвольный - Значения для проверки
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ВСписке(Значения, ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьПредикатУтверждения(ЮТПредикаты.Выражения().ВСписке, Значения, ОписаниеПроверки);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет вхождение установленного значение (или его свойства) в заданный интервал.
//
// Проверяемое значение может находится на границе интервала.
//
// Параметры:
//  НачалоИнтервала - Произвольный - Левая граница интервала. Может иметь любой тип, позволяющий сравнивать значения
//  ОкончаниеИнтервала - Произвольный - Правая граница. Может иметь любой тип, позволяющий сравнивать значения
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция МеждуВключаяГраницы(НачалоИнтервала, ОкончаниеИнтервала, ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьПредикатМежду(ЮТПредикаты.Выражения().МеждуВключаяГраницы, НачалоИнтервала, ОкончаниеИнтервала, ОписаниеПроверки);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет вхождение установленного значение (или его свойства) в заданный интервал.
//
// Проверяемое значение не может находится на границе интервала.
//
// Параметры:
//  НачалоИнтервала - Произвольный - Левая граница интервала. Может иметь любой тип, позволяющий сравнивать значения
//  ОкончаниеИнтервала - Произвольный - Правая граница. Может иметь любой тип, позволяющий сравнивать значения
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция МеждуИсключаяГраницы(НачалоИнтервала, ОкончаниеИнтервала, ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьПредикатМежду(ЮТПредикаты.Выражения().МеждуИсключаяГраницы, НачалоИнтервала, ОкончаниеИнтервала, ОписаниеПроверки);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет вхождение установленного значение (или его свойства) в заданный интервал.
//
// Проверяемое значение может находится на начальной границе интервала.
//
// Параметры:
//  НачалоИнтервала - Произвольный - Левая граница интервала. Может иметь любой тип, позволяющий сравнивать значения
//  ОкончаниеИнтервала - Произвольный - Правая граница. Может иметь любой тип, позволяющий сравнивать значения
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция МеждуВключаяНачалоГраницы(НачалоИнтервала, ОкончаниеИнтервала, ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьПредикатМежду(ЮТПредикаты.Выражения().МеждуВключаяНачалоГраницы, НачалоИнтервала, ОкончаниеИнтервала, ОписаниеПроверки);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет вхождение установленного значение (или его свойства) в заданный интервал.
//
// Проверяемое значение может находится на конечной границе интервала.
//
// Параметры:
//  НачалоИнтервала - Произвольный - Левая граница интервала. Может иметь любой тип, позволяющий сравнивать значения
//  ОкончаниеИнтервала - Произвольный - Правая граница. Может иметь любой тип, позволяющий сравнивать значения
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция МеждуВключаяОкончаниеГраницы(НачалоИнтервала, ОкончаниеИнтервала, ОписаниеПроверки = Неопределено) Экспорт
	
	ПроверитьПредикатМежду(ЮТПредикаты.Выражения().МеждуВключаяОкончаниеГраницы, НачалоИнтервала, ОкончаниеИнтервала, ОписаниеПроверки);
	Возврат ЮТУтверждения;
	
КонецФункции

#КонецОбласти

// Проверяет наличие свойств и их значения у проверяемого объекта (или его свойства).
//
// Параметры:
//  ОжидаемоеЗначение - Структура - Проверяемый объект должен иметь свойства указанные в параметре
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ИмеетСвойстваРавные(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	ПроверяемоеЗначение = ПроверяемоеЗначение(Контекст);
	ОбъектыРавны(ПроверяемоеЗначение, ОжидаемоеЗначение);
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на равенство `Истина)`.
// При сравнении также проверяется совпадение типов проверяемого и ожидаемого значения.
//
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоИстина(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	СравнитьЗначения(Контекст, Истина, Ложь, "является истиной");
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство)на НЕ равенство `Истина`.
// При сравнении также проверяется совпадение типов проверяемого и ожидаемого значения.
//
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоНеИстина(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	СравнитьЗначения(Контекст, Истина, Истина, "является истиной");
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на равенство `Ложь`.
// При сравнении также проверяется совпадение типов проверяемого и ожидаемого значения.
//
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоЛожь(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	СравнитьЗначения(Контекст, Ложь, Ложь, "является ложью");
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на НЕ равенство `Ложь`.
// При сравнении также проверяется совпадение типов проверяемого и ожидаемого значения.
//
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоНеЛожь(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	СравнитьЗначения(Контекст, Ложь, Истина, "является ложью");
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на "существование", т.е. отличие от `Null` и `Неопределено`.
//
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция Существует(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	ПроверитьСуществование(Контекст, Ложь);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на "не существование", т.е. оно равно `Null` или `Неопределено`.
//
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеСуществует(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	ПроверитьСуществование(Контекст, Истина);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) не равенство `Неопределено`.
//
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоНеопределено(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	СравнитьЗначения(Контекст, Неопределено, Ложь, "является неопределено");
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на не равенство `Неопределено`.
//
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоНеНеопределено(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	СравнитьЗначения(Контекст, Неопределено, Истина, "является неопределено");
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на равенство `Null`.
//
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоNull(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	СравнитьЗначения(Контекст, Null, Ложь, "является null");
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на не равенство `Null`.
//
// Параметры:
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЭтоНеNull(Знач ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	СравнитьЗначения(Контекст, Null, Истина, "является null");
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на длину или размер коллекции.
//
// Проверка поддерживается для следующих типов проверяемого значения:
//  - Строка
//  - Массив
//  - Структура
//  - Соответствие
//  - СписокЗначений
//  - ФиксированныйМассив
//  - ФиксированнаяСтруктура
//  - ФиксированноеСоответствие
//  - ТаблицаЗначения
//
// Параметры:
//  ОжидаемоеЗначение - Число - Ожидается, что значение Контекста (или его свойство) имеет указанную длину или размер
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ИмеетДлину(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	ПроверитьТипЗначения(Контекст, ОжидаемоеЗначение, "Число");
	
	ФактическаяДлина = ДлинаПроверяемогоЗначения(Контекст);
	Результат = ФактическаяДлина = ОжидаемоеЗначение;
	
	Сообщение = СтрШаблон("длиной (размером) `%1` имеет длину (размер) `%2`", ФактическаяДлина, ОжидаемоеЗначение);
	ОбработатьРезультатСравнения(Результат, Сообщение, Ложь, ФактическаяДлина, ОжидаемоеЗначение);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на длину или размер коллекции.
//
// Проверка поддерживается для следующих типов проверяемого значения:
//  - Строка
//  - Массив
//  - Структура
//  - Соответствие
//  - СписокЗначений
//  - ФиксированныйМассив
//  - ФиксированнаяСтруктура
//  - ФиксированноеСоответствие
//  - ТаблицаЗначения
//
// Параметры:
//  ОжидаемоеЗначение - Число - Ожидается, что значение Контекста (или его свойство) имеет указанную длину или размер
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ИмеетДлинуБольше(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	ПроверитьТипЗначения(Контекст, ОжидаемоеЗначение, "Число");
	
	ФактическаяДлина = ДлинаПроверяемогоЗначения(Контекст);
	Результат = ФактическаяДлина > ОжидаемоеЗначение;
	
	Сообщение = СтрШаблон("длиной (размером) `%1` имеет длину (размер) больше `%2`", ФактическаяДлина, ОжидаемоеЗначение);
	ОбработатьРезультатСравнения(Результат, Сообщение, Ложь, ФактическаяДлина, ОжидаемоеЗначение);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на длину или размер коллекции.
//
// Проверка поддерживается для следующих типов проверяемого значения:
//  - Строка
//  - Массив
//  - Структура
//  - Соответствие
//  - СписокЗначений
//  - ФиксированныйМассив
//  - ФиксированнаяСтруктура
//  - ФиксированноеСоответствие
//  - ТаблицаЗначения
//
// Параметры:
//  ОжидаемоеЗначение - Число - Ожидается, что значение Контекста (или его свойство) имеет указанную длину или размер
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ИмеетДлинуМеньше(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	ПроверитьТипЗначения(Контекст, ОжидаемоеЗначение, "Число");
	
	ФактическаяДлина = ДлинаПроверяемогоЗначения(Контекст);
	Результат = ФактическаяДлина < ОжидаемоеЗначение;
	
	Сообщение = СтрШаблон("длиной (размером) `%1` имеет длину (размер) меньше `%2`", ФактическаяДлина, ОжидаемоеЗначение);
	ОбработатьРезультатСравнения(Результат, Сообщение, Ложь, ФактическаяДлина, ОжидаемоеЗначение);
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство) на длину или размер коллекции, которые не должны совпадать с указанным значением.
//
// Проверка поддерживается для следующих типов проверяемого значения:
//  - Строка
//  - Массив
//  - Структура
//  - Соответствие
//  - СписокЗначений
//  - ФиксированныйМассив
//  - ФиксированнаяСтруктура
//  - ФиксированноеСоответствие
//  - ТаблицаЗначения
//
// Параметры:
//  ОжидаемоеЗначение - Число - Ожидается, что значение Контекста (или его свойство) не имеет указанную дину или размер
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеИмеетДлину(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	ПроверитьТипЗначения(Контекст, ОжидаемоеЗначение, "Число");
	
	ФактическаяДлина = ДлинаПроверяемогоЗначения(Контекст);
	Результат = ФактическаяДлина <> ОжидаемоеЗначение;
	
	Сообщение = СтрШаблон("длиной (размером) `%1` не имеет длину (размер) `%2`", ФактическаяДлина, ОжидаемоеЗначение);
	ОбработатьРезультатСравнения(Результат, Сообщение, Ложь, ФактическаяДлина, ОжидаемоеЗначение);
	Возврат ЮТУтверждения;
	
КонецФункции

#Область ПроверкаМетодов

// Вызывает метод (см. Метод) объекта контекста и проверяет, выбрасывает ли он исключение.
// Проверяет, что метод упадет по исключению, а текст исключения содержит(включает) указанный.
//
// Параметры:
//  ОжидаемоеЗначение - Строка - Ожидается, что сообщение об ошибке будет содержать(включать) данный текст
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//  ВТранзакции - Булево - Вызов метода выполняется в транзакции
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ВыбрасываетИсключение(Знач ОжидаемоеЗначение, Знач ОписаниеПроверки = Неопределено, ВТранзакции = Ложь) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	Попытка
		Модуль = ПроверяемоеЗначение(Контекст);
		Результат = ВызватьМетод(Модуль, Контекст.ИмяМетода, Контекст.ПараметрыМетода, ВТранзакции);
	Исключение
		ЮТРегистрацияОшибокСлужебный.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке(), Контекст);
	КонецПопытки;
	
	Если НЕ Результат.ИсключениеВозникло Тогда
		ТекстОшибки = СтрШаблон("ожидали, что метод `%1` вызовет исключение `%2`, но это не так.", Контекст.ИмяМетода, ОжидаемоеЗначение);
		ЮТРегистрацияОшибокСлужебный.УстановитьДанныеОшибкиСравнения(Результат.ТекстИсключения, ОжидаемоеЗначение);
		ЮТРегистрацияОшибокСлужебный.ВызватьОшибкуПроверки(ТекстОшибки, Контекст);
	ИначеЕсли СтрНайти(Результат.ТекстИсключения, ОжидаемоеЗначение) = 0 Тогда
		ТекстОшибки = СтрШаблон("ожидали, что метод `%1` вызовет исключение `%2`, но получили `%3`.",
								Контекст.ИмяМетода,
								ОжидаемоеЗначение,
								Результат.ТекстИсключения);
		ЮТРегистрацияОшибокСлужебный.УстановитьДанныеОшибкиСравнения(Результат.ТекстИсключения, ОжидаемоеЗначение);
		ЮТРегистрацияОшибокСлужебный.ВызватьОшибкуПроверки(ТекстОшибки, Контекст);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Вызывает метод (см. Метод) объекта контекста и проверяет, выбрасывает ли он исключение.
// Проверяет, что метод не упадет по исключению
//  или упадет по исключению текст, которого не содержит указанный.
//
// Параметры:
//  ОжидаемоеЗначение - Строка - Ожидается, что метод выбросит исключение, текст которого НЕ будет содержать (включать) данный текст
//                    - Неопределено - Ожидается, что метод отработает без выбора исключения
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//  ВТранзакции - Булево - Вызов метода выполняется в транзакции
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НеВыбрасываетИсключение(Знач ОжидаемоеЗначение = Неопределено, Знач ОписаниеПроверки = Неопределено, ВТранзакции = Ложь) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	Попытка
		Модуль = ПроверяемоеЗначение(Контекст);
		Результат = ВызватьМетод(Модуль, Контекст.ИмяМетода, Контекст.ПараметрыМетода, ВТранзакции);
	Исключение
		ЮТРегистрацияОшибокСлужебный.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке(), Контекст);
	КонецПопытки;
	
	Если Результат.ИсключениеВозникло Тогда
		ЮТРегистрацияОшибокСлужебный.УстановитьДанныеОшибкиСравнения(Результат.ТекстИсключения, ОжидаемоеЗначение);
		
		Если НЕ ЗначениеЗаполнено(ОжидаемоеЗначение) Тогда
			ТекстОшибки = СтрШаблон("ожидали, что метод `%1` не вызовет исключение, но это не так.", Контекст.ИмяМетода);
			ЮТРегистрацияОшибокСлужебный.ВызватьОшибкуПроверки(ТекстОшибки, Контекст);
		ИначеЕсли СтрНайти(Результат.ТекстИсключения, ОжидаемоеЗначение) <> 0 Тогда
			ТекстОшибки = СтрШаблон("ожидали, что метод `%1` не вызовет исключение `%2`, но это не так.", Контекст.ИмяМетода, ОжидаемоеЗначение);
			ЮТРегистрацияОшибокСлужебный.ВызватьОшибкуПроверки(ТекстОшибки, Контекст);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет, что установленное значение Контекста (или его свойство) имеет указанный экспортный метод.
//
//
// Параметры:
//  ИмяМетода - Строка - Имя метода, наличие которого нужно проверить
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ИмеетМетод(ИмяМетода, ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	
	Модуль = ПроверяемоеЗначение(Контекст);
	Результат = ЮТМетодыСлужебный.МетодОбъектаСуществует(Модуль, ИмяМетода);
	Если НЕ Результат Тогда
		Сообщение = СтрШаблон("имеет метод `%1`", ИмяМетода);
		СгенерироватьОшибкуСравнения(Сообщение, Модуль, ИмяМетода);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

#КонецОбласти
// Проверяет установленное значение Контекста (или его свойство), ожидается что оно начинается на указанное значение.
//
// При этом проверяемое значение должно быть строкой.
//
// Параметры:
//  СтрокаПоиска - Строка - Строка поиска
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция НачинаетсяС(СтрокаПоиска, ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	ПроверяемоеЗначение = ПроверяемоеЗначение(Контекст);
	ПроверитьТипЗначения(Контекст, ПроверяемоеЗначение, "Строка, ФорматированнаяСтрока", "проверяемого значения");
	ПроверитьТипЗначения(Контекст, СтрокаПоиска, "Строка", "ожидаемого значения");
	ПроверитьЗаполненностьЗначения(Контекст, СтрокаПоиска, "ожидаемое значение");
	
	Результат = СтрНачинаетсяС(ПроверяемоеЗначение, СтрокаПоиска);
	
	Если НЕ Результат Тогда
		Сообщение = СтрШаблон("начинается с `%1`", СтрокаПоиска);
		СгенерироватьОшибкуСравнения(Сообщение, ПроверяемоеЗначение, СтрокаПоиска);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение Контекста (или его свойство), ожидается что оно заканчивается на указанное значение.
//
// При этом проверяемое значение должно быть строкой.
//
// Параметры:
//  СтрокаПоиска - Строка - Строка поиска
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЗаканчиваетсяНа(СтрокаПоиска, ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	ПроверяемоеЗначение = ПроверяемоеЗначение(Контекст);
	ПроверитьТипЗначения(Контекст, ПроверяемоеЗначение, "Строка, ФорматированнаяСтрока", "проверяемого значения");
	ПроверитьТипЗначения(Контекст, СтрокаПоиска, "Строка", "ожидаемого значения");
	ПроверитьЗаполненностьЗначения(Контекст, СтрокаПоиска, "ожидаемое значение");
	
	Результат = СтрЗаканчиваетсяНа(ПроверяемоеЗначение, СтрокаПоиска);
	
	Если НЕ Результат Тогда
		Сообщение = СтрШаблон("заканчивается на `%1`", СтрокаПоиска);
		СгенерироватьОшибкуСравнения(Сообщение, ПроверяемоеЗначение, СтрокаПоиска);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет каждый элемент установленного значения (или его свойства), все элементы должны иметь указанное свойство.
//
// Параметры:
//  ИмяСвойства - Строка
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция КаждыйЭлементСодержитСвойство(ИмяСвойства, ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	ПроверяемоеЗначение = ПроверяемоеЗначение(Контекст);
	ОбъектПроверки = "каждый элемент проверяемого значения";
	
	Для Каждого Элемент Из ПроверяемоеЗначение Цикл
		
		Если НЕ ЗначениеСодержитСвойство(Элемент, ИмяСвойства) Тогда
			Сообщение = СтрШаблон("содержит свойство `%1`", ИмяСвойства);
			СгенерироватьОшибкуСравнения(Сообщение, ПроверяемоеЗначение, ИмяСвойства, ОбъектПроверки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет каждый элемент установленного значения (или его свойства),
// все элементы должны иметь указанное свойство, которое равно ожидаемому значению.
//
// Параметры:
//  ИмяСвойства - Строка
//  ОжидаемоеЗначение - Произвольный - Ожидаемое значение свойства
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция КаждыйЭлементСодержитСвойствоСоЗначением(ИмяСвойства, ОжидаемоеЗначение, ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	ПроверяемоеЗначение = ПроверяемоеЗначение(Контекст);
	ОбъектПроверки = "каждый элемент проверяемого значения";
	ОписаниеОжидания = Новый Структура(ИмяСвойства, ОжидаемоеЗначение);
	
	Для Каждого Элемент Из ПроверяемоеЗначение Цикл
		
		Путь = НормализованныйПутьКСвойству(Элемент, ИмяСвойства, Ложь);
		Если Путь = Неопределено Тогда
			Сообщение = СтрШаблон("содержит свойство `%1`", ИмяСвойства);
			СгенерироватьОшибкуСравнения(Сообщение, ПроверяемоеЗначение, ОписаниеОжидания, ОбъектПроверки);
		КонецЕсли;
		
		ЗначениеСвойства = ЗначениеСвойства(Элемент, Путь);
		
		Если НЕ ЗначенияРавны(ЗначениеСвойства, ОжидаемоеЗначение) Тогда
			Сообщение = СтрШаблон("содержит свойство `%1`, которое равно `%2`", ИмяСвойства, ОжидаемоеЗначение);
			СгенерироватьОшибкуСравнения(Сообщение, ПроверяемоеЗначение, ОписаниеОжидания, ОбъектПроверки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет элементы установленного значения (или его свойства), хотя бы один из них должен иметь указанное свойство.
//
// Параметры:
//  ИмяСвойства - Строка
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЛюбойЭлементСодержитСвойство(ИмяСвойства, ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	ПроверяемоеЗначение = ПроверяемоеЗначение(Контекст);
	ОбъектПроверки = "хоть один элемент проверяемого значения";
	
	Найден = Ложь;
	Для Каждого Элемент Из ПроверяемоеЗначение Цикл
		
		Если ЗначениеСодержитСвойство(Элемент, ИмяСвойства) Тогда
			Найден = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Найден Тогда
		Сообщение = СтрШаблон("содержит свойство `%1`", ИмяСвойства);
		СгенерироватьОшибкуСравнения(Сообщение, ПроверяемоеЗначение, ИмяСвойства, ОбъектПроверки);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет элементы установленного значения (или его свойства),
// хотя бы один из них должен иметь указанное свойство, которое равно ожидаемому значению.
//
// Параметры:
//  ИмяСвойства - Строка
//  ОжидаемоеЗначение - Произвольный - Ожидаемое значение свойства
//  ОписаниеПроверки - Строка - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЛюбойЭлементСодержитСвойствоСоЗначением(ИмяСвойства, ОжидаемоеЗначение, ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	ПроверяемоеЗначение = ПроверяемоеЗначение(Контекст);
	ОбъектПроверки = "хоть один элемент проверяемого значения";
	
	НайденоСвойство = Ложь;
	НайденоЗначение = Ложь;
	Для Каждого Элемент Из ПроверяемоеЗначение Цикл
		
		Путь = НормализованныйПутьКСвойству(Элемент, ИмяСвойства, Ложь);
		Если Путь = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НайденоСвойство = Истина;
		ЗначениеСвойства = ЗначениеСвойства(Элемент, Путь);
		
		Если ЗначенияРавны(ЗначениеСвойства, ОжидаемоеЗначение) Тогда
			НайденоЗначение = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеОжидания = Новый Структура(ИмяСвойства, ОжидаемоеЗначение);
	Если НЕ НайденоСвойство Тогда
		Сообщение = СтрШаблон("содержит свойство `%1`", ИмяСвойства);
		СгенерироватьОшибкуСравнения(Сообщение, ПроверяемоеЗначение, ОписаниеОжидания, ОбъектПроверки);
	ИначеЕсли НЕ НайденоЗначение Тогда
		Сообщение = СтрШаблон("содержит свойство `%1`, которое равно `%2`", ИмяСвойства, ОжидаемоеЗначение);
		СгенерироватьОшибкуСравнения(Сообщение, ПроверяемоеЗначение, ОписаниеОжидания, ОбъектПроверки);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет установленное значение (или его свойства) на соответствие утверждениям предиката.
// см. ЮТест.Предикат
//
// Параметры:
//  Предикат - Массив из см. ЮТФабрика.ВыражениеПредиката - Набор утверждений, см. ЮТПредикаты.Получить
//           - см. ЮТФабрика.ВыражениеПредиката
//           - ОбщийМодуль - Модуль настройки предикатов, см. ЮТест.Предикат
//  ОписаниеПроверки - Строка, Неопределено - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция СоответствуетПредикату(Предикат, ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	ПроверяемоеЗначение = ПроверяемоеЗначение(Контекст);
	
	ПараметрыСообщенийОбОшибке = ПараметрыСообщенийОбОшибке(ПроверяемоеЗначение, ОписаниеПроверки);
	
	РезультатПроверки = ЮТПредикатыСлужебныйКлиентСервер.ПроверитьПредикаты(ПроверяемоеЗначение, Предикат, ПараметрыСообщенийОбОшибке);
	
	Если НЕ РезультатПроверки.Успешно Тогда
		ОбработатьРезультатПроверки(Контекст, РезультатПроверки);
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет каждый элемент установленного значения (или его свойства),
// все элементы должны соответствовать утверждениям предиката.
// см. ЮТест.Предикат
//
// Параметры:
//  Предикат - Массив из см. ЮТФабрика.ВыражениеПредиката - Набор утверждений, см. ЮТПредикаты.Получить
//           - см. ЮТФабрика.ВыражениеПредиката
//           - ОбщийМодуль - Модуль настройки предикатов, см. ЮТест.Предикат
//  ОписаниеПроверки - Строка, Неопределено - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция КаждыйЭлементСоответствуетПредикату(Предикат, ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	ПроверяемоеЗначение = ПроверяемоеЗначение(Контекст);
	
	ПараметрыСообщенийОбОшибке = ПараметрыСообщенийОбОшибке(ПроверяемоеЗначение, ОписаниеПроверки, "каждый элемент проверяемого значения");
	
	Для Каждого Элемент Из ПроверяемоеЗначение Цикл
		
		РезультатПроверки = ЮТПредикатыСлужебныйКлиентСервер.ПроверитьПредикаты(Элемент, Предикат, ПараметрыСообщенийОбОшибке);
		Если НЕ РезультатПроверки.Успешно Тогда
			ОбработатьРезультатПроверки(Контекст, РезультатПроверки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЮТУтверждения;
	
КонецФункции

// Проверяет элементы установленного значения (или его свойства),
// хотя бы один из них должен соответствовать утверждениям предиката.
// см. ЮТест.Предикат
//
// Параметры:
//  Предикат - Массив из см. ЮТФабрика.ВыражениеПредиката - Набор утверждений, см. ЮТПредикаты.Получить
//           - см. ЮТФабрика.ВыражениеПредиката
//           - ОбщийМодуль - Модуль настройки предикатов, см. ЮТест.Предикат
//  ОписаниеПроверки - Строка, Неопределено - Описание конкретной проверки
//
// Возвращаемое значение:
//  ОбщийМодуль - Этот модуль для замыкания
Функция ЛюбойЭлементСоответствуетПредикату(Предикат, ОписаниеПроверки = Неопределено) Экспорт
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	ПроверяемоеЗначение = ПроверяемоеЗначение(Контекст);
	
	ПараметрыСообщенийОбОшибке = ПараметрыСообщенийОбОшибке(ПроверяемоеЗначение, ОписаниеПроверки);
	
	Успешно = Ложь;
	
	Для Каждого Элемент Из ПроверяемоеЗначение Цикл
		
		РезультатПроверки = ЮТПредикатыСлужебныйКлиентСервер.ПроверитьПредикаты(Элемент, Предикат, ПараметрыСообщенийОбОшибке);
		Если РезультатПроверки.Успешно Тогда
			Успешно = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Успешно Тогда
		Сообщение = ЮТПредикатыСлужебныйКлиентСервер.ПредставлениеПредикатов(Предикат, " и ");
		СгенерироватьОшибкуУтверждения(Сообщение, ПроверяемоеЗначение, "один из элементов проверяемого значения");
	КонецЕсли;
	
	Возврат ЮТУтверждения;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Сбросить контекст.
// Используется для принудительного сброса контекста утверждения
Процедура СброситьКонтекст() Экспорт
	
	ЮТКонтекстСлужебный.УстановитьКонтекстУтверждений(Неопределено);
	ЮТРегистрацияОшибокСлужебный.УстановитьКонтекстОшибки();
	
КонецПроцедуры

// Обработчик события "ПередКаждымТестом"
//
// Параметры:
//  ОписаниеСобытия - см. ЮТФабрикаСлужебный.ОписаниеСобытияИсполненияТестов
Процедура ПередКаждымТестом(ОписаниеСобытия) Экспорт
	
	СброситьКонтекст();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Контекст

// Контекст.
//
// Возвращаемое значение:
//  см. НовыйКонтекстУтверждения
Функция Контекст() Экспорт
	
	//@skip-check constructor-function-return-section
	Возврат ЮТКонтекстСлужебный.КонтекстПроверки();
	
КонецФункции

// Инициализирует контекст утверждений
//
// Параметры:
//  ПроверяемоеЗначение - Произвольный - Проверяемое значение
//
// Возвращаемое значение:
//  Структура - контекст утверждений:
// * ОбъектПроверки - см. ЮТФабрикаСлужебный.ОписаниеПроверяемогоЗначения
// * ИмяМетода - Строка
// * НормализованныйПутьКСвойству - Неопределено - Не указано свойство
//                                - Массив из Строка, Число
// * ПараметрыМетода - Неопределено - Не установлены
//                   - Массив из Произвольный
Функция НовыйКонтекстУтверждения(ПроверяемоеЗначение)
	
	Контекст = ЮТФабрикаСлужебный.ОписаниеПроверки(ПроверяемоеЗначение);
	
	Контекст.Вставить("ИмяМетода", "");
	Контекст.Вставить("НормализованныйПутьКСвойству", Неопределено);
	Контекст.Вставить("ПараметрыМетода", Неопределено);
	
	Возврат Контекст;
	
КонецФункции

#КонецОбласти

Функция ПроверяемоеЗначение(Контекст)
	
	Если Контекст.ОбъектПроверки.ИмяСвойства <> Неопределено Тогда
		Значение = ЗначениеСвойства(Контекст.ОбъектПроверки.Значение, Контекст.НормализованныйПутьКСвойству);
	Иначе
		Значение = Контекст.ОбъектПроверки.Значение;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ЗначениеСвойства(Объект, НормализованныйПутьКСвойству)
	
	Значение = Объект;
	Для Каждого Часть Из НормализованныйПутьКСвойству Цикл
		
		Если ТипЗнч(Значение) = Тип("ХранилищеЗначения") Тогда
#Если ВебКлиент Или ТонкийКлиент Тогда
			Значение = ЮТОбщийСлужебныйВызовСервера.ИзХранилищаЗначений(Значение);
#Иначе
			Значение = Значение.Получить();
#КонецЕсли
		КонецЕсли;
		
		Если ТипЗнч(Часть) = Тип("Число") И Часть < 0 И ТипЗнч(Значение) <> Тип("Соответствие") Тогда
			Часть = Значение.Количество() + Часть;
		КонецЕсли;
		
		Значение = Значение[Часть];
		
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

Функция ЗначенияРавны(Значение1, Значение2)
	
	Возврат ТипЗнч(Значение1) = ТипЗнч(Значение2) И
		(Значение1 = Значение2 ИЛИ СравнитьПоЗначению(Значение1, Значение2));
	
КонецФункции

Функция НормализованныйПутьКСвойству(Знач Значение, Цепочка, ФиксироватьОшибку = Истина)
	
	ПутьКСвойству = Новый Массив();
	
	ТипПути = ТипЗнч(Цепочка);
	
	Если ТипПути = Тип("Строка") Тогда
		
		Части = СтрРазделить(Цепочка, ".");
		
		ПройденныйПуть = Новый Массив();
		
		Для Каждого Часть Из Части Цикл
			
			ПройденныйПуть.Добавить(Часть);
			
			ПозицияИндекса = СтрНайти(Часть, "[");
			
			Если ПозицияИндекса > 0 И СтрЗаканчиваетсяНа(Часть, "]") Тогда
				
				Если ПозицияИндекса > 1 Тогда
					ПутьКСвойству.Добавить(Лев(Часть, ПозицияИндекса - 1));
				КонецЕсли;
				
				Пока ПозицияИндекса > 0 Цикл
					
					ЗакрывающаяПозиция = СтрНайти(Часть, "]", , ПозицияИндекса);
					ИндексСтрокой = Сред(Часть, ПозицияИндекса + 1, ЗакрывающаяПозиция - ПозицияИндекса - 1);
					Индекс = Число(ИндексСтрокой);
					ПутьКСвойству.Добавить(Индекс);
					
					ПозицияИндекса = СтрНайти(Часть, "[", , ЗакрывающаяПозиция);
					
				КонецЦикла;
				
			Иначе
				
				ПутьКСвойству.Добавить(Часть);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ПутьКСвойству.Добавить(Цепочка);
		
	КонецЕсли;
	
	ПройденныйПуть = Новый Массив();
	
	Для Каждого Часть Из ПутьКСвойству Цикл
		
		ПройденныйПуть.Добавить(Часть);
		
		Если ТипЗнч(Значение) = Тип("ХранилищеЗначения") Тогда
			//@skip-check bsl-legacy-check-dynamic-feature-access
			Значение = Значение.Получить();
		КонецЕсли;
		
		Попытка
			ЕстьСвойство = ЗначениеИмеетСвойство(Значение, Часть);
		Исключение
			ЕстьСвойство = Ложь;
		КонецПопытки;
		
		Если ЕстьСвойство Тогда
			Значение = Значение[Часть];
		ИначеЕсли ФиксироватьОшибку Тогда
			ПутьСвойства = СтрСоединить(ПройденныйПуть, ".");
			СгенерироватьОшибкуСравнения(СтрШаблон("содержит свойство `%1`", ПутьСвойства), Значение, Цепочка);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПутьКСвойству;
	
КонецФункции

Функция ЗначениеСодержитСвойство(Знач Значение, Знач ИмяСвойства)
	
	Возврат НормализованныйПутьКСвойству(Значение, ИмяСвойства, Ложь) <> Неопределено;
	
КонецФункции

Функция ЗначениеИмеетСвойство(Значение, Свойство)
	
	Результат = Ложь;
	ТипЗначения = ТипЗнч(Значение);
	
	Если ЮТТипыДанныхСлужебный.ЭтоСтруктура(ТипЗначения) Тогда
		
		Результат = Значение.Свойство(Свойство);
		
	ИначеЕсли ЮТТипыДанныхСлужебный.ЭтоСоответствие(ТипЗначения) Тогда
		
		Для Каждого КлючЗначение Из Значение Цикл
			
			Если КлючЗначение.Ключ = Свойство И ТипЗнч(КлючЗначение.Ключ) = ТипЗнч(Свойство) Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Свойство) = Тип("Число") Тогда
		
		Если Свойство < 0 Тогда
			Свойство = Значение.Количество() + Свойство;
		КонецЕсли;
		Результат = Свойство >= 0 И Значение.Количество() > Свойство;
		
	Иначе
		
		Результат = ЮТОбщий.ПеременнаяСодержитСвойство(Значение, Свойство);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДлинаЗначения(ПроверяемоеЗначение)
	
	ТипПроверяемогоЗначения = ТипЗнч(ПроверяемоеЗначение);
	
	Если ТипПроверяемогоЗначения = Тип("Строка") ИЛИ ТипПроверяемогоЗначения = Тип("ФорматированнаяСтрока") Тогда
		
		ФактическаяДлина = СтрДлина(ПроверяемоеЗначение);
		
	Иначе
		
		Попытка
			ФактическаяДлина = ПроверяемоеЗначение.Количество();
		Исключение
			ФактическаяДлина = Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ФактическаяДлина;
	
КонецФункции

Функция ВызватьМетод(Модуль, ИмяМетода, ПараметрыМетода, ВТранзакции)
	
#Если ВебКлиент Тогда
	ВызватьИсключение ЮТИсключения.МетодНеДоступен("ЮТУтверждения.ВызватьМетод");
#Иначе
	Если НЕ ЗначениеЗаполнено(ИмяМетода) Тогда
		ВызватьИсключение "ИмяМетода не заполнено в контексте. Воспользуйтесь предварительно методом интерфейса `Метод(ИмяМетода)`";
	КонецЕсли;
	
#Если НЕ Сервер Тогда
	Если ВТранзакции Тогда
		ВызватьИсключение "Использование транзакции доступно только на сервере (толстом клиенте)";
	КонецЕсли;
#КонецЕсли
	
	Результат = Новый Структура("ИсключениеВозникло, ТекстИсключения", Ложь);
	
#Если Сервер Тогда
	Если ВТранзакции Тогда
		Если ТранзакцияАктивна() Тогда
			ВызватьИсключение "Использование транзакции внутри транзакции при проверке метода недопустимо";
		КонецЕсли;
		
		НачатьТранзакцию(); // BSLLS:PairingBrokenTransaction-off BSLLS:BeginTransactionBeforeTryCatch-off
		Ошибка = ВыполнитьМетодМодуля(Модуль, ИмяМетода, ПараметрыМетода);
		ОтменитьТранзакцию(); // BSLLS:WrongUseOfRollbackTransactionMethod-off
	Иначе
		Ошибка = ВыполнитьМетодМодуля(Модуль, ИмяМетода, ПараметрыМетода);
	КонецЕсли;
#Иначе
	Ошибка = ВыполнитьМетодМодуля(Модуль, ИмяМетода, ПараметрыМетода);
#КонецЕсли
	
	Если Ошибка <> Неопределено Тогда
		Результат.ТекстИсключения = КраткоеПредставлениеОшибки(Ошибка);
		Результат.ИсключениеВозникло = Истина;
	КонецЕсли;
	
	Возврат Результат;
#КонецЕсли
	
КонецФункции

Функция ВыполнитьМетодМодуля(Модуль, ИмяМетода, ПараметрыМетода)
	
	ВызоваМетодаОбъекта = Модуль <> Неопределено И ТипЗнч(Модуль) <> Тип("Строка");
	
	Если ВызоваМетодаОбъекта Тогда
		Ошибка = ЮТМетодыСлужебный.ВыполнитьМетодОбъектаСПерехватомОшибки(Модуль, ИмяМетода, ПараметрыМетода);
	Иначе
		Ошибка = ЮТМетодыСлужебный.ВыполнитьМетодКонфигурацииСПерехватомОшибки(Модуль, ИмяМетода, ПараметрыМетода);
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции

#Область ПроверкаТипов

Процедура ПроверитьТипЗначения(Контекст,
							   Значение,
							   Знач ОжидаемыйТип,
							   Описание = "ожидаемого значения",
							   ЕслиУстановлен = Ложь,
							   Суффикс = Неопределено)
	
	Если ЕслиУстановлен И Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Соответствует = ЮТПроверкиСлужебный.ТипЗначенияСоответствует(Значение, ОжидаемыйТип);
	
	Если НЕ Соответствует Тогда
		ТекстОшибки = СтрШаблон("Не верный тип %1 (`%2`), должен быть `%3`%4",
								Описание,
								ТипЗнч(Значение),
								ОжидаемыйТип,
								Суффикс);
		ЮТРегистрацияОшибокСлужебный.СгенерироватьОшибкуВыполнения(ТекстОшибки, Контекст);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция СравнитьПоЗначению(Значение1, Значение2)
	
	Попытка
		СтрокаСравнения1 = ЮТОбщий.СтрокаJSON(Значение1);
		СтрокаСравнения2 = ЮТОбщий.СтрокаJSON(Значение2);
		Возврат СтрокаСравнения1 = СтрокаСравнения2;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки)
	
	Контекст.ОписаниеПроверки = ОписаниеПроверки;
	
КонецПроцедуры

Процедура СравнитьЗначения(Контекст, ОжидаемоеЗначение, Реверс, Сообщение)
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение(Контекст);
		Результат = ЗначенияРавны(ПроверяемоеЗначение, ОжидаемоеЗначение);
	Исключение
		ЮТРегистрацияОшибокСлужебный.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке(), Контекст);
	КонецПопытки;
	
	ОбработатьРезультатСравнения(Результат, Сообщение, Реверс, ПроверяемоеЗначение, ОжидаемоеЗначение);
	
КонецПроцедуры

Процедура ПроверитьСуществование(Контекст, Реверс)
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение(Контекст);
		Результат = ПроверяемоеЗначение <> Null И ПроверяемоеЗначение <> Неопределено;
	Исключение
		ЮТРегистрацияОшибокСлужебный.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке(), Контекст);
	КонецПопытки;
	
	ОбработатьРезультатСравнения(Результат, "существует", Реверс, ПроверяемоеЗначение, Неопределено);
	
КонецПроцедуры

Функция ДлинаПроверяемогоЗначения(Контекст)
	
	Попытка
		ПроверяемоеЗначение = ПроверяемоеЗначение(Контекст);
		ФактическаяДлина = ДлинаЗначения(ПроверяемоеЗначение);
	Исключение
		ЮТРегистрацияОшибокСлужебный.СгенерироватьОшибкуВыполнения(ИнформацияОбОшибке(), Контекст);
	КонецПопытки;
	
	Если ФактическаяДлина = Неопределено Тогда
		ТекстОшибки = СтрШаблон("Тип проверяемого значения `%1` не обрабатывается утверждением", ТипЗнч(ПроверяемоеЗначение));
		ЮТРегистрацияОшибокСлужебный.СгенерироватьОшибкуВыполнения(ТекстОшибки, Контекст);
	КонецЕсли;
	
	Возврат ФактическаяДлина;
	
КонецФункции

Процедура ОбработатьРезультатСравнения(Знач Результат, Знач Сообщение, Реверс, ПроверяемоеЗначение, ОжидаемоеЗначение)
	
	Если Реверс Тогда
		Результат = НЕ Результат;
		Сообщение = "не " + Сообщение;
	КонецЕсли;
	
	Если НЕ Результат Тогда
		СгенерироватьОшибкуСравнения(Сообщение, ПроверяемоеЗначение, ОжидаемоеЗначение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполненностьЗначения(Контекст, Значение, Описание)
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		ТекстОшибки = СтрШаблон("Ожидали, что %1 заполнено, но это не так", Описание);
		ЮТРегистрацияОшибокСлужебный.СгенерироватьОшибкуВыполнения(ТекстОшибки, Контекст);
	КонецЕсли;
КонецПроцедуры

Процедура ОбъектыРавны(Объект, ОбъектЭталон)
	
	Ключи = ЮТКоллекции.ВыгрузитьЗначения(ОбъектЭталон, "Ключ");
	ТипЗначения = ТипЗнч(Объект);
	
	ЭтоСоответствие = ЮТТипыДанныхСлужебный.ЭтоСоответствие(ТипЗначения);
	ЭтоСтруктура = ЮТТипыДанныхСлужебный.ЭтоСтруктура(ТипЗначения);
	
	ЗначениеОтсутствующегоРеквизита = Новый УникальныйИдентификатор();
	
	Если НЕ ЭтоСтруктура И НЕ ЭтоСоответствие Тогда
		СтруктураОбъекта = Новый Структура(СтрСоединить(Ключи, ","));
		Для Каждого Ключ Из Ключи Цикл
			СтруктураОбъекта[Ключ] = ЗначениеОтсутствующегоРеквизита;
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(СтруктураОбъекта, Объект);
	Иначе
		СтруктураОбъекта = Объект;
	КонецЕсли;
	
	Для Каждого Ключ Из Ключи Цикл
		
		Если НЕ ЭтоСоответствие И (НЕ СтруктураОбъекта.Свойство(Ключ) ИЛИ СтруктураОбъекта[Ключ] = ЗначениеОтсутствующегоРеквизита) Тогда
			Сообщение = СтрШаблон("не содержат свойство '%1'", Ключ);
			СгенерироватьОшибкуСравнения(Сообщение, СтруктураОбъекта, ОбъектЭталон);
		КонецЕсли;
		
		Если НЕ ЗначенияРавны(Объект[Ключ], ОбъектЭталон[Ключ]) Тогда
			Сообщение = СтрШаблон("имеет свойство '%1', которое равно `%2`", Ключ, ОбъектЭталон[Ключ]);
			СгенерироватьОшибкуСравнения(Сообщение, СтруктураОбъекта, ОбъектЭталон);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьРезультатПроверки(Контекст, Результат)
	
	Если НЕ Результат.Успешно Тогда
		
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			
			Если ТипЗнч(Сообщение) = Тип("Структура") Тогда
				ЮТРегистрацияОшибокСлужебный.УстановитьДанныеОшибкиСравнения(Сообщение.ПроверяемоеЗначение, Сообщение.ОжидаемоеЗначение);
				
				ТекстИсключения = СтрШаблон("%1 <%2>", ЮТРегистрацияОшибокСлужебный.ПрефиксОшибкиУтверждений(), Сообщение.Сообщение);
				ВызватьИсключение ТекстИсключения;
			Иначе
				ЮТРегистрацияОшибокСлужебный.СгенерироватьОшибкуВыполнения(Сообщение, Контекст);
			КонецЕсли;
			
		КонецЦикла;
		
		ВызватьИсключение "Провальный результат проверки не содержит сообщения";
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыСообщенийОбОшибке(ПроверяемоеЗначение, ОписаниеПроверки, ОбъектПроверки = "проверяемое значение")
	
	Контекст = Контекст();
	ПолноеОписаниеПроверки = ЮТСтроки.ДобавитьСтроку(Контекст.ПрефиксОшибки, ОписаниеПроверки, " ");
	ПредставлениеЗначения = СтрШаблон("`%1`", ПроверяемоеЗначение);
	
	Возврат ЮТПредикатыСлужебныйКлиентСервер.ПараметрыСообщенийОбОшибке(ПолноеОписаниеПроверки, ОбъектПроверки, ПредставлениеЗначения);
	
КонецФункции

// Вызывает ошибку проверки утверждений
// При этом сохраняет в контекст состояние, для дальнейшей обработки
//
// Параметры:
//  Сообщение - Строка
//  ПроверяемоеЗначение - Произвольный
//  ОбъектПроверки - Строка - Человекочитаемое описание проверяемого значения
Процедура СгенерироватьОшибкуУтверждения(Сообщение, ПроверяемоеЗначение, ОбъектПроверки = "проверяемое значение")
	
	Контекст = Контекст();
	ЮТРегистрацияОшибокСлужебный.СгенерироватьОшибкуУтверждения(Контекст, Сообщение, ПроверяемоеЗначение, ОбъектПроверки);
	
КонецПроцедуры

Процедура СгенерироватьОшибкуСравнения(Сообщение, ФактическоеЗначение, ОжидаемоеЗначение, ОбъектПроверки = "проверяемое значение")
	
	Контекст = Контекст();
	ЮТРегистрацияОшибокСлужебный.СгенерироватьОшибкуСравнения(Контекст, Сообщение, ФактическоеЗначение, ОжидаемоеЗначение, ОбъектПроверки);
	
КонецПроцедуры

#Область Предикаты

Процедура ПроверитьПредикатУтверждения(Выражение, ОжидаемоеЗначение, ОписаниеПроверки, ПараметрыСравнения = Неопределено)
	
	Контекст = Контекст();
	Предикат = ЮТФабрика.ВыражениеПредиката(Выражение, Контекст.ОбъектПроверки.ИмяСвойства, ОжидаемоеЗначение);
	
	ПроверитьПредикат(Контекст, Предикат, ОписаниеПроверки, ПараметрыСравнения);
	
КонецПроцедуры

Процедура ПроверитьПредикатМежду(Выражение, НачалоИнтервала, ОкончаниеИнтервала, ОписаниеПроверки)
	
	Контекст = Контекст();
	Предикат = ЮТФабрика.ВыражениеПредиката(Выражение, Контекст.ОбъектПроверки.ИмяСвойства, НачалоИнтервала);
	Предикат.Вставить("ОкончаниеИнтервала", ОкончаниеИнтервала);
	ПроверитьПредикат(Контекст, Предикат, ОписаниеПроверки, Неопределено);
	
КонецПроцедуры

Процедура ПроверитьПредикат(Контекст, Предикат, ОписаниеПроверки, ПараметрыСравнения = Неопределено)
	
	ПолноеОписаниеПроверки = ЮТСтроки.ДобавитьСтроку(Контекст.ПрефиксОшибки, ОписаниеПроверки, " ");
	
	ПараметрыСообщенийОбОшибке = ЮТПредикатыСлужебныйКлиентСервер.ПараметрыСообщенийОбОшибке(ПолноеОписаниеПроверки,
																							 "проверяемое значение",
																							 Контекст.ОбъектПроверки.Представление);
	Результат = ЮТПредикатыСлужебныйКлиентСервер.ПроверитьПредикаты(Контекст.ОбъектПроверки.Значение,
																	Предикат,
																	ПараметрыСообщенийОбОшибке,
																	ПараметрыСравнения);
	
	ОбработатьРезультатПроверкиПредиката(Результат);
	
КонецПроцедуры

Процедура ОбработатьРезультатПроверкиПредиката(Результат)
	
	Если НЕ Результат.Успешно Тогда
		
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			
			Если ТипЗнч(Сообщение) = Тип("Структура") Тогда
				ЮТРегистрацияОшибокСлужебный.УстановитьДанныеОшибкиСравнения(Сообщение.ПроверяемоеЗначение, Сообщение.ОжидаемоеЗначение);
				
				ТекстИсключения = СтрШаблон("%1 <%2>", ЮТРегистрацияОшибокСлужебный.ПрефиксОшибкиУтверждений(), Сообщение.Сообщение);
				ВызватьИсключение ТекстИсключения;
			Иначе
				ЮТРегистрацияОшибокСлужебный.СгенерироватьОшибкуВыполнения(Сообщение);
			КонецЕсли;
			
		КонецЦикла;
		
		ВызватьИсключение "Провальный результат проверки не содержит сообщения";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСодержаниеПредиката(Предикат, ОписаниеПроверки, Реверс)
	
	Контекст = Контекст();
	УстановитьОписаниеПроверки(Контекст, ОписаниеПроверки);
	ПроверяемоеЗначение = ПроверяемоеЗначение(Контекст);
	
	ПараметрыСообщенийОбОшибке = ПараметрыСообщенийОбОшибке(ПроверяемоеЗначение, ОписаниеПроверки);
	
	Успешно = Ложь;
	
	Для Каждого Элемент Из ПроверяемоеЗначение Цикл
		
		РезультатПроверки = ЮТПредикатыСлужебныйКлиентСервер.ПроверитьПредикаты(Элемент, Предикат, ПараметрыСообщенийОбОшибке);
		Если РезультатПроверки.Успешно Тогда
			Успешно = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Реверс Тогда
		Успешно = НЕ Успешно;
	КонецЕсли;
	
	Если НЕ Успешно Тогда
		Сообщение = "содержит элемент, значение которого " + ЮТПредикатыСлужебныйКлиентСервер.ПредставлениеПредикатов(Предикат, " и ");
		
		Если Реверс Тогда
			Сообщение = "не " + Сообщение;
		КонецЕсли;
		
		СгенерироватьОшибкуУтверждения(Сообщение, ПроверяемоеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
