//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2024 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Процедура ДобавитьТестовыйНабор(Имя, ТегиСтрокой) Экспорт
	
	Если ПустаяСтрока(Имя) Тогда
		ВызватьИсключение "Имя тестового набора не может быть пустым";
	КонецЕсли;
	
	Контекст = Контекст();
	
	Если Контекст = Неопределено ИЛИ НЕ Контекст.Свойство("ОписаниеМодуля") Тогда
		ВызватьИсключение "Не инициализирован контекст регистрации тестов";
	КонецЕсли;
	
	ТестовыйНабор = ЮТФабрикаСлужебный.ОписаниеТестовогоНабора(Имя, ТегиСтрокой);
	
	Контекст.ОписаниеМодуля.НаборыТестов.Добавить(ТестовыйНабор);
	Контекст.ТекущийНабор = ТестовыйНабор;
	Контекст.ТекущийЭлемент = ТестовыйНабор;
	
КонецПроцедуры

Процедура ДобавитьТест(ИмяТестовогоМетода, ПредставлениеТеста, Теги, Контексты) Экспорт
	
	Если ПустаяСтрока(ИмяТестовогоМетода) Тогда
		ВызватьИсключение "Имя тестового метода не может быть пустым";
	КонецЕсли;
	
	Контекст = Контекст();
	Набор = Контекст.ТекущийНабор;
	
	Если Набор = Неопределено Или НЕ Набор.Свойство("Тесты") Тогда
		ВызватьИсключение "Не установлен тестовый набор. Скорее всего проблема в движке";
	КонецЕсли;
	
	Тест = ОписаниеТеста(ИмяТестовогоМетода, ПредставлениеТеста, Теги, Контексты);
	ДобавитьТестВНабор(Контекст, Тест, Ложь);
	
КонецПроцедуры

Процедура ДобавитьКлиентскийТест(ИмяТестовогоМетода, ПредставлениеТеста, ТегиСтрокой) Экспорт
	
	ДобавитьТест(ИмяТестовогоМетода, ПредставлениеТеста, ТегиСтрокой, КонтекстыВызоваКлиента());
	
КонецПроцедуры

Процедура ДобавитьСерверныйТест(ИмяТестовогоМетода, ПредставлениеТеста, ТегиСтрокой) Экспорт
	
	Режимы = ЮТФабрика.КонтекстыВызова();
	
	ДобавитьТест(ИмяТестовогоМетода, ПредставлениеТеста, ТегиСтрокой, Режимы.Сервер);
	
КонецПроцедуры

Процедура УстановитьНастройкуИсполнения(ИмяПараметра, Значение) Экспорт
	
	Контекст = Контекст();
	
	Если Контекст.ТекущийЭлемент = Неопределено Тогда
		ВызватьИсключение "Не инициализированы настройки регистрации тестов";
	КонецЕсли;
	
	Контекст.ТекущийЭлемент.НастройкиВыполнения.Вставить(ИмяПараметра, Значение);
	
КонецПроцедуры

Процедура ДобавитьЗависимость(ОписаниеЗависимости) Экспорт
	
	Контекст = Контекст();
	
	Если Контекст.ТекущийЭлемент = Неопределено Тогда
		ВызватьИсключение "Не инициализированы настройки регистрации тестов";
	КонецЕсли;
	
	Контекст.ТекущийЭлемент.Зависимости.Добавить(ОписаниеЗависимости);
	
КонецПроцедуры

Процедура СПараметрами(Параметры, Знач НовыеКонтексты) Экспорт
	
	Контекст = Контекст();
	
	Если Контекст.ТекущийЭлемент = Неопределено Тогда
		ВызватьИсключение "Не инициализированы настройки регистрации тестов";
	ИначеЕсли НЕ ЭтоОписаниеТеста(Контекст.ТекущийЭлемент) Тогда
		ВызватьИсключение "Параметры устанавливаются только для теста";
	КонецЕсли;
	
	ЭтоПервыйВызовСПараметрами = Контекст.ТекущийЭлемент.Параметры = Неопределено;
	УстановитьНовыйКонтекст = ЗначениеЗаполнено(НовыеКонтексты);
	
	Если ЭтоПервыйВызовСПараметрами Тогда
		Контекст.БазовыйТест = ЮТКоллекции.СкопироватьСтруктуру(Контекст.ТекущийЭлемент);
	КонецЕсли;
	
	Если УстановитьНовыйКонтекст Тогда
		НормализованныеКонтексты = НормализованныеКонтексты(НовыеКонтексты);
		НовыеКонтексты = ЮТКоллекции.ПересечениеМассивов(Контекст.БазовыйТест.КонтекстВызова, НормализованныеКонтексты);
		
		Если НЕ ЗначениеЗаполнено(НовыеКонтексты) Тогда
			ВызватьИсключение СтрШаблон("Не пересекаются контексты базового теста %1 и устанавливаемые %2",
										ЮТКоллекции.ПредставлениеМассива(Контекст.БазовыйТест.КонтекстВызова),
										ЮТКоллекции.ПредставлениеМассива(НормализованныеКонтексты));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтоПервыйВызовСПараметрами Тогда
		НоваяНастройка = ЮТКоллекции.СкопироватьСтруктуру(Контекст.БазовыйТест);
		ДобавитьТестВНабор(Контекст, НоваяНастройка, Истина);
	КонецЕсли;
	
	Контекст.ТекущийЭлемент.Параметры = Параметры;
	
	Если УстановитьНовыйКонтекст Тогда
		Контекст.ТекущийЭлемент.КонтекстВызова = НовыеКонтексты;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПредставление(Представление, ИспользуяИмя) Экспорт
	
	ТекущийЭлемент = Контекст().ТекущийЭлемент;
	Если ИспользуяИмя Тогда
		ТекущийЭлемент.Представление = СтрШаблон("%1. %2", ТекущийЭлемент.Имя, Представление);
	Иначе
		ТекущийЭлемент.Представление = Представление;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьТег(ИмяТега) Экспорт
	
	ТекущийЭлемент = Контекст().ТекущийЭлемент;
	ТекущийЭлемент.Теги.Добавить(ИмяТега);
	
КонецПроцедуры

Функция КонтекстыВызоваКлиента() Экспорт
	
	Режимы = ЮТФабрика.КонтекстыВызова();
	Возврат ЮТКоллекции.ЗначениеВМассиве(Режимы.КлиентУправляемоеПриложение, Режимы.КлиентОбычноеПриложение);
	
КонецФункции

// Описание сценариев модуля
//
// Возвращаемое значение:
//  см. ИсполняемыеСценарии
Функция ОписаниеМодуля() Экспорт
	
	Возврат Контекст().ОписаниеМодуля;
	
КонецФункции

// Контекст.
// 
// Возвращаемое значение:
//  Структура - Контекст:
//  * ОписаниеМодуля - см. ЮТФабрикаСлужебный.ОписаниеТестовогоМодуля
Функция Контекст() Экспорт
	
	//@skip-check constructor-function-return-section
	Возврат ЮТКонтекстСлужебный.ЗначениеКонтекста(ИмяКонтекста());
	
КонецФункции

#Область ОбработчикиСобытий

Процедура ПередЧтениемСценариевМодуля(МетаданныеМодуля) Экспорт
	
	ИнициализироватьКонтекст(МетаданныеМодуля);
	
КонецПроцедуры

Процедура ПослеЧтенияСценариевМодуля(ОписаниеТестовогоМодуля) Экспорт
	
	ЮТКонтекстСлужебный.УстановитьЗначениеКонтекста(ИмяКонтекста(), Неопределено);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Новое описание тестового модуля.
// 
// Параметры:
//  МетаданныеМодуля - см. ЮТФабрикаСлужебный.ОписаниеМетаданныеМодуля
// 
// Возвращаемое значение:
//  см. ЮТФабрикаСлужебный.ОписаниеТестовогоМодуля
Функция НовоеОписаниеТестовогоМодуля(МетаданныеМодуля)
	
	ОписаниеМодуля = ЮТФабрикаСлужебный.ОписаниеТестовогоМодуля(МетаданныеМодуля, Новый Массив);
	
	НаборПоУмолчанию = ЮТФабрикаСлужебный.ОписаниеТестовогоНабора(МетаданныеМодуля.Имя);
	ОписаниеМодуля.НаборыТестов.Добавить(НаборПоУмолчанию);
	
	Возврат ОписаниеМодуля;
	
КонецФункции

Функция КонтекстыВызоваПоУмолчанию()
	
	Возврат ЮТФабрикаСлужебный.КонтекстыМодуля(Контекст().ОписаниеМодуля.Метаданные);
	
КонецФункции

Функция ОписаниеТеста(Имя, Знач Представление, Теги, Знач Контексты)
	
	Контексты = НормализованныеКонтексты(Контексты);
	
	Возврат ЮТФабрикаСлужебный.ОписаниеТеста(Имя, Представление, Контексты, Теги);
	
КонецФункции

Функция ЭтоОписаниеТеста(Описание)
	
	Возврат ТипЗнч(Описание) = Тип("Структура")
		И ТипЗнч(ЮТКоллекции.ЗначениеСтруктуры(Описание, "КонтекстВызова")) = Тип("Массив");
	
КонецФункции

Процедура ДобавитьТестВНабор(Контекст, Тест, ЭтоКопия)
	
	Если НЕ ЭтоКопия Тогда
		Контекст.БазовыйТест = Неопределено;
	КонецЕсли;
	
	Контекст.ТекущийНабор.Тесты.Добавить(Тест);
	Контекст.ТекущийЭлемент = Тест;
	Тест.НомерВНаборе = Контекст.ТекущийНабор.Тесты.Количество();
	
КонецПроцедуры

Процедура ИнициализироватьКонтекст(МетаданныеМодуля)
	
	ОписаниеМодуля = НовоеОписаниеТестовогоМодуля(МетаданныеМодуля);
	НаборПоУмолчанию = ОписаниеМодуля.НаборыТестов[0];
	
	Контекст = Новый Структура();
	
	Контекст.Вставить("ОписаниеМодуля", ОписаниеМодуля);
	Контекст.Вставить("ТекущийНабор", НаборПоУмолчанию);
	Контекст.Вставить("ТекущийЭлемент", ОписаниеМодуля);
	Контекст.Вставить("БазовыйТест", Неопределено);
	
	ЮТКонтекстСлужебный.УстановитьЗначениеКонтекста(ИмяКонтекста(), Контекст);
	
КонецПроцедуры

Функция НормализованныеКонтексты(ПараметрКонтексты)
	
	Если НЕ ЗначениеЗаполнено(ПараметрКонтексты) Тогда
		Контексты = КонтекстыВызоваПоУмолчанию();
	ИначеЕсли ТипЗнч(ПараметрКонтексты) = Тип("Строка") Тогда
		Контексты = СтрРазделить(ПараметрКонтексты, ", ", Ложь);
	Иначе
		Контексты = ПараметрКонтексты;
	КонецЕсли;
	
	Возврат Контексты;
	
КонецФункции

Функция ИмяКонтекста()
	
	Возврат "КонтекстРегистрацияТестов";
	
КонецФункции

#КонецОбласти
