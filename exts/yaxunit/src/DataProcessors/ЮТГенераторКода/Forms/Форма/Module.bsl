//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область ОписаниеПеременных

&НаКлиенте
Перем Движения_ТипДокумента;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ТипКодаДляФормирования) Тогда
		ТипКодаДляФормирования = "ОсновнойКод";
	КонецЕсли;
	
	КартинкаРеквизит = БиблиотекаКартинок.Реквизит;
	КартинкаТаблица = БиблиотекаКартинок.ВложеннаяТаблица;
	
	ПервоначальнаяНастройкаФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастроитьВидимость();
	ЗаполнитьИменаРеквизитовДвижений();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипКодаДляФормированияПриИзменении(Элемент)
	
	НастроитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура Движения_ДокументПриИзменении(Элемент)
	
	ЗаполнитьИменаРеквизитовДвижений();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьКодПоМетаданным(Команда)
	
	СформироватьКодПоМетаданнымНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьКодПоСписку(Команда)
	
	СформироватьКодПоСпискуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМетаданныхВопрос(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьСтруктуруМетаданныхЗавершение", ЭтотОбъект),
				   "Этот процесс может занять длительное время. Вы действительно хотите Обновить структуру метаданных?",
				   РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьТаблицуMarkdown(Команда)
	
	КодДляРедактирования = СформироватьКодMarkdownДляРедактирования();
	ПараметрОткрытия = Новый Структура("РедактированиеMarkDown, КодMarkDown", Истина, КодДляРедактирования);
	ОткрытьФорму("Обработка.ЮТРедакторМакетаСТестовымиДанными.Форма.Форма", ПараметрОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКод(Команда)

	Если ТипКодаДляФормирования = "КонструкторОбъектаYaxunit" Или ТипКодаДляФормирования = "ТаблицаMarkdownYaxunit" Тогда
		Сообщить(НСтр("ru = 'Для Yaxunit нельзя выполнить код.'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьКодЗавершение", ЭтотОбъект),
				   "Вы действительно хотите выполнить код?",
				   РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьКод(Команда)
	
	ТекстКода	= ТекстКод1С.ПолучитьТекст();
	
	Если Не ПустаяСтрока(ТекстКода) Тогда
		
		COM = Новый COMОбъект("htmlfile");
		COM.ParentWindow.ClipboardData.Setdata("Text", ТекстКода);
		COM	= Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	ТекстКод1С.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект, "Открытие"));

КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура СформироватьКодДвижений(Команда)
	
	Отмеченные = Новый Массив;
	Для Каждого Элемент Из ИменаРегистров Цикл
		Если Элемент.Пометка Тогда
			Отмеченные.Добавить(Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Отмеченные) Тогда
		ПоказатьПредупреждение(, "Выберите регистры движений");
		Возврат;
	КонецЕсли;
	
	Текст = СформироватьКодДвиженийНаСервере(ТипКодаДляФормирования, Движения_Документ, Отмеченные);
	ТекстКод1С.УстановитьТекст(Текст);
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПервоначальнаяНастройкаФормы()
	
	УсловноеОформление();
	Элементы.СкопироватьКод.Видимость = ЮТОкружение.ЭтоWindows();
	
КонецПроцедуры

&НаСервере
Процедура УсловноеОформление()
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноКрасный);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМетаданных.СтандартныйРеквизит");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоМетаданныхПредставление");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимость()
	
	Элементы.КодДляОбработчиковОбновления.Видимость =
		ТипКодаДляФормирования = "ОсновнойКод";
	Элементы.СписокЗначенийПоСсылкеРедактироватьТаблицуMarkdown.Видимость =
		ТипКодаДляФормирования = "ТаблицаMarkdownYaxunit";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМетаданныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбновитьСтруктуруМетаданных();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМетаданных()
	
	ДеревоМетаданных.ПолучитьЭлементы().Очистить();
	
	Состояние("Анализ типов Справочники...");
	ДобавлениеМетаданныхГруппы("Справочник", "Справочники");
	
	Состояние("Анализ типов Документы...");
	ДобавлениеМетаданныхГруппы("Документ", "Документы");
	
КонецПроцедуры

#Область ФормированиеКодаПоСсылке

&НаСервере
Процедура СформироватьКодПоСпискуНаСервере()
	
	МассивСсылок = СписокЗначенийПоСсылке.ВыгрузитьЗначения();
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("ТипКода", ТипКодаДляФормирования);
	ПараметрыФормирования.Вставить("КодДляОбработчиковОбновления", КодДляОбработчиковОбновления);
	
	ТекстКод1С = РеквизитФормыВЗначение("Объект").СформироватьКодПоСсылкамНаОбъекты(МассивСсылок, ПараметрыФормирования);
	
	// Отображение объектов метаданных на ДеревоМетаданных из списка ссылок.
	Для Каждого ЭлементСписка Из СписокЗначенийПоСсылке Цикл
		ЗначениеСсылка = ЭлементСписка.Значение;
		ДобавитьСтрокуДереваМетаданных(ЗначениеСсылка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьКодMarkdownДляРедактирования()
	
	МассивСсылок = СписокЗначенийПоСсылке.ВыгрузитьЗначения();
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("ТипКода", ТипКодаДляФормирования);
	ПараметрыФормирования.Вставить("КодДляОбработчиковОбновления", КодДляОбработчиковОбновления);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	РезультатФормирования = ОбработкаОбъект.СформироватьТаблицуMarkdownПоСсылкам(МассивСсылок, ПараметрыФормирования);
	
	Возврат РезультатФормирования.СтрокаТаблицMarkdown;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуДереваМетаданных(ЗначениеСсылка)

	ОбъектМетаданных = ЗначениеСсылка.Метаданные();
	
	ВидОбъекта = "";
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		ВидОбъекта = "Справочник";
		ПредставлениеГруппа = "Справочники";
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		ВидОбъекта = "Документ";
		ПредставлениеГруппа = "Документы";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		ВидОбъекта = "ПланВидовХарактеристик";
		ПредставлениеГруппа = "ПланыВидовХарактеристик";
	КонецЕсли;
	
	Если ВидОбъекта <> "" Тогда
		
		СтруктураСтрок = НайтиСтрокуДерева(ВидОбъекта, ОбъектМетаданных.Имя);
		
		Если СтруктураСтрок.СтрокаВидОбъекта = Неопределено Тогда
			СтруктураСтрок.СтрокаВидОбъекта = СоздатьГруппуМетаданных(ВидОбъекта, ПредставлениеГруппа);
		КонецЕсли;
		
		Если СтруктураСтрок.СтрокаОбъектМетаданных = Неопределено Тогда
			
			СтруктураСтрок.СтрокаОбъектМетаданных = ДобавлениеМетаданных(СтруктураСтрок.СтрокаВидОбъекта,
																		 ОбъектМетаданных);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуДерева(ВидОбъекта, ИмяОбъекта)
	Результат = Новый Структура("СтрокаВидОбъекта,СтрокаОбъектМетаданных");
	ЭлементыДерева = ДеревоМетаданных.ПолучитьЭлементы();
	Для Каждого СтрокаТекущая Из ЭлементыДерева Цикл
		Если СтрокаТекущая.Данные = ВидОбъекта Тогда
			Результат.СтрокаВидОбъекта = СтрокаТекущая;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Результат.СтрокаВидОбъекта <> Неопределено Тогда
		СтрокиВидаОбъекта = Результат.СтрокаВидОбъекта.ПолучитьЭлементы();
		Для Каждого СтрокаТекущая Из СтрокиВидаОбъекта Цикл
			Если СтрокаТекущая.Данные = ИмяОбъекта Тогда
				Результат.СтрокаОбъектМетаданных = СтрокаТекущая;
				Прервать;
			КонецЕсли
			;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ФормированиеКодаПоОтмеченнымМетаданным

&НаСервере
Процедура СформироватьКодПоМетаданнымНаСервере()
	
	ТекстКод1С.Очистить();
	
	ЭлементыДерева = ДеревоМетаданных.ПолучитьЭлементы();
	Для Каждого ЭлементКласс Из ЭлементыДерева Цикл
		ЭлементыКласса = ЭлементКласс.ПолучитьЭлементы();
		Для Каждого ЭлементКласса Из ЭлементыКласса Цикл
			СформироватьКодОтмеченногоЭлементаНаСервере(ЭлементКласса);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКодОтмеченногоЭлементаНаСервере(ТекЭлемент)
	
	Если ТекЭлемент = Неопределено Или ТекЭлемент.Пометка = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстКод			 		= Новый ТекстовыйДокумент;
	ТекстСтандартныеРеквизиты 	= Новый ТекстовыйДокумент;
	ТекстРеквизиты 				= Новый ТекстовыйДокумент;
	ТекстРеквизитыТЧ			= Новый ТекстовыйДокумент;
	ТекстТабличнаяЧасть 		= Новый ТекстовыйДокумент;
	
	Родитель = ТекЭлемент.ПолучитьРодителя();
	ТекЭлементы = ТекЭлемент.ПолучитьЭлементы();
	
	КлассЭлементов	= Родитель.Данные;
	ЭлементКласса	= ТекЭлемент.Данные;
	
	НовыйОбъект			= КлассЭлементов + "Объект"; //$+ CaSH Это может быть совсем не Новый, но Объект
	СтарыйОбъект		= "Старый" + КлассЭлементов;
	СтруктураСозданияОбъекта = РеквизитФормыВЗначение("Объект").ПараметрыСтруктурыСозданияОбъекта();
	
	ТекстКод.ДобавитьСтроку(НовыйОбъект + " = " + Родитель.Представление + "." + ЭлементКласса + ""
		+ СтруктураСозданияОбъекта[КлассЭлементов]);
	ТекстКод.ДобавитьСтроку("");
	
	// Формируем текст кода
	Если ИспользоватьЗаполнитьЗначения Тогда
		
		Для Каждого ТекРеквизит Из ТекЭлементы Цикл
			
			Если ТекРеквизит.Пометка = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяРеквизита	= ТекРеквизит.Данные;
			ЭтоТЧ 			= ТекРеквизит.ТипыРеквизитов = "ТабличнаяЧасть";
			
			// Реквизиты
			Если Не ЭтоТЧ Тогда
				Если Не УчитыватьСтандартныеРеквизиты И ТекРеквизит.СтандартныйРеквизит Или УчитыватьСтандартныеРеквизиты
					И ТекЭлемент.Пометка = 1 // Если отмечены все элементы объекта, то не нужно перечислять реквизиты
				Тогда
					Продолжить;
				КонецЕсли;
				
				ТекстРеквизиты.ДобавитьСтроку(ТекРеквизит.Данные);
				
			// Табличная часть
			Иначе
				
				ЭлементыТЧ = ТекРеквизит.ПолучитьЭлементы();
				СтрокаРеквизитовТЧ	= "";
				Если ТекРеквизит.Пометка <> 1 Тогда // Если отмечены все элементы ТЧ, то не нужно перечислять реквизиты
					Для Каждого ТекРеквизитаТЧ Из ЭлементыТЧ Цикл
						Если ТекРеквизитаТЧ.Пометка > 0 Тогда
							ТекстРеквизитыТЧ.ДобавитьСтроку(ТекРеквизитаТЧ.Данные);
						КонецЕсли;
					КонецЦикла;
					
					СтрокаРеквизитовТЧ = СтрЗаменить(ТекстРеквизитыТЧ.ПолучитьТекст(), Символы.ПС, ", ");
					СтрокаРеквизитовТЧ = Лев(СтрокаРеквизитовТЧ, СтрДлина(СтрокаРеквизитовТЧ) - 2);
					СтрокаРеквизитовТЧ = ", """ + СтрокаРеквизитовТЧ + """";
					
				КонецЕсли;
				
				ТекстТабличнаяЧасть.ДобавитьСтроку("// заполняем ТЧ." + ТекРеквизит.Данные + " ("
					+ ТекРеквизит.Представление + ")");
				ТекстТабличнаяЧасть.ДобавитьСтроку("Для каждого ТекСтрока Из " + СтарыйОбъект + "." + ИмяРеквизита
					+ " Цикл");
				ТекстТабличнаяЧасть.ДобавитьСтроку("	НоваяСтрока = " + НовыйОбъект + "." + ИмяРеквизита
					+ ".Добавить();");
				ТекстТабличнаяЧасть.ДобавитьСтроку("	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока"
					+ СтрокаРеквизитовТЧ + ");");
				ТекстТабличнаяЧасть.ДобавитьСтроку("КонецЦикла;");
				
			КонецЕсли;
		КонецЦикла;
		
		СтрокаРеквизиты = "";
		Если ТекстРеквизиты.КоличествоСтрок() > 0 Тогда
			СтрокаРеквизиты = СтрЗаменить(ТекстРеквизиты.ПолучитьТекст(), Символы.ПС, ", ");
			СтрокаРеквизиты = Лев(СтрокаРеквизиты, СтрДлина(СтрокаРеквизиты) - 2);
			СтрокаРеквизиты = ", """ + СтрокаРеквизиты + """";
		КонецЕсли;
		
		ТекстКод.ДобавитьСтроку("ЗаполнитьЗначенияСвойств(" + НовыйОбъект + "," + СтарыйОбъект + СтрокаРеквизиты + ");");
		Если ТекстТабличнаяЧасть.КоличествоСтрок() > 0 Тогда
			ТекстКод.ДобавитьСтроку(ТекстТабличнаяЧасть.ПолучитьТекст());
		КонецЕсли;
		
	Иначе
		
		ТекстСтандартныеРеквизиты.ДобавитьСтроку("// заполняем Стандартные реквизиты");
		ТекстРеквизиты.ДобавитьСтроку("// заполняем Реквизиты");
		
		Для Каждого ТекРеквизит Из ТекЭлементы Цикл
			
			Если ТекРеквизит.Пометка = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоТЧ = ТекРеквизит.ТипыРеквизитов = "ТабличнаяЧасть";
			
			// Реквизиты
			Если Не ЭтоТЧ Тогда
				
				Если Не УчитыватьСтандартныеРеквизиты И ТекРеквизит.СтандартныйРеквизит Тогда
					Продолжить;
				КонецЕсли;
				
				ТекстКодаРеквизита	= "" + НовыйОбъект + "." + ТекРеквизит.Данные;
				КолВоПробелов		= ТекЭлемент.ИмяДлина - СтрДлина(ТекРеквизит.Данные);
				
				Для Сч = 0 По КолВоПробелов Цикл
					ТекстКодаРеквизита = ТекстКодаРеквизита + " ";
				КонецЦикла;
				
				ТекстКодаРеквизита = ТекстКодаРеквизита + "= Неопределено; // "
					+ ПолучитьТипыРеквизитовКомментарий(ТекРеквизит.ТипыРеквизитов);
				
				Если ТекРеквизит.СтандартныйРеквизит Тогда
					ТекстСтандартныеРеквизиты.ДобавитьСтроку(ТекстКодаРеквизита);
				Иначе
					ТекстРеквизиты.ДобавитьСтроку(ТекстКодаРеквизита);
				КонецЕсли;
				
			// Табличная часть
			Иначе
				
				ТекстРеквизитыТЧ.Очистить();
				ТекстРеквизитыТЧ.ДобавитьСтроку("	");
				ТекстРеквизитыТЧ.ДобавитьСтроку("	// заполняем Реквизиты ТЧ");
				
				ЭлементыТЧ = ТекРеквизит.ПолучитьЭлементы();
				Для Каждого РеквизитыТЧ Из ЭлементыТЧ Цикл
					
					Если РеквизитыТЧ.Пометка = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ТекстКодаРеквизита	= "	НоваяСтрока." + РеквизитыТЧ.Данные;
					КолВоПробелов		= ТекРеквизит.ИмяДлина - СтрДлина(РеквизитыТЧ.Данные);
					
					Для Сч = 0 По КолВоПробелов Цикл
						ТекстКодаРеквизита = ТекстКодаРеквизита + " ";
					КонецЦикла;
					
					ТекстКодаРеквизита = ТекстКодаРеквизита + "= Неопределено; // "
						+ ПолучитьТипыРеквизитовКомментарий(РеквизитыТЧ.ТипыРеквизитов);
						
					ТекстРеквизитыТЧ.ДобавитьСтроку(ТекстКодаРеквизита);
				КонецЦикла;
				
				ТекстТабличнаяЧасть.ДобавитьСтроку("");
				ТекстТабличнаяЧасть.ДобавитьСтроку("// заполняем ТЧ." + ТекРеквизит.Данные + " ("
					+ ТекРеквизит.Представление + ")");
				ТекстТабличнаяЧасть.ДобавитьСтроку("Для каждого ТекСтрока Из " + СтарыйОбъект + "." + ТекРеквизит.Данные
					+ " Цикл");
				ТекстТабличнаяЧасть.ДобавитьСтроку("	НоваяСтрока = " + НовыйОбъект + "." + ТекРеквизит.Данные
					+ ".Добавить();");
				ТекстТабличнаяЧасть.ДобавитьСтроку(ТекстРеквизитыТЧ.ПолучитьТекст());
				ТекстТабличнаяЧасть.ДобавитьСтроку("КонецЦикла;");
			КонецЕсли;
		КонецЦикла;
		
		Если ТекстСтандартныеРеквизиты.КоличествоСтрок() > 1 Тогда
			ТекстКод.ДобавитьСтроку(ТекстСтандартныеРеквизиты.ПолучитьТекст());
		КонецЕсли;
		
		ТекстКод.ДобавитьСтроку(ТекстРеквизиты.ПолучитьТекст());
		
		Если ТекстТабличнаяЧасть.КоличествоСтрок() > 1 Тогда
			ТекстКод.ДобавитьСтроку(ТекстТабличнаяЧасть.ПолучитьТекст());
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстКод1С.ДобавитьСтроку(ТекстКод.ПолучитьТекст());
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТипыРеквизитовКомментарий(ТипыРеквизитов)
	ТипыРеквизитовКомментарий = СтрЗаменить(ТипыРеквизитов, Символы.ПС, Символы.ПС + "			//");
	Возврат ТипыРеквизитовКомментарий;
КонецФункции

&НаСервере
Функция СоздатьГруппуМетаданных(Группа, ПредставлениеГруппа)
	НоваяГруппа = ДеревоМетаданных.ПолучитьЭлементы().Добавить();
	НоваяГруппа.Представление	= ПредставлениеГруппа;
	НоваяГруппа.Данные			= Группа;
	НоваяГруппа.Картинка		= БиблиотекаКартинок[Группа];
	
	Возврат НоваяГруппа;
КонецФункции

&НаСервере
Процедура ДобавлениеМетаданныхГруппы(Группа, ПредставлениеГруппа)
	
	ДобавляемыеМетаданные = Метаданные[ПредставлениеГруппа];
	
	НоваяГруппа = СоздатьГруппуМетаданных(Группа, ПредставлениеГруппа);
	
	Для Каждого ОбъектМетаданных Из ДобавляемыеМетаданные Цикл
		
		ДобавлениеМетаданных(НоваяГруппа, ОбъектМетаданных);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавлениеМетаданных(ГруппаДерева, ОбъектМетаданных)

	ТекЭлемент = ОбъектМетаданных;

	НовСтрока	= ГруппаДерева.ПолучитьЭлементы().Добавить();
	НовСтрока.Представление	= ТекЭлемент.Синоним;
	НовСтрока.Данные		= ТекЭлемент.Имя;
	НовСтрока.Картинка		= ГруппаДерева.Картинка;
	НовСтрока.ИмяДлина		= 0;
	
	// По стандартным реквизтам
	Для Каждого Реквизита Из ТекЭлемент.СтандартныеРеквизиты Цикл
		НовРеквизит	= НовСтрока.ПолучитьЭлементы().Добавить();
		НовРеквизит.Представление	= Реквизита.Представление(); //$* CaSH вместо ".Синоним" нужно писать ".Представление()"
		НовРеквизит.Данные			= Реквизита.Имя;
		НовРеквизит.ТипыРеквизитов	= ПолучитьТипыСтрокой(Реквизита.Тип); //$* CaSH
		НовРеквизит.СтандартныйРеквизит	= Истина;
		НовРеквизит.Картинка		= КартинкаРеквизит;

		ИмяДлина = СтрДлина(НовРеквизит.Данные);
		Если НовСтрока.ИмяДлина < ИмяДлина Тогда
			НовСтрока.ИмяДлина = ИмяДлина;
		КонецЕсли;
	КонецЦикла;
	
	// По реквизитам
	Для Каждого Реквизита Из ТекЭлемент.Реквизиты Цикл
		НовРеквизит	= НовСтрока.ПолучитьЭлементы().Добавить();
		НовРеквизит.Представление	= Реквизита.Представление(); //$* CaSH
		НовРеквизит.Данные			= Реквизита.Имя;
		НовРеквизит.ТипыРеквизитов	= ПолучитьТипыСтрокой(Реквизита.Тип); //$* CaSH
		НовРеквизит.Картинка		= КартинкаРеквизит;

		ИмяДлина = СтрДлина(НовРеквизит.Данные);
		Если НовСтрока.ИмяДлина < ИмяДлина Тогда
			НовСтрока.ИмяДлина = ИмяДлина;
		КонецЕсли;
	КонецЦикла;
	
	// По табличным частям
	Для Каждого ТабличнаяЧасть Из ТекЭлемент.ТабличныеЧасти Цикл
		НовРеквизит	= НовСтрока.ПолучитьЭлементы().Добавить();
		НовРеквизит.Представление	= ТабличнаяЧасть.Представление(); //$* CaSH
		НовРеквизит.Данные			= ТабличнаяЧасть.Имя;
		НовРеквизит.Картинка		= КартинкаТаблица;
		НовРеквизит.ТипыРеквизитов	= "ТабличнаяЧасть";
		НовРеквизит.ИмяДлина = 0;

		РеквизитыТЧ	= ТабличнаяЧасть.Реквизиты;
		Для Каждого РеквизитТЧ Из РеквизитыТЧ Цикл
			НовРеквизитТЧ	= НовРеквизит.ПолучитьЭлементы().Добавить();
			НовРеквизитТЧ.Представление	= РеквизитТЧ.Представление(); //$* CaSH
			НовРеквизитТЧ.Данные		= РеквизитТЧ.Имя;
			НовРеквизитТЧ.ТипыРеквизитов= ПолучитьТипыСтрокой(РеквизитТЧ.Тип); //$* CaSH
			НовРеквизитТЧ.Картинка		= КартинкаРеквизит;

			ИмяДлина = СтрДлина(НовРеквизитТЧ.Данные);
			Если НовРеквизит.ИмяДлина < ИмяДлина Тогда
				НовРеквизит.ИмяДлина = ИмяДлина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат НовСтрока;

КонецФункции

&НаСервере
Функция ПолучитьТипыСтрокой(Тип)

	Если ТипЗнч(Тип) = Тип("ОписаниеТипов") Тогда

		РезультатТекст = Новый ТекстовыйДокумент;

		Типы = Тип.Типы();
		//Для Каждого ТекТип Из Типы Цикл
		Инд = 0;
		Пока ВыводитьВсеТипы И Инд < Типы.Количество() Или Не ВыводитьВсеТипы И Инд = 0 Цикл
			ТекТип = Типы[Инд];
			Инд = Инд + 1;

			Если ТекТип = Тип("Строка") Тогда
				РезультатТекст.ДобавитьСтроку("Строка (" + Тип.КвалификаторыСтроки.Длина
					+ ?(Тип.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Переменная, "*", "!") + ")");
			ИначеЕсли ТекТип = Тип("Число") Тогда
				РезультатТекст.ДобавитьСтроку("Число (" + Тип.КвалификаторыЧисла.Разрядность + "."
					+ Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + ")");
			ИначеЕсли ТекТип = Тип("Дата") Тогда
				РезультатТекст.ДобавитьСтроку("Дата (" + Тип.КвалификаторыДаты.ЧастиДаты + ")");
			Иначе
				РезультатТекст.ДобавитьСтроку(ПолучитьТипСтрокой(ТекТип));
			КонецЕсли;

		КонецЦикла;

		РезультатТекст = РезультатТекст.ПолучитьТекст();
		Возврат Лев(РезультатТекст, СтрДлина(РезультатТекст) - 1);
	Иначе

		Возврат ПолучитьТипСтрокой(Тип);
	КонецЕсли;

КонецФункции

&НаСервере
Функция ПолучитьТипСтрокой(Тип)

	ТекТип = Тип;

	Если ТекТип = Тип("Булево") Тогда
		Возврат "Булево"
	ИначеЕсли
	ТекТип = Тип("Строка") Тогда
		Возврат "Строка";
	ИначеЕсли ТекТип = Тип("Число") Тогда
		Возврат "Число";
	ИначеЕсли ТекТип = Тип("Дата") Тогда
		Возврат "Дата";
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		Результат = "Справочник.";
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		Результат = "Перечисление.";
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		Результат = "Документ.";
	Иначе
		Возврат Строка(ТекТип);
	КонецЕсли;

	МетаданныеТипа = Метаданные.НайтиПоТипу(ТекТип);
	Возврат Результат + МетаданныеТипа.Имя + " (" + МетаданныеТипа.Представление() + ")";

КонецФункции

#Область ПометкаЭлементов

&НаКлиенте
Процедура ДеревоМетаданныхПометкаПриИзменении(Элемент)
	ИдСтроки = Элементы.ДеревоМетаданных.ТекущаяСтрока;
	Пометка = Элементы.ДеревоМетаданных.ТекущиеДанные.Пометка;
	Если Пометка = 2 Тогда
		Пометка = 0;
		Элементы.ДеревоМетаданных.ТекущиеДанные.Пометка = Пометка;
	КонецЕсли;
	ОтметитьВыбранныйЭлемент(ИдСтроки, Пометка);
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВыбранныйЭлемент(ИдСтроки, Пометка)
	Элемент = ДеревоМетаданных.НайтиПоИдентификатору(ИдСтроки);
	Элемент.Пометка = Пометка;
	ОтметитьДочерниеЭлементы(Элемент, Пометка);
	ОтметитьРодителейВыбранногоЭлемента(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьРодителейВыбранногоЭлемента(Элемент)

	Элемент = Элемент.ПолучитьРодителя();

	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЕстьОтмеченные = ПроверкаФлага(Элемент, Истина);
	ЕстьНЕОтмеченные = ПроверкаФлага(Элемент, Ложь);

	Если ЕстьОтмеченные И ЕстьНЕОтмеченные Тогда
		Элемент.Пометка = 2;
	ИначеЕсли ЕстьОтмеченные Тогда
		Элемент.Пометка = 1;
	Иначе
		Элемент.Пометка = 0;
	КонецЕсли;

	ОтметитьРодителейВыбранногоЭлемента(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ОтметитьДочерниеЭлементы(Элемент, Пометка)
	ЭлементыДерева = Элемент.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыДерева Цикл
		Элемент.Пометка = Пометка;
		ОтметитьДочерниеЭлементы(Элемент, Пометка);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПроверкаФлага(Элемент, Отметка = Истина)
	Результат = Ложь;
	
	ЭлементыДерева = Элемент.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.Пометка = Отметка Или Результат Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
		Результат = ПроверкаФлага(ЭлементДерева, Отметка);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура ВыполнитьКодЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьКодНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКодНаСервере()
	
	ЮТМетодыСлужебный.ВыполнитьВыражение(ТекстКод1С.ПолучитьТекст());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Если ДополнительныеПараметры = "Открытие" Тогда
			ТекстКод1С.Прочитать(Результат[0]);
		Иначе
			ТекстКод1С.Записать(Результат[0]);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьКодДвиженийНаСервере(Знач ТипКодаДляФормирования, Знач Документ, Знач Регистры)
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("ТипКода", ТипКодаДляФормирования);
	
	Возврат Обработки.ЮТГенераторКода.СформироватьКодДвижений(Документ, Регистры, ПараметрыФормирования);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьИменаРеквизитовДвижений()
	
	ТипДокумента = ТипЗнч(Движения_Документ);
	Если ТипДокумента <> Движения_ТипДокумента Тогда
		Движения_ТипДокумента = ТипДокумента;
		ИменаРегистров.Очистить();
		
		Если Движения_Документ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Регистры = ЮТМетаданные.РегистрыДвиженийДокумента(Движения_Документ);
		Для Каждого Элемент Из Регистры Цикл
			Описание = ЮТМетаданные.ОписаниеОбъектаМетаданных(Элемент.Значение);
			ИменаРегистров.Добавить(Элемент.Значение, Описание.Представление, , БиблиотекаКартинок[Описание.ОписаниеТипа.Имя]);
		КонецЦикла;
		
		ИменаРегистров.СортироватьПоПредставлению();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
