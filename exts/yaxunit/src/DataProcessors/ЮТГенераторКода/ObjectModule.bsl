//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает сформированных код по ссылкам на объекты
//
// Параметры:
//  СписокСсылокНаДанные			 - Массив Из СправочникСсылка
//									 - Массив Из ДокументСсылка
//  ПараметрыФормирования			 - Структура:
//		* ТипКода - Строка - варианты: ОсновнойКод, КонструкторОбъектаYaxunit
//  	* КодДляОбработчиковОбновления - Булево - При использовании ТипКода = "ОсновнойКод": запись объектов для обработчиков обновления 
// 
// Возвращаемое значение:
//   ТекстовыйДокумент - сформированный код по массиву ссылок 
//
Функция СформироватьКодПоСсылкамНаОбъекты(СсылкиНаОбъекты, ПараметрыФормирования) Экспорт
	
	ТекстКод1С = Новый ТекстовыйДокумент;
	
	Если ПараметрыФормирования.ТипКода = "ТаблицаMarkdownYaxunit" Тогда
		
		РезультатФормирования = СформироватьТаблицуMarkdownПоСсылкам(СсылкиНаОбъекты, ПараметрыФормирования);
		
		Возврат РезультатФормирования.ТекстКод1С;
		
	Иначе
			
		Для Каждого ЗначениеСсылка Из СсылкиНаОбъекты Цикл
			
			ПараметрыОбъектаМетаданных = ДанныеПоОбъектуМетаданных(ЗначениеСсылка);
			
			Если Не ЗначениеЗаполнено(ПараметрыОбъектаМетаданных.ВидОбъекта) Тогда
				Продолжить;
			КонецЕсли;
			
			ГотовыйКодПоСсылке = СформироватьКодПоСсылке(ПараметрыФормирования, ПараметрыОбъектаМетаданных, ЗначениеСсылка);
			
			ТекстКод1С.ДобавитьСтроку(ГотовыйКодПоСсылке.ПолучитьТекст());
			
		КонецЦикла;
		
	КонецЕсли;

	Возврат ТекстКод1С;
	
КонецФункции

Функция ПараметрыСтруктурыСозданияОбъекта() Экспорт
	
	СтруктураСозданияОбъекта = Новый Структура;
	СтруктураСозданияОбъекта.Вставить("Документ"	, ".СоздатьДокумент();");
	СтруктураСозданияОбъекта.Вставить("Справочник"	, ".СоздатьЭлемент();");
	СтруктураСозданияОбъекта.Вставить("ПланВидовХарактеристик"	, ".СоздатьЭлемент();");
	СтруктураСозданияОбъекта.Вставить("Задача"	, ".СоздатьЭлемент();");
	
	Возврат СтруктураСозданияОбъекта;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет в массив структур описание реквизита
//
// Параметры:
//  МассивРеквизитов		 - Массив Из Структура - результирующий массив приемник:
//		* Представление - Строка
//		* Данные - Строка - Имя реквизита
//		* ТипыРеквизитов - Строка
//		* СтандартныйРеквизит - Булево - Истина, если это стандартный реквизит
//		* Ширина - Число - ширина реквизита
//  Реквизит				 - ОписаниеСтандартногоРеквизита - данные из которых берется информация для заполнения 
//  ЭтоСтандартныйРеквизит	 - Булево - информация для фиксации, что это стандартный реквизит 
//
Процедура ДобавитьРеквизит(МассивРеквизитов, Реквизит, ЭтоСтандартныйРеквизит = Ложь)

	НовРеквизит = Новый Структура;
		
	НовРеквизит.Вставить("Представление", Реквизит.Представление()); // $* CaSH вместо ".Синоним" нужно писать ".Представление()"
	НовРеквизит.Вставить("Данные", 		  Реквизит.Имя);
	ШиринаРеквизита = 40;
	НовРеквизит.Вставить("ТипыРеквизитов", ПолучитьТипыСтрокой(Реквизит.Тип,, ШиринаРеквизита));
	НовРеквизит.Вставить("СтандартныйРеквизит", ЭтоСтандартныйРеквизит);
	
	ДлинаИмениКолонки = СтрДлина(Реквизит.Имя);
	ШиринаКолонки = ?(ДлинаИмениКолонки > ШиринаРеквизита, ДлинаИмениКолонки, ШиринаРеквизита);
	НовРеквизит.Вставить("Ширина", ШиринаКолонки);
	НовРеквизит.Вставить("ТипДляОписанияТипов", ПолучитьТипСтрокойИзОписанияТипов(Реквизит.Тип));
	
	МассивРеквизитов.Добавить(НовРеквизит);
	
КонецПроцедуры

Процедура ДобавитьРеквизитыТабличнойЧасти(МассивТабличныхЧастей, ТабличнаяЧасть)
	
	НовТаблЧасть = Новый Структура;

	НовТаблЧасть.Вставить("Представление", ТабличнаяЧасть.Представление()); // $* CaSH вместо ".Синоним" нужно писать ".Представление()"
	НовТаблЧасть.Вставить("Данные", 		  ТабличнаяЧасть.Имя);
	НовТаблЧасть.Вставить("ТипыРеквизитов", "ТабличнаяЧасть");
	НовТаблЧасть.Вставить("Реквизиты", Новый Массив);
	
	РеквизитыТЧ	= ТабличнаяЧасть.Реквизиты;
	Для Каждого РеквизитТЧ Из РеквизитыТЧ Цикл
		ДобавитьРеквизит(НовТаблЧасть.Реквизиты, РеквизитТЧ);
	КонецЦикла;
	
    МассивТабличныхЧастей.Добавить(НовТаблЧасть);

КонецПроцедуры

Функция ДанныеПоОбъектуМетаданных(СсылкаНаОбъект)
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("ВидОбъекта", "");
	ПараметрыОбъекта.Вставить("ОбъектМетаданныхИмя", "");
	ПараметрыОбъекта.Вставить("Реквизиты", Новый Массив);
	ПараметрыОбъекта.Вставить("ТабличныеЧасти", Новый Массив);
	ПараметрыОбъекта.Вставить("ОбъектМетаданных", "");

	ОбъектМетаданных = СсылкаНаОбъект.Метаданные();
	
	ПараметрыОбъекта.ОбъектМетаданных    = ОбъектМетаданных;
	ПараметрыОбъекта.ОбъектМетаданныхИмя = ОбъектМетаданных.Имя;
	
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		ПараметрыОбъекта.ВидОбъекта = "Справочник";
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		ПараметрыОбъекта.ВидОбъекта = "Документ";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		ПараметрыОбъекта.ВидОбъекта = "ПланВидовХарактеристик";
	Иначе
		// без обработки
	КонецЕсли;

	// По стандартным реквизитам
	Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		
		Если Реквизит.Имя = "ИмяПредопределенныхДанных"
			Или Реквизит.Имя = "Предопределенный" Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьРеквизит(ПараметрыОбъекта.Реквизиты, Реквизит, Истина);
		
	КонецЦикла;
	
	// По реквизитам
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		
		ДобавитьРеквизит(ПараметрыОбъекта.Реквизиты, Реквизит);
		
	КонецЦикла;
	
	// По табличным частям
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		
		ДобавитьРеквизитыТабличнойЧасти(ПараметрыОбъекта.ТабличныеЧасти, ТабличнаяЧасть);
		
	КонецЦикла;
	
	Возврат ПараметрыОбъекта;

КонецФункции

#Область ФормированиеКодаПоСсылке

Функция СформироватьКодПоСсылке(ПараметрыФормирования, ПараметрыОбъектаМетаданных, ЗначениеСсылка)
	
	ТекстКод			 		= Новый ТекстовыйДокумент;
	ТекстСтандартныеРеквизиты 	= Новый ТекстовыйДокумент;
	ТекстРеквизиты 				= Новый ТекстовыйДокумент;
	ТекстРеквизитыТЧ			= Новый ТекстовыйДокумент;
	ТекстТабличнаяЧасть 		= Новый ТекстовыйДокумент;
	
	Реквизиты = ПараметрыОбъектаМетаданных.Реквизиты;
	ТабличныеЧасти = ПараметрыОбъектаМетаданных.ТабличныеЧасти;
	
	ВидОбъекта			= ПараметрыОбъектаМетаданных.ВидОбъекта;
	ОбъектМетаданныхИмя	= ПараметрыОбъектаМетаданных.ОбъектМетаданныхИмя;
	
	ПутьКОбъекту 		= ВидОбъекта + "." + ОбъектМетаданныхИмя;
	
	ТекстКод.ДобавитьСтроку("");
	ТекстКод.ДобавитьСтроку(СтрШаблон(НСтр("ru = '// - Создание %1'"), ПутьКОбъекту));
	
	// 1. Код шапки
	// Пример для ТипКода = "КонструкторОбъектаYaxunit": Контрагент = ЮТест.Данные().КонструкторОбъекта("Справочник.Контрагенты")
	
	// * Вызов универсальной функции заполнения кода.
	СтрокаЗаполнения = ЗаполнитьЭлементКодаПоСсылке("ЗаполнитьКодШапкиПоСсылке", ПараметрыФормирования, ПараметрыОбъектаМетаданных, ЗначениеСсылка);
	
	ТекстКод.ДобавитьСтроку(СтрокаЗаполнения);
	
	// 2. Реквизиты
	
	Для Каждого ТекРеквизит Из Реквизиты Цикл
		
		НеОтноситсяКБазовомуПолюДляЗаполнения = ТекРеквизит.Данные <> "Наименование"
			И ТекРеквизит.Данные <> "ТипЗначения"
			И ТекРеквизит.Данные <> "Родитель";
			
		Если ТекРеквизит.СтандартныйРеквизит
			И НеОтноситсяКБазовомуПолюДляЗаполнения
			Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЗначениеСсылка[ТекРеквизит.Данные]) Тогда
			Продолжить;
		КонецЕсли;
		
		// * Вызов универсальной функции заполнения кода.
		ТекстКодаРеквизита = ЗаполнитьЭлементКодаПоСсылке("ЗаполнитьКодРеквизитаПоСсылке",
			ПараметрыФормирования, ПараметрыОбъектаМетаданных, ЗначениеСсылка, ТекРеквизит);
		
		Если ТекРеквизит.СтандартныйРеквизит Тогда
			ТекстСтандартныеРеквизиты.ДобавитьСтроку(ТекстКодаРеквизита);
		Иначе
			ТекстРеквизиты.ДобавитьСтроку(ТекстКодаРеквизита);
		КонецЕсли;
			
	КонецЦикла;
	
	Если ТекстСтандартныеРеквизиты.КоличествоСтрок() > 1 Тогда
		ТекстКод.ДобавитьСтроку(СокрП(ТекстСтандартныеРеквизиты.ПолучитьТекст()));
	КонецЕсли;
	
	ТекстКод.ДобавитьСтроку(СокрП(ТекстРеквизиты.ПолучитьТекст()));
	
	// 3. Табличная часть
	Для Каждого ТекТабличнаяЧасть Из ТабличныеЧасти Цикл
	
		Если ЗначениеСсылка[ТекТабличнаяЧасть.Данные].Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстРеквизитыТЧ.Очистить();
		
		ЭлементыТЧ = ТекТабличнаяЧасть.Реквизиты;
		
		// * Вызов универсальной функции заполнения кода.
		ТекстКодаРеквизита = ЗаполнитьЭлементКодаПоСсылке("ЗаполнитьКодШапкиТаблЧастиПоСсылке",
			ПараметрыФормирования, ПараметрыОбъектаМетаданных, ЗначениеСсылка, ТекТабличнаяЧасть);
		
		ТекстРеквизитыТЧ.ДобавитьСтроку(ТекстКодаРеквизита);

		Инд = 0;
		Для Каждого СтрокаТЧ Из ЗначениеСсылка[ТекТабличнаяЧасть.Данные] Цикл
			
			// * Вызов универсальной функции заполнения кода.
			ТекстКодаРеквизита = ЗаполнитьЭлементКодаПоСсылке("ЗаполнитьКодШапкиНовойСтрокиТаблЧастиПоСсылке",
				ПараметрыФормирования, ПараметрыОбъектаМетаданных, ЗначениеСсылка, ТекТабличнаяЧасть);

			ТекстРеквизитыТЧ.ДобавитьСтроку(ТекстКодаРеквизита);
			
			Инд = Инд + 1;
			
			Для Каждого РеквизитТЧ Из ЭлементыТЧ Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаТЧ[РеквизитТЧ.Данные]) Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыРеквизитаТабличнойЧасти = Новый Структура;
				ПараметрыРеквизитаТабличнойЧасти.Вставить("СтрокаТЧ", СтрокаТЧ);
				ПараметрыРеквизитаТабличнойЧасти.Вставить("РеквизитТЧ", РеквизитТЧ);
				// * Вызов универсальной функции заполнения кода.
				ТекстКодаРеквизита = ЗаполнитьЭлементКодаПоСсылке("ЗаполнитьКодРеквизитаТаблЧастиПоСсылке",
					ПараметрыФормирования, ПараметрыОбъектаМетаданных, ЗначениеСсылка, ТекТабличнаяЧасть, ПараметрыРеквизитаТабличнойЧасти);
			
				ТекстРеквизитыТЧ.ДобавитьСтроку(ТекстКодаРеквизита);
			КонецЦикла;
		КонецЦикла;
		
		ТекстТабличнаяЧасть.ДобавитьСтроку(СокрП(ТекстРеквизитыТЧ.ПолучитьТекст()));
	
	КонецЦикла;
	
	Если ТекстТабличнаяЧасть.КоличествоСтрок() > 1 Тогда
		ТекстКод.ДобавитьСтроку(СокрП(ТекстТабличнаяЧасть.ПолучитьТекст()));
	КонецЕсли;
	
	// 4. Результирующие действия
	// * Вызов универсальной функции заполнения кода.
	СтрокаЗаполнения = ЗаполнитьЭлементКодаПоСсылке("ЗаполнитьКодПодвалаПоСсылке", ПараметрыФормирования, ПараметрыОбъектаМетаданных, ЗначениеСсылка);
	
	ТекстКод.ДобавитьСтроку(СтрокаЗаполнения);
	
	Возврат ТекстКод;
	
КонецФункции

// Универсальная функция, которая возвращает код элемента по данными значений реквизитов
//
// Параметры:
//  ИмяНачалаФункции				 - Строка - начало вызываемой функции (пример: ЗаполнитьКодШапкиПоСсылке) 
//  ТипКода			 				 - Строка - Переданный тип кода: варианты: ОсновнойКод, КонструкторОбъектаYaxunit
//  ПараметрыОбъектаМетаданных		 - Структура - см. ДанныеПоОбъектуМетаданных()
//  ЗначениеСсылка					 - ЛюбаяСсылка
//  ТекущийРеквизит					 - Структура - см. ДобавитьРеквизит()
//									 - Неопределено
//  ПараметрыРеквизитаТабличнойЧасти - 	Структура:
//		* СтрокаТЧ - СтрокаТабличнойЧасти
//		* РеквизитТЧ - Структура - см. ДобавитьРеквизит() 
//									 - Неопределено
// 
// Возвращаемое значение:
//  Строка - сформированный код
//
Функция ЗаполнитьЭлементКодаПоСсылке(ИмяНачалаФункции, ПараметрыФормирования, ПараметрыОбъектаМетаданных, ЗначениеСсылка,
		ТекущийРеквизит = Неопределено, ПараметрыРеквизитаТабличнойЧасти = Неопределено)
		
	ОсновныеПараметры = Новый Структура;
	ОсновныеПараметры.Вставить("ПараметрыФормирования", ПараметрыФормирования);
	ОсновныеПараметры.Вставить("ПараметрыОбъектаМетаданных", ПараметрыОбъектаМетаданных);
	ОсновныеПараметры.Вставить("ЗначениеСсылка", ЗначениеСсылка);
	
	// Пример: 
	//	* ЗаполнитьКодШапкиПоСсылке_ОсновнойКод()
	//	* ЗаполнитьКодШапкиПоСсылке_КонструкторОбъектаYaxunit()
	ШаблонКодаДляВыполнения = НСтр("ru = '%1_%2(ОсновныеПараметры%3%4)'");
	ТретийПараметр = ?(ТекущийРеквизит = Неопределено, "", ", ТекущийРеквизит");
	ЧетвертыйПараметр = ?(ПараметрыРеквизитаТабличнойЧасти = Неопределено, "", ", ПараметрыРеквизитаТабличнойЧасти");
	
	ВыражениеДляВыполнения = СтрШаблон(ШаблонКодаДляВыполнения,	ИмяНачалаФункции, ПараметрыФормирования.ТипКода, ТретийПараметр, ЧетвертыйПараметр);
		
	Результат = Вычислить(ВыражениеДляВыполнения);
	
	Возврат Результат;

КонецФункции

#Область НаборФункцийИзЗаполнитьЭлементКодаПоСсылке

////////////////////////////////////////////////////////////////////////////////
// Заполнение по типу кода - ОсновнойКод

Функция ЗаполнитьКодШапкиПоСсылке_ОсновнойКод(ОсновныеПараметры) Экспорт
	
	ПараметрыОбъектаМетаданных  = ОсновныеПараметры.ПараметрыОбъектаМетаданных;
	ЗначениеСсылка 			  	= ОсновныеПараметры.ЗначениеСсылка;
	
	ВидОбъекта					= ПараметрыОбъектаМетаданных.ВидОбъекта;
	ОбъектМетаданныхИмя			= ПараметрыОбъектаМетаданных.ОбъектМетаданныхИмя;
	
	НовыйОбъект			= ВидОбъекта + "Объект";
	СправочникОбъект = ВидОбъекта + "." + ОбъектМетаданныхИмя;
	СтруктураСозданияОбъекта = ПараметрыСтруктурыСозданияОбъекта();
	
	ТекстКод = Новый ТекстовыйДокумент;
	
	ТекстКод.ДобавитьСтроку("");
	ТекстКод.ДобавитьСтроку(СтрШаблон(НСтр("ru = '// - Создание объекта %1: ""%2""'"), СправочникОбъект, ЗначениеСсылка));
	
	Если ВидОбъекта = "Документ" Тогда
		
		ТекстКод.ДобавитьСтроку(НовыйОбъект + " = " + СправочникОбъект + СтруктураСозданияОбъекта[ВидОбъекта]);
		
	Иначе
		
		ТекстСоздатьЭлементГруппу = ?(ЗначениеСсылка.ЭтоГруппа, "СоздатьГруппу()", "СоздатьЭлемент()");
		ТекстНаименование =  ПолучитьТекстЗначения(ЗначениеСсылка, "Наименование");
		ТекстСозданиеОбъекта = СтрШаблон(НСтр("ru = 'Наименование = %1;
	                                           |НайденЭлемент = Справочники.ОбъектМетаданныхИмя.НайтиПоНаименованию(Наименование, Истина);
	                                           |Если Не ЗначениеЗаполнено(НайденЭлемент) Тогда
	                                           |	СправочникОбъект = Справочники.ОбъектМетаданныхИмя.%2;
	                                           |Иначе
	                                           |	СправочникОбъект = НайденЭлемент.ПолучитьОбъект();
	                                           |КонецЕсли;'"), ТекстНаименование, ТекстСоздатьЭлементГруппу);
		
		ТекстСозданиеОбъекта = СтрЗаменить(ТекстСозданиеОбъекта, "Справочники.ОбъектМетаданныхИмя", СправочникОбъект);
		ТекстСозданиеОбъекта = СтрЗаменить(ТекстСозданиеОбъекта, "СправочникОбъект", НовыйОбъект);
		ТекстКод.ДобавитьСтроку(ТекстСозданиеОбъекта);
		
	КонецЕсли;
	
	ТекстКод.ДобавитьСтроку("");
		
	// ДатаДокумента
	Если ВидОбъекта = "Документ" Тогда
		
		ТекстКодаРеквизита	= "" + НовыйОбъект + ".Дата";
		
		ТекстКодаРеквизита = ТекстКодаРеквизита + " = ТекущаяДата();";
		ТекстКод.ДобавитьСтроку(ТекстКодаРеквизита);
				
	КонецЕсли;
	
	Возврат ТекстКод.ПолучитьТекст();

КонецФункции

Функция ЗаполнитьКодРеквизитаПоСсылке_ОсновнойКод(ОсновныеПараметры, ТекРеквизит) Экспорт
	
	ПараметрыОбъектаМетаданных  = ОсновныеПараметры.ПараметрыОбъектаМетаданных;
	ЗначениеСсылка 			  	= ОсновныеПараметры.ЗначениеСсылка;
	
	ВидОбъекта			= ПараметрыОбъектаМетаданных.ВидОбъекта;
	НовыйОбъект			= ВидОбъекта + "Объект";
	
	ПеременнаяСлева	= "" + НовыйОбъект + "." + ТекРеквизит.Данные;
	СтрокаЗаполнения = ПеременнаяСлева + " = " + ПолучитьТекстЗначения(ЗначениеСсылка, ТекРеквизит.Данные) + ";";
	
	Возврат СтрокаЗаполнения;

КонецФункции

Функция ЗаполнитьКодШапкиТаблЧастиПоСсылке_ОсновнойКод(ОсновныеПараметры, ТекТабличнаяЧасть) Экспорт
	
	ПараметрыОбъектаМетаданных  = ОсновныеПараметры.ПараметрыОбъектаМетаданных;
	
	ВидОбъекта			= ПараметрыОбъектаМетаданных.ВидОбъекта;
	НовыйОбъект			= ВидОбъекта + "Объект";
	
	СтрокаЗаполнения = "	//#" + ТекТабличнаяЧасть.Данные;
	
	НоваяСтрока = СтрШаблон(НСтр("ru = '	%1.%2.Очистить();'"), НовыйОбъект, ТекТабличнаяЧасть.Данные);
	СложениеСтрокИПереносСтроки(СтрокаЗаполнения, НоваяСтрока);
	
	Возврат СтрокаЗаполнения;

КонецФункции

Функция ЗаполнитьКодШапкиНовойСтрокиТаблЧастиПоСсылке_ОсновнойКод(ОсновныеПараметры, ТекТабличнаяЧасть) Экспорт
	
	ПараметрыОбъектаМетаданных  = ОсновныеПараметры.ПараметрыОбъектаМетаданных;
	
	ВидОбъекта			= ПараметрыОбъектаМетаданных.ВидОбъекта;
	НовыйОбъект			= ВидОбъекта + "Объект";
	
	СтрокаЗаполнения = СтрШаблон(НСтр("ru = '	НоваяСтрока = %1.%2.Добавить();'"), НовыйОбъект, ТекТабличнаяЧасть.Данные);
	
	Возврат СтрокаЗаполнения;

КонецФункции

Функция ЗаполнитьКодРеквизитаТаблЧастиПоСсылке_ОсновнойКод(ОсновныеПараметры, ТекТабличнаяЧасть, ПараметрыРеквизитаТабличнойЧасти) Экспорт
	
	СтрокаТЧ = ПараметрыРеквизитаТабличнойЧасти.СтрокаТЧ;
	РеквизитТЧ = ПараметрыРеквизитаТабличнойЧасти.РеквизитТЧ;
	
	ПеременнаяСлева	= "	НоваяСтрока." + РеквизитТЧ.Данные;
	
	СтрокаЗаполнения = ПеременнаяСлева + " = " + ПолучитьТекстЗначения(СтрокаТЧ, РеквизитТЧ.Данные) + ";";
	
	Возврат СтрокаЗаполнения;

КонецФункции

Функция ЗаполнитьКодПодвалаПоСсылке_ОсновнойКод(ОсновныеПараметры) Экспорт
	
	ПараметрыФормирования		= ОсновныеПараметры.ПараметрыФормирования;
	ПараметрыОбъектаМетаданных  = ОсновныеПараметры.ПараметрыОбъектаМетаданных;
	
	ВидОбъекта			= ПараметрыОбъектаМетаданных.ВидОбъекта;
	НовыйОбъект			= ВидОбъекта + "Объект";
	
	Если ПараметрыФормирования.КодДляОбработчиковОбновления Тогда
		СтрокаЗаполнения = СтрШаблон(НСтр("ru = '// Отключение всей бизнес-логики при записи.  Отключение механизма регистрации объектов.
                                           |ОбновлениеИнформационнойБазы.ЗаписатьДанные(%1);'"), НовыйОбъект);
		
	ИначеЕсли ВидОбъекта = "Документ" Тогда
		СтрокаЗаполнения = НовыйОбъект + ".Записать(РежимЗаписиДокумента.Проведение);";
	Иначе
		СтрокаЗаполнения = НовыйОбъект + ".Записать();";
	КонецЕсли;
	
	Возврат СтрокаЗаполнения;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение по типу кода - КонструкторОбъектаYaxunit

Функция ЗаполнитьКодШапкиПоСсылке_КонструкторОбъектаYaxunit(ОсновныеПараметры) Экспорт
	
	ПараметрыОбъектаМетаданных  = ОсновныеПараметры.ПараметрыОбъектаМетаданных;
	
	ВидОбъекта			= ПараметрыОбъектаМетаданных.ВидОбъекта;
	ОбъектМетаданныхИмя	= ПараметрыОбъектаМетаданных.ОбъектМетаданныхИмя;
	ПредставлениеОбъекта = ИдентификаторДляФормул(ПараметрыОбъектаМетаданных.ОбъектМетаданных.ПредставлениеОбъекта);
	
	ШаблонЗаполнения = НСтр("ru = '%1Ссылка = ЮТест.Данные().КонструкторОбъекта(""%2.%3"")'");
	СтрокаЗаполнения = СтрШаблон(ШаблонЗаполнения, ПредставлениеОбъекта, ВидОбъекта, ОбъектМетаданныхИмя);
	
	НоваяСтрока = НСтр("ru = '	.ФикцияОбязательныхПолей() // Автоматически заполняем обязательные поля'");	
	СложениеСтрокИПереносСтроки(СтрокаЗаполнения, НоваяСтрока);
	
	// ДатаДокумента
	Если ВидОбъекта = "Документ" Тогда
		
		НоваяСтрока = НСтр("ru = '	.Установить(""Дата"", ТекущаяДатаСеанса())'");
		СложениеСтрокИПереносСтроки(СтрокаЗаполнения, НоваяСтрока);
		
	Иначе
		
		НоваяСтрока = НСтр("ru = '	.Установить(""Наименование"", ""Тестовое значение"")'");
		
	КонецЕсли;
	
	Возврат СтрокаЗаполнения;

КонецФункции

Функция ЗаполнитьКодРеквизитаПоСсылке_КонструкторОбъектаYaxunit(ОсновныеПараметры, ТекРеквизит) Экспорт
	
	ЗначениеСсылка 			  	= ОсновныеПараметры.ЗначениеСсылка;
	
	ШаблонЗаполнения = НСтр("ru = '	.Установить(""%1"", %2) %3'");
	ДопИнфоКомментарий = "";
	ТекстЗначения = ПолучитьТекстЗначения(ЗначениеСсылка, ТекРеквизит.Данные,, ДопИнфоКомментарий);
	СтрокаЗаполнения = СтрШаблон(ШаблонЗаполнения, ТекРеквизит.Данные, ТекстЗначения, ДопИнфоКомментарий);
	
	Возврат СтрокаЗаполнения;

КонецФункции

Функция ЗаполнитьКодШапкиТаблЧастиПоСсылке_КонструкторОбъектаYaxunit(ОсновныеПараметры, ТекТабличнаяЧасть) Экспорт
	
	СтрокаЗаполнения = СтрШаблон(НСтр("ru = '		.ТабличнаяЧасть(""%1"")'"), ТекТабличнаяЧасть.Данные);
	
	Возврат СтрокаЗаполнения;

КонецФункции

Функция ЗаполнитьКодШапкиНовойСтрокиТаблЧастиПоСсылке_КонструкторОбъектаYaxunit(ОсновныеПараметры, ТекТабличнаяЧасть) Экспорт
	
	СтрокаЗаполнения = НСтр("ru = '			.ДобавитьСтроку()'");
	
	Возврат СтрокаЗаполнения;

КонецФункции

Функция ЗаполнитьКодРеквизитаТаблЧастиПоСсылке_КонструкторОбъектаYaxunit(ОсновныеПараметры, ТекТабличнаяЧасть, ПараметрыРеквизитаТабличнойЧасти) Экспорт
	
	СтрокаТЧ = ПараметрыРеквизитаТабличнойЧасти.СтрокаТЧ;
	РеквизитТЧ = ПараметрыРеквизитаТабличнойЧасти.РеквизитТЧ;
	
	ШаблонЗаполнения = НСтр("ru = '				.Установить(""%1"", %2) %3'");
	ДопИнфоКомментарий = "";
	ТекстЗначения = ПолучитьТекстЗначения(СтрокаТЧ, РеквизитТЧ.Данные,, ДопИнфоКомментарий);

	СтрокаЗаполнения = СтрШаблон(ШаблонЗаполнения, РеквизитТЧ.Данные, ТекстЗначения, ДопИнфоКомментарий);
	
	Возврат СтрокаЗаполнения;

КонецФункции

Функция ЗаполнитьКодПодвалаПоСсылке_КонструкторОбъектаYaxunit(ОсновныеПараметры) Экспорт
	
	ПараметрыОбъектаМетаданных  = ОсновныеПараметры.ПараметрыОбъектаМетаданных;
	
	ВидОбъекта			= ПараметрыОбъектаМетаданных.ВидОбъекта;
	
	Если ВидОбъекта = "Документ" Тогда
		СтрокаЗаполнения = НСтр("ru = '	.Провести() // Проводим документ и возвращаем ссылку'");	
	Иначе
		СтрокаЗаполнения = НСтр("ru = '	.Записать()'");
	КонецЕсли;
	СложениеСтрокИПереносСтроки(СтрокаЗаполнения, "	;");
	
	Возврат СтрокаЗаполнения;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение по типу кода - ТаблицыMarkdownYaxunit

Функция СформироватьТаблицуMarkdownПоСсылкам(СсылкиНаОбъекты, ПараметрыФормирования) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстКод1С", Новый ТекстовыйДокумент);
	Результат.Вставить("СтрокаТаблицMarkdown", "");
	
	// Группировка ссылок по типам.
	ГруппаДанныхПоТипам = Новый Соответствие;
	
	Для Каждого ТекСсылка Из СсылкиНаОбъекты Цикл
		
		ТипЗначенияСсылки = ТипЗнч(ТекСсылка);
		ПараметрыДанных = ГруппаДанныхПоТипам.Получить(ТипЗначенияСсылки);
		
		Если ПараметрыДанных = Неопределено Тогда
			
			ПараметрыОбъектаМетаданных = ДанныеПоОбъектуМетаданных(ТекСсылка);
			Если Не ЗначениеЗаполнено(ПараметрыОбъектаМетаданных.ВидОбъекта) Тогда
				Продолжить;
			КонецЕсли;
		
			ПараметрыДанных = Новый Структура;
			ПараметрыДанных.Вставить("МассивСсылок", Новый Массив);
			ПараметрыДанных.Вставить("ПараметрыОбъектаМетаданных", ПараметрыОбъектаМетаданных);
			
			ГруппаДанныхПоТипам.Вставить(ТипЗнч(ТекСсылка), ПараметрыДанных);
	
		КонецЕсли;
		
		ПараметрыДанных.МассивСсылок.Добавить(ТекСсылка);
	
	КонецЦикла;
	
	// Формирование блока кода Markdown по каждому типу ссылок.
	СтрокиРезультата = Новый Массив;
	СтрокиТаблицыMarkdown = Новый Массив;
	
	Для Каждого ТекЗначение Из ГруппаДанныхПоТипам Цикл
		
		Реквизиты = ТекЗначение.Значение.ПараметрыОбъектаМетаданных.Реквизиты;
		ОбъектМетаданныхИмя = ТекЗначение.Значение.ПараметрыОбъектаМетаданных.ОбъектМетаданныхИмя;
		
		СтрокиРезультата.Добавить(СтрШаблон(НСтр("ru = '// - Таблица из %1'"), ОбъектМетаданныхИмя));
	
		СтрокиРезультата.Добавить(НСтр("ru = 'ТаблицаMarkdown = НСтр(""ru = '''"));
		
		ЗаполнитьИменаКолонокMarkdown(Реквизиты, СтрокиРезультата);
		ЗаполнитьРазделительШапкиMarkdown(Реквизиты, СтрокиРезультата);
		
		СтрокиТаблицыMarkdown.Добавить(СтрШаблон(НСтр("ru = '#Область Область%1'"), ОбъектМетаданныхИмя));
		СтрокиТаблицыMarkdown.Добавить("");
		ЛитераБезОбрамленияСтроки = Ложь;
		ЗаполнитьИменаКолонокMarkdown(Реквизиты, СтрокиТаблицыMarkdown, ЛитераБезОбрамленияСтроки);
		ЗаполнитьРазделительШапкиMarkdown(Реквизиты, СтрокиТаблицыMarkdown, ЛитераБезОбрамленияСтроки);
		
		Для Каждого ТекСсылка Из ТекЗначение.Значение.МассивСсылок Цикл
			
			ЗаполнитьЗначенияКолонокMarkdown(Реквизиты, ТекСсылка, СтрокиРезультата);
			
			ЗаполнитьЗначенияКолонокMarkdown(Реквизиты, ТекСсылка, СтрокиТаблицыMarkdown, ЛитераБезОбрамленияСтроки);
			
		КонецЦикла;
		
		СтрокиРезультата.Добавить(НСтр("ru = '|''"");'"));
		СтрокиРезультата.Добавить("");
		СтрокиТаблицыMarkdown.Добавить("");
		СтрокиТаблицыMarkdown.Добавить(НСтр("ru = '#КонецОбласти'"));
		СтрокиТаблицыMarkdown.Добавить("");
		
		// Формирование описания типов.
		СтрокиРезультата.Добавить("ОписанияТипов = Новый Соответствие;");
		
		Для Каждого ТекРеквизит Из Реквизиты Цикл
			
			СтрокаЗаполнения = СтрШаблон(НСтр("ru = 'ОписанияТипов.Вставить(""%1"", Новый ОписаниеТипов(""%2""));'"),
			ТекРеквизит.Данные, ТекРеквизит.ТипДляОписанияТипов);
			СтрокиРезультата.Добавить(СтрокаЗаполнения);
				
		КонецЦикла;
			
		СтрокиРезультата.Добавить("");
		
		СтрокаЗаполнения = СтрШаблон(НСтр("ru = '// Формирование таблицы значений из MarkDown для дальнейшей обработки. 
			|Данные%1 = ЮТест.Данные().ЗагрузитьИзМакета(СокрЛП(ТаблицаMarkDown), ОписанияТипов);'") , ОбъектМетаданныхИмя);
		
		СтрокиРезультата.Добавить(СтрокаЗаполнения);
		
		СтрокиРезультата.Добавить("");
		
	КонецЦикла;
   	
	// Формирование итоговой строки результата
	СтрокаРезультата = СтрСоединить(СтрокиРезультата, Символы.ПС);
	СтрокаРезультатаТаблицыMarkdow = СтрСоединить(СтрокиТаблицыMarkdown, Символы.ПС);
	
	Результат.ТекстКод1С.УстановитьТекст(СтрокаРезультата);
	Результат.СтрокаТаблицMarkdown = СтрокаРезультатаТаблицыMarkdow;
	
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьИменаКолонокMarkdown(МассивКолонок, Результат, ОбрамлениеСтроки = Истина)
	
	ТекущаяСтрока = "|";
	
	Для Каждого Колонка Из МассивКолонок Цикл
		
		ТекущаяСтрока = ТекущаяСтрока
			+ " "
			+ ДополнитьСтроку(Колонка.Данные, Колонка.Ширина)
			+ " |";
		
	КонецЦикла;
	
	// Обрамляем кодом.
	Если ОбрамлениеСтроки Тогда
		ТекущаяСтрока = СтрШаблон(НСтр("ru = '|%1'"), ТекущаяСтрока);
	КонецЕсли;
	
	Результат.Добавить(ТекущаяСтрока);
	
КонецПроцедуры

Процедура ЗаполнитьРазделительШапкиMarkdown(МассивКолонок, Результат, ОбрамлениеСтроки = Истина)
	
	ТекущаяСтрока = "|";
	
	Для Каждого Колонка Из МассивКолонок Цикл
		
		ТекущаяСтрока = ТекущаяСтрока
			+ ДополнитьСтроку("", Колонка.Ширина + 2, "-")
			+ "|";
		
	КонецЦикла;
	
	// Обрамляем кодом.
	Если ОбрамлениеСтроки Тогда
		ТекущаяСтрока = СтрШаблон(НСтр("ru = '|%1'"), ТекущаяСтрока);
	КонецЕсли;
	
	Результат.Добавить(ТекущаяСтрока);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияКолонокMarkdown(МассивКолонок, ТекСсылка, Результат, ОбрамлениеСтроки = Истина)
	
	ТекущаяСтрока = "|";
	
	Для Каждого Колонка Из МассивКолонок Цикл
		
		ЗначениеТекущее = ТекСсылка[Колонка.Данные];
		ЗначениеДляВывода = "";
		
		Если ЗначениеТекущее <> Неопределено
			И ЮТТипыДанныхСлужебный.ЭтоСсылочныйТип(ТипЗнч(ЗначениеТекущее)) Тогда
		
			Если ЮТМетаданные.ЭтоДокумент(ЗначениеТекущее) Тогда
				ЗначениеДляВывода = ЗначениеТекущее.Номер;
			ИначеЕсли ЮТМетаданные.ЭтоСправочник(ЗначениеТекущее) Тогда
				ЗначениеДляВывода = ЗначениеТекущее.Наименование;
			Иначе
				ЗначениеДляВывода = ЗначениеТекущее;
			КонецЕсли;
			
		Иначе
			
			ЗначениеДляВывода = ЗначениеТекущее;
			
		КонецЕсли;
		
		ЗначениеДляВывода = ЭкранированиеСтроки(ЗначениеДляВывода);
			
		ТекущаяСтрока = ТекущаяСтрока
			+ " "
			+ ДополнитьСтроку(ЗначениеДляВывода, Колонка.Ширина)
			+ " |";
		
	КонецЦикла;
	
	// Обрамляем кодом.
	Если ОбрамлениеСтроки Тогда
		ТекущаяСтрока = СтрШаблон(НСтр("ru = '|%1'"), ТекущаяСтрока);
	КонецЕсли;
	
	Результат.Добавить(ТекущаяСтрока);
	
КонецПроцедуры

Функция ДополнитьСтроку(ИсходнаяСтрока, ОжидаемаяДлина, Символ = " ")
	
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
	ДополнениеСтроки = "";
	
	Для Счетчик = 1 По (ОжидаемаяДлина - ДлинаСтроки) Цикл
		ДополнениеСтроки = ДополнениеСтроки + Символ;
	КонецЦикла;
	
	Возврат "" + ИсходнаяСтрока + ДополнениеСтроки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

Функция ПолучитьТекстЗначения(ЗначениеСсылка, ИмяРеквизита, ИмяТЧ = Неопределено, ДопИнфоКомментарий = "")
	Попытка
		
		Результат = "Неопределено";
		ДопИнфоКомментарий = "";
		
		Если ИмяТЧ = Неопределено Тогда
			Значение = ЗначениеСсылка[ИмяРеквизита];
		Иначе
			Значение = ЗначениеСсылка[ИмяТЧ][ИмяРеквизита];
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Возврат Результат;
		КонецЕсли;
		
		ТекТип = ТипЗнч(Значение);
		
		Если ТекТип = Тип("Булево") Тогда
			Результат = Формат(Значение, "БЛ=Ложь; БИ=Истина");
			
		ИначеЕсли ТекТип = Тип("Строка") Тогда
			
			ЭкранированноеНаименование = ЭкранированиеСтроки(Значение);
			
			Результат = "НСтр(""ru = '" + ЭкранированноеНаименование + "'"")" ;
			
		ИначеЕсли ТекТип = Тип("Число") Тогда
			Результат = Формат(Значение, "ЧГ=;ЧРД='.'");
			
		ИначеЕсли ТекТип = Тип("Дата") Тогда
			Результат = ПолучитьТекстЗначенияДаты(Значение);
			
		ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТекТип);
			ОбъектМетаданныхПуть = "Справочники." + МетаданныеТипа.Имя;
			
			Если Значение.Предопределенный Тогда
				ШаблонЗаполнения = НСтр("ru = '%1.%2'");
				Результат = СтрШаблон(ШаблонЗаполнения, ОбъектМетаданныхПуть, Значение.ИмяПредопределенныхДанных);
				СтрокаВариантыПредопределенных = ВариантыПредопределенныхВСтроку(МетаданныеТипа.ПолучитьИменаПредопределенных(), ", ", Значение.ИмяПредопределенныхДанных);
				ДопИнфоКомментарий = ?(СтрокаВариантыПредопределенных = "", "", " // Еще варианты предопределенных: " + СтрокаВариантыПредопределенных);
			Иначе
				ЭкранированноеНаименование = СтрЗаменить(Значение.Наименование, """", """"""); // Замена одной кавычки на две
				ШаблонЗаполнения = НСтр("ru = '%1.НайтиПоНаименованию(""%2"", Истина)'");
				Результат = СтрШаблон(ШаблонЗаполнения, ОбъектМетаданныхПуть, ЭкранированноеНаименование);
				ДопИнфоКомментарий = "";
			КонецЕсли;

		ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТекТип);
			ИмяПеречисления = МетаданныеТипа.Имя;
			Индекс = Перечисления[ИмяПеречисления].Индекс(Значение);
			ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[Индекс].Имя;
			Результат = "Перечисления." + ИмяПеречисления + "." + ИмяЗначенияПеречисления;
			
			ДопИнфоКомментарий = " // Еще варианты: " + ВариантыПеречисленийВСтроку(Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления, 
				", ", ИмяЗначенияПеречисления);
			
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТекТип);
			Результат = "Документы." + МетаданныеТипа.Имя + ".НайтиПоНомеру(""" + СокрЛП(Значение.Номер) + """, " + ПолучитьТекстЗначенияДаты(Значение.Дата) + ")";
			
		ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТекТип);
			Результат = "ПланыСчетов." + МетаданныеТипа.Имя;
			
			ЕстьКод = МетаданныеТипа.ДлинаКода > 0;
			Если ЕстьКод Тогда
				Результат = Результат + ".НайтиПоКоду(""" + Значение.Код + """)";
				ДопИнфоКомментарий = " // " + Значение.Наименование;
			Иначе
				ЭкранированноеНаименование = СтрЗаменить(Значение.Наименование, """", """"""); // Замена одной кавычки на две
				Результат = Результат + ".НайтиПоНаименованию(""" + ЭкранированноеНаименование + """)";
			КонецЕсли;
			
		ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТекТип);
			Результат = "ПланыВидовХарактеристик." + МетаданныеТипа.Имя;
			
			ЕстьКод = МетаданныеТипа.ДлинаКода > 0;
			ЭкранированноеНаименование = СтрЗаменить(Значение.Наименование, """", """"""); // Замена одной кавычки на две
			Результат = Результат + ".НайтиПоНаименованию(""" + ЭкранированноеНаименование + """)";
			ДопИнфоКомментарий = "";

		ИначеЕсли ТекТип = Тип("ОписаниеТипов") Тогда
			
			Если Значение = Новый ОписаниеТипов("Булево") Тогда
			
				Результат = НСтр("ru = 'Новый ОписаниеТипов(""Булево"")'");
				
			ИначеЕсли Значение = Новый ОписаниеТипов("Число") Тогда
				
				Результат = НСтр("ru = 'Новый ОписаниеТипов(""Число"")'");
				
			ИначеЕсли Значение = Новый ОписаниеТипов("Строка") Тогда
				
				Результат = НСтр("ru = 'Новый ОписаниеТипов(""Строка"")'");
				
			Иначе
				
				Результат = "!Тип не определен!";
				
			КонецЕсли;
			
		Иначе
			
			Результат = "!Тип не определен!";
			
		КонецЕсли;
		
		Возврат Результат ;
		
	Исключение
		
		Возврат ОписаниеОшибки();
		
	КонецПопытки;
КонецФункции

Функция ПолучитьТекстЗначенияДаты(ЗначениеДата)
	Возврат "Дата(""" + Формат(ЗначениеДата, "ггггММдд ЧЧ:мм:сс") + """)";
КонецФункции

Функция ПолучитьТипыСтрокой(Тип, ВыводитьВсеТипы = Ложь, ДлинаРеквизита = 40)
	
	Если ТипЗнч(Тип) = Тип("ОписаниеТипов") Тогда
		
		РезультатТекст = Новый ТекстовыйДокумент;
		
		Типы = Тип.Типы();
		Инд = 0;
		Пока ВыводитьВсеТипы И Инд < Типы.Количество()
			ИЛИ НЕ ВыводитьВсеТипы И Инд = 0
		Цикл
			ТекТип = Типы[Инд];
			Инд = Инд + 1;
			
			Если ТекТип = Тип("Строка") Тогда
				РезультатТекст.ДобавитьСтроку("Строка (" + Тип.КвалификаторыСтроки.Длина
					+ ?(Тип.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Переменная, "*", "!") + ")");
				ДлинаРеквизита = Тип.КвалификаторыСтроки.Длина;
			ИначеЕсли ТекТип = Тип("Число") Тогда
				РезультатТекст.ДобавитьСтроку("Число (" + Тип.КвалификаторыЧисла.Разрядность + "." + Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти + ")");
				ДлинаРеквизита = Тип.КвалификаторыЧисла.Разрядность + Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти;
			ИначеЕсли ТекТип = Тип("Дата") Тогда
				РезультатТекст.ДобавитьСтроку("Дата (" + Тип.КвалификаторыДаты.ЧастиДаты + ")");
				ДлинаРеквизита = 25;
			Иначе
				РезультатТекст.ДобавитьСтроку(ПолучитьТипСтрокой(ТекТип));
				
				Если ТекТип = Тип("Булево") Тогда
					ДлинаРеквизита = 7;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		РезультатТекст = РезультатТекст.ПолучитьТекст();
		Возврат Лев(РезультатТекст, СтрДлина(РезультатТекст) - 1);
	Иначе
		
		Возврат ПолучитьТипСтрокой(Тип);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТипСтрокой(Тип)

	ТекТип = Тип;
	
	Если ТекТип = Тип("Булево") Тогда
		Возврат "Булево";
	ИначеЕсли ТекТип = Тип("Строка") Тогда
		Возврат "Строка";
	ИначеЕсли ТекТип = Тип("Число") Тогда
		Возврат "Число";
	ИначеЕсли ТекТип = Тип("Дата") Тогда
		Возврат "Дата";
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		Результат = "Справочник.";
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		Результат = "Перечисление.";
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		Результат = "Документ.";
	Иначе
		Возврат Строка(ТекТип);
	КонецЕсли;

	МетаданныеТипа = Метаданные.НайтиПоТипу(ТекТип);
	Возврат Результат + МетаданныеТипа.Имя + " (" + МетаданныеТипа.Представление() + ")";
	
КонецФункции

Функция ПолучитьТипСтрокойИзОписанияТипов(Тип)

	Результат = Неопределено;
	
	Для Каждого ТекТип Из Тип.Типы() Цикл
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекТип);
	
		Если ТекТип = Тип("Булево") Тогда
			Результат = "Булево";
		ИначеЕсли ТекТип = Тип("Строка") Тогда
			Результат =  "Строка";
		ИначеЕсли ТекТип = Тип("Число") Тогда
			Результат =  "Число";
		ИначеЕсли ТекТип = Тип("Дата") Тогда
			Результат =  "Дата";
		ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
			Результат = "СправочникСсылка." + МетаданныеТипа.Имя;
		ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
			Результат = "ПеречислениеСсылка." + МетаданныеТипа.Имя;
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
			Результат = "ДокументСсылка." + МетаданныеТипа.Имя;
		Иначе
			Результат =  Строка(ТекТип);
		КонецЕсли;
	
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Функция ЭкранированиеСтроки(Значение)
	
	ЭкранированноеНаименование = "" + Значение;
	ЭкранированноеНаименование = СтрЗаменить(ЭкранированноеНаименование, Символы.ПС, Символы.ПС + "|" );
	ЭкранированноеНаименование = СтрЗаменить(ЭкранированноеНаименование, "'", "''" );
	ЭкранированноеНаименование = СтрЗаменить(ЭкранированноеНаименование, """", """"""); // Замена одной кавычки на две
	
	Возврат ЭкранированноеНаименование;

КонецФункции

Процедура СложениеСтрокИПереносСтроки(ОсновнаяСтрока, ПрисоеденяемаяСтрока)

	ОсновнаяСтрока = ОсновнаяСтрока + Символы.ПС + ПрисоеденяемаяСтрока;
	
КонецПроцедуры

// Вычисляет значение идентификатора из строки соответствии с правилами именования переменных.
// 
// Параметры:
//  СтрокаПредставления - Строка - наименование, строка из которой необходимо получить идентификатор. 
//	Исключения - Строка - исключения, которые не нужно убирать из строки представления (через запятую). Например: (,)
//
// Возвращаемое значение:
//  Строка - идентификатор, соответствующий правилам именования идентификаторов.
//
Функция ИдентификаторДляФормул(СтрокаПредставления, Исключения = "")
	
	СпецСимволы = СпецСимволы();
	
	// Убрать спец.символы, которые указаны в исключениях.
	СписокИсключений = СтрРазделить(Исключения, ",", Истина);
	Для Каждого ТекИсключение Из СписокИсключений Цикл
		СпецСимволы = СтрЗаменить(СпецСимволы, ТекИсключение, "");
	КонецЦикла;
	
	Идентификатор = "";
	БылСпецСимвол = Ложь;
	
	Для НомСимвола = 1 По СтрДлина(СтрокаПредставления) Цикл
		
		Символ = Сред(СтрокаПредставления, НомСимвола, 1);
		
		Если СтрНайти(СпецСимволы, Символ) <> 0 Тогда
			БылСпецСимвол = Истина;
			Если Символ = "_" Тогда
				Идентификатор = Идентификатор + Символ;
			КонецЕсли;
		ИначеЕсли БылСпецСимвол
			ИЛИ НомСимвола = 1 Тогда
			БылСпецСимвол = Ложь;
			Идентификатор = Идентификатор + ВРег(Символ);
		Иначе
			Идентификатор = Идентификатор + Символ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Идентификатор;
	
КонецФункции

Функция СпецСимволы()
	Диапазоны = Новый Массив;
	Диапазоны.Добавить(Новый Структура("Мин, Макс", 0, 32));
	Диапазоны.Добавить(Новый Структура("Мин, Макс", 127, 191));
	
	СпецСимволы = " .,+,-,/,*,?,=,<,>,(,)%!@#$%&*""№:;{}[]?()\|/`~'^_";
	Для Каждого Диапазон Из Диапазоны Цикл
		Для КодСимвола = Диапазон.Мин По Диапазон.Макс Цикл
			СпецСимволы = СпецСимволы + Символ(КодСимвола);
		КонецЦикла;
	КонецЦикла;
	Возврат СпецСимволы;
КонецФункции

Функция ВариантыПредопределенныхВСтроку(МассивПредопределенных, Разделитель = ", ", ИсключаемоеЗначение = "")
	
	СтрокаРезультата = "";
	Для Каждого ТекЗначение Из МассивПредопределенных Цикл
	
		Если ТекЗначение = ИсключаемоеЗначение Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаРезультата) Тогда
			СтрокаРезультата = СтрокаРезультата + ", ";
		КонецЕсли;
		
		СтрокаРезультата = СтрокаРезультата + ТекЗначение;
	
	КонецЦикла;
	
	Возврат СтрокаРезультата;

КонецФункции

Функция ВариантыПеречисленийВСтроку(ЗначенияПеречисления, Разделитель = ", ", ИсключаемоеЗначение = "")

	СтрокаПеречислений = "";
	Для Каждого ТекЗначение Из ЗначенияПеречисления Цикл
		
		Если ТекЗначение.Имя = ИсключаемоеЗначение Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПеречислений) Тогда
			СтрокаПеречислений = СтрокаПеречислений + ", ";
		КонецЕсли;
		
		СтрокаПеречислений = СтрокаПеречислений + ТекЗначение.Имя;
	
	КонецЦикла;
	
	Возврат СтрокаПеречислений;

КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли
