//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Функция СформироватьКодДвижений(Документ, Регистры, ПараметрыФормирования) Экспорт
	
	ДанныеДвижений = Новый Соответствие();
	Для Каждого Регистр Из Регистры Цикл
		//@skip-check query-in-loop
		ДанныеРегистра = ДвиженияДокумента(Документ, Регистр);
		Если ЗначениеЗаполнено(ДанныеРегистра) Тогда
			ДанныеДвижений.Вставить(Регистр, ДанныеРегистра);
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыФормирования.ТипКода = "ТаблицаMarkdownYaxunit" Тогда
		Возврат СформироватьКодДвиженийВФрматеMarkdown(ДанныеДвижений);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьКодДвиженийВФрматеMarkdown(ДанныеДвижений)
	
	Строки = Новый Массив();
	Строки.Добавить("ПараметрыЗагрузки = ЮТест.Данные().ПараметрыЗагрузкиМакетов();");
	Строки.Добавить();
	Для Каждого Запись Из ДанныеДвижений Цикл
		Строки.Добавить("// Движения по регистру " + Запись.Ключ);
		
		СериализоватьТаблицуВMarkdown(Строки, Запись.Значение, "ДанныеТаблицы");
		Строки.Добавить();
		Строки.Добавить(СтрШаблон(
		"ЮТест.Данные().ЗагрузитьДвиженияИзМакета(Документ,
		|										 ""%1"",
		|										 ДанныеТаблицы,
		|										 ,
		|										 ПараметрыЗагрузки);", Запись.Ключ));
		
	КонецЦикла;
	
	Возврат СтрСоединить(Строки, Символы.ПС);
	
КонецФункции

#Область СериализацияВMarkdown

Процедура СериализоватьТаблицуВMarkdown(Строки, Данные, ИмяПеременной)
	
	СериализованныеДанные = Новый ТаблицаЗначений();
	Для Каждого Колонка Из Данные.Колонки Цикл
		СериализованныеДанные.Колонки.Добавить(Колонка.Имя, Новый ОписаниеТипов("Строка"), , СтрДлина(Колонка.Имя));
	КонецЦикла;
	
	Для Каждого Строка Из Данные Цикл
		
		НоваяСтрока = СериализованныеДанные.Добавить();
		Для Инд = 0 По Данные.Колонки.Количество() - 1 Цикл
			НоваяСтрока[Инд] = ЗначениеВСтрокуMarkdown(Строка[Инд]);
			СериализованныеДанные.Колонки[Инд].Ширина = Макс(СериализованныеДанные.Колонки[Инд].Ширина, СтрДлина(НоваяСтрока[Инд]));
		КонецЦикла;
		
	КонецЦикла;
	
	Строки.Добавить(ИмяПеременной + " = ");
	ЗаголовокТаблицыВMarkdown(Строки, СериализованныеДанные.Колонки, Символы.Таб);
	
	Для Каждого Строка Из СериализованныеДанные Цикл
		СтрокаТаблицыВMarkdown(Строки, Строка, СериализованныеДанные.Колонки, Символы.Таб);
	КонецЦикла;
	
	Строки[Строки.ВГраница()] = Строки[Строки.ВГраница()] + """;";
	
КонецПроцедуры

Процедура ЗаголовокТаблицыВMarkdown(Строки, Колонки, Префикс)
	
	ДанныеСтроки = Новый Массив;
	ДанныеСтроки.Добавить(Префикс + """|");
	
	Для Каждого Колонка Из Колонки Цикл
		Ячейка = СтрШаблон(" %1 |", ДополнитьСтроку(Колонка.Имя, Колонка.Ширина));
		ДанныеСтроки.Добавить(Ячейка);
	КонецЦикла;
	
	Строки.Добавить(СтрСоединить(ДанныеСтроки));
	
	// Разделитель
	ДанныеСтроки = Новый Массив;
	ДанныеСтроки.Добавить(Префикс + "||");
	
	Для Каждого Колонка Из Колонки Цикл
		Ячейка = СтрШаблон(" %1 |", ЮТСтроки.СтрокаСимволов("-", Колонка.Ширина));
		ДанныеСтроки.Добавить(Ячейка);
	КонецЦикла;
	
	Строки.Добавить(СтрСоединить(ДанныеСтроки));
	
КонецПроцедуры

Процедура СтрокаТаблицыВMarkdown(Строки, СтрокаДанных, Колонки, Префикс)
	
	ДанныеСтроки = Новый Массив;
	ДанныеСтроки.Добавить(Префикс + "||");
	
	Для Инд = 0 По Колонки.Количество() - 1 Цикл
		Ячейка = СтрШаблон(" %1 |", ДополнитьСтроку(СтрокаДанных[Инд], Колонки[Инд].Ширина));
		ДанныеСтроки.Добавить(Ячейка);
	КонецЦикла;
	
	Строки.Добавить(СтрСоединить(ДанныеСтроки));
	
КонецПроцедуры

Функция ЗначениеВСтрокуMarkdown(Значение) Экспорт
	
	Результат = "";
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекТип = ТипЗнч(Значение);
	
	Если ТекТип = Тип("Булево") Тогда
		
		Результат = Формат(Значение, "БЛ=Ложь; БИ=Истина");
		
	ИначеЕсли ТекТип = Тип("Строка") Тогда
		
		Результат = ЭкранированиеСтроки(Значение);
		
	ИначеЕсли ТекТип = Тип("Число") Тогда
		
		Результат = Формат(Значение, "ЧГ=;ЧРД='.'");
		
	ИначеЕсли ТекТип = Тип("Дата") Тогда
		
		Результат = Формат(Значение, "ДФ='гггг.ММ.дд ЧЧ:мм:сс';");
		
	ИначеЕсли ЮТТипыДанныхСлужебный.ЭтоСистемноеПеречисление(ТекТип) Тогда
		
		Результат = Строка(Значение);
		
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		
		Если Значение.Предопределенный Тогда
			Результат = Значение.ИмяПредопределенныхДанных;
		Иначе
			Результат = ЭкранированиеСтроки(СокрЛП(Значение.Наименование));
		КонецЕсли;
		
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекТип);
		ИмяПеречисления = МетаданныеТипа.Имя;
		Индекс = Перечисления[ИмяПеречисления].Индекс(Значение);
		Результат = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[Индекс].Имя;
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		
		Результат = СокрЛП(Значение.Номер);
		
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекТип);
		Результат = "ПланыСчетов." + МетаданныеТипа.Имя;
		
		ЕстьКод = МетаданныеТипа.ДлинаКода > 0;
		Если ЕстьКод Тогда
			Результат = Значение.Код;
		Иначе
			Результат = ЭкранированиеСтроки(СокрЛП(Значение.Наименование));
		КонецЕсли;
		
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		
		Результат = ЭкранированиеСтроки(СокрЛП(Значение.Наименование));
		
	Иначе
		
		Результат = "!Тип не определен!";
		
	КонецЕсли;
	
	Возврат Результат ;
	
КонецФункции

#КонецОбласти

Функция ДвиженияДокумента(Документ, ИмяРегистра)
	
	ТекстЗапроса = СтрШаблон("ВЫБРАТЬ * ИЗ %1 ГДЕ Регистратор = &Регистратор", ИмяРегистра);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Регистратор", Документ);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Удалить("Регистратор");
	Результат.Колонки.Удалить("НомерСтроки");
	Результат.Колонки.Удалить("Активность");
	
	Возврат Результат;
	
КонецФункции

Функция ДополнитьСтроку(ИсходнаяСтрока, ОжидаемаяДлина, Символ = " ")
	
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
	ДополнениеСтроки = ЮТСтроки.СтрокаСимволов(Символ, ОжидаемаяДлина - ДлинаСтроки);
	Возврат "" + ИсходнаяСтрока + ДополнениеСтроки;
	
КонецФункции

Функция ЭкранированиеСтроки(Значение)
	
	ЭкранированноеНаименование = Строка(Значение);
	ЭкранированноеНаименование = СтрЗаменить(ЭкранированноеНаименование, Символы.ПС, Символы.ПС + "|" );
	ЭкранированноеНаименование = СтрЗаменить(ЭкранированноеНаименование, "'", "''" );
	ЭкранированноеНаименование = СтрЗаменить(ЭкранированноеНаименование, """", """"""); // Замена одной кавычки на две
	
	Возврат ЭкранированноеНаименование;
	
КонецФункции

#КонецОбласти

#КонецЕсли
