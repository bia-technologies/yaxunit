//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Функция СформироватьКодДвижений(Документ, Регистры, ПараметрыФормирования) Экспорт
	
	Форматы = Форматы();
	Если ПараметрыФормирования.ТипКода = Форматы.ОсновнойКод Тогда
		ВызватьИсключение "Формирование движений для формата ""Основной код"" не поддерживается";
	КонецЕсли;
	
	ДанныеДвижений = Новый Соответствие();
	Для Каждого Регистр Из Регистры Цикл
		//@skip-check query-in-loop
		ДанныеРегистра = ДвиженияДокумента(Документ, Регистр);
		Если ЗначениеЗаполнено(ДанныеРегистра) Тогда
			ДанныеДвижений.Вставить(Регистр, ДанныеРегистра);
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыФормирования.ТипКода = Форматы.ТаблицаMarkdownYaxunit Тогда
		
		Возврат СформироватьКодДвиженийВФрматеMarkdown(Документ, ДанныеДвижений);
		
	ИначеЕсли ПараметрыФормирования.ТипКода = Форматы.КонструкторОбъектаYaxunit Тогда
		
		Возврат СформироватьКодДвиженийВФрматеКонструктора(Документ, ДанныеДвижений);
		
	Иначе
		ВызватьИсключение "Неподдерживемый формат";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Форматы()
	
	Возврат Новый Структура("ОсновнойКод, КонструкторОбъектаYaxunit, ТаблицаMarkdownYaxunit",
							"ОсновнойКод",
							"КонструкторОбъектаYaxunit",
							"ТаблицаMarkdownYaxunit");
	
КонецФункции

Функция СформироватьКодДвиженийВФрматеMarkdown(Документ, ДанныеДвижений)
	
	Строки = Новый Массив();
	Строки.Добавить("ПараметрыЗагрузки = ЮТест.Данные().ПараметрыЗагрузкиМакетов();");
	Строки.Добавить(СтрокаСозданияДокумента(Документ, "ДокументСсылка"));
	Для Каждого Запись Из ДанныеДвижений Цикл
		
		Строки.Добавить();
		Строки.Добавить("// Движения по регистру " + Запись.Ключ);
		
		СериализоватьТаблицуВMarkdown(Строки, Запись.Значение, "ДанныеТаблицы");
		
		Строки.Добавить(СтрШаблон("ЮТест.Данные().ЗагрузитьДвиженияИзМакета(ДокументСсылка, ""%1"", ДанныеТаблицы, ,ПараметрыЗагрузки);",
								  Запись.Ключ));
		
	КонецЦикла;
	
	Возврат СтрСоединить(Строки, Символы.ПС);
	
КонецФункции

Функция СформироватьКодДвиженийВФрматеКонструктора(Документ, ДанныеДвижений)
	
	Строки = Новый Массив();
	Строки.Добавить(СтрокаСозданияДокумента(Документ, "ДокументСсылка"));
	
	Для Каждого Запись Из ДанныеДвижений Цикл
		Строки.Добавить();
		Строки.Добавить("// Движения по регистру " + Запись.Ключ);
		Строки.Добавить(СтрШаблон("ЮТест.Данные().КонструкторДвижений(ДокументСсылка, ""%1"")", Запись.Ключ));
		
		Для Каждого СтрокаДвижения Из Запись.Значение Цикл
			Строки.Добавить("	.ДобавитьСтроку()");
			
			Для Каждого Колонка Из Запись.Значение.Колонки Цикл
				Значение = СтрокаДвижения[Колонка.Имя];
				Если ЗначениеЗаполнено(Значение) Тогда
					Строки.Добавить(СтрШаблон("		.Установить(""%1"", %2)",
						Колонка.Имя,
						ЗначениеВСтроку(Значение)));
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Строки.Добавить("	.Записать();");
	КонецЦикла;
	
	Возврат СтрСоединить(Строки, Символы.ПС);
	
КонецФункции

Функция СтрокаСозданияДокумента(Документ, ИмяПеременной)
	
	Описание = ЮТМетаданные.ОписаниеОбъектаМетаданных(Документ);
	Возврат СтрШаблон("%1 = ЮТест.Данные().СоздатьДокумент(""%2.%3"");", ИмяПеременной, Описание.ОписаниеТипа.ИмяКоллекции, Описание.Имя);
	
КонецФункции

#Область СериализацияВMarkdown

Процедура СериализоватьТаблицуВMarkdown(Строки, Данные, ИмяПеременной)
	
	СериализованныеДанные = Новый ТаблицаЗначений();
	Для Каждого Колонка Из Данные.Колонки Цикл
		СериализованныеДанные.Колонки.Добавить(Колонка.Имя, Новый ОписаниеТипов("Строка"), , СтрДлина(Колонка.Имя));
	КонецЦикла;
	
	Для Каждого Строка Из Данные Цикл
		
		НоваяСтрока = СериализованныеДанные.Добавить();
		Для Инд = 0 По Данные.Колонки.Количество() - 1 Цикл
			НоваяСтрока[Инд] = ЗначениеВСтрокуMarkdown(Строка[Инд]);
			СериализованныеДанные.Колонки[Инд].Ширина = Макс(СериализованныеДанные.Колонки[Инд].Ширина, СтрДлина(НоваяСтрока[Инд]));
		КонецЦикла;
		
	КонецЦикла;
	
	Строки.Добавить(ИмяПеременной + " = ");
	ЗаголовокТаблицыВMarkdown(Строки, СериализованныеДанные.Колонки, Символы.Таб);
	
	Для Каждого Строка Из СериализованныеДанные Цикл
		СтрокаТаблицыВMarkdown(Строки, Строка, СериализованныеДанные.Колонки, Символы.Таб);
	КонецЦикла;
	
	Строки[Строки.ВГраница()] = Строки[Строки.ВГраница()] + """;";
	
КонецПроцедуры

Процедура ЗаголовокТаблицыВMarkdown(Строки, Колонки, Префикс)
	
	ДанныеСтроки = Новый Массив;
	ДанныеСтроки.Добавить(Префикс + """|");
	
	Для Каждого Колонка Из Колонки Цикл
		Ячейка = СтрШаблон(" %1 |", ДополнитьСтроку(Колонка.Имя, Колонка.Ширина));
		ДанныеСтроки.Добавить(Ячейка);
	КонецЦикла;
	
	Строки.Добавить(СтрСоединить(ДанныеСтроки));
	
	// Разделитель
	ДанныеСтроки = Новый Массив;
	ДанныеСтроки.Добавить(Префикс + "||");
	
	Для Каждого Колонка Из Колонки Цикл
		Ячейка = СтрШаблон(" %1 |", ЮТСтроки.СтрокаСимволов("-", Колонка.Ширина));
		ДанныеСтроки.Добавить(Ячейка);
	КонецЦикла;
	
	Строки.Добавить(СтрСоединить(ДанныеСтроки));
	
КонецПроцедуры

Процедура СтрокаТаблицыВMarkdown(Строки, СтрокаДанных, Колонки, Префикс)
	
	ДанныеСтроки = Новый Массив;
	ДанныеСтроки.Добавить(Префикс + "||");
	
	Для Инд = 0 По Колонки.Количество() - 1 Цикл
		Ячейка = СтрШаблон(" %1 |", ДополнитьСтроку(СтрокаДанных[Инд], Колонки[Инд].Ширина));
		ДанныеСтроки.Добавить(Ячейка);
	КонецЦикла;
	
	Строки.Добавить(СтрСоединить(ДанныеСтроки));
	
КонецПроцедуры

Функция ЗначениеВСтрокуMarkdown(Значение) Экспорт
	
	Результат = "";
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекТип = ТипЗнч(Значение);
	
	Если ТекТип = Тип("Булево") Тогда
		
		Результат = Формат(Значение, "БЛ=Ложь; БИ=Истина");
		
	ИначеЕсли ТекТип = Тип("Строка") Тогда
		
		Результат = ЭкранированиеСтроки(Значение);
		
	ИначеЕсли ТекТип = Тип("Число") Тогда
		
		Результат = Формат(Значение, "ЧГ=;ЧРД='.'");
		
	ИначеЕсли ТекТип = Тип("Дата") Тогда
		
		Результат = Формат(Значение, "ДФ='гггг.ММ.дд ЧЧ:мм:сс';");
		
	ИначеЕсли ЮТТипыДанныхСлужебный.ЭтоСистемноеПеречисление(ТекТип) Тогда
		
		Результат = Строка(Значение);
		
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		
		Если Значение.Предопределенный Тогда
			Результат = Значение.ИмяПредопределенныхДанных;
		Иначе
			Результат = ЭкранированиеСтроки(СокрЛП(Значение.Наименование));
		КонецЕсли;
		
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекТип);
		ИмяПеречисления = МетаданныеТипа.Имя;
		Индекс = Перечисления[ИмяПеречисления].Индекс(Значение);
		Результат = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[Индекс].Имя;
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		
		Результат = СокрЛП(Значение.Номер);
		
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекТип);
		Результат = "ПланыСчетов." + МетаданныеТипа.Имя;
		
		ЕстьКод = МетаданныеТипа.ДлинаКода > 0;
		Если ЕстьКод Тогда
			Результат = Значение.Код;
		Иначе
			Результат = ЭкранированиеСтроки(СокрЛП(Значение.Наименование));
		КонецЕсли;
		
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		
		Результат = ЭкранированиеСтроки(СокрЛП(Значение.Наименование));
		
	Иначе
		
		Результат = "!Тип не определен!";
		
	КонецЕсли;
	
	Возврат Результат ;
	
КонецФункции

#КонецОбласти

#Область Сериализация

Функция ЗначениеВСтроку(Значение, ДопИнфоКомментарий = Неопределено) Экспорт
	
	Результат = "Неопределено";
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекТип = ТипЗнч(Значение);
	
	Если ТекТип = Тип("Булево") Тогда
		
		Результат = Формат(Значение, "БЛ=Ложь; БИ=Истина");
		
	ИначеЕсли ТекТип = Тип("Строка") Тогда
		
		ЭкранированноеНаименование = ЭкранированиеСтроки(Значение);
		
		Результат = "НСтр(""ru = '" + ЭкранированноеНаименование + "'"")" ;
		
	ИначеЕсли ТекТип = Тип("Число") Тогда
		
		Результат = Формат(Значение, "ЧГ=;ЧРД='.'");
		
	ИначеЕсли ТекТип = Тип("Дата") Тогда
		
		Результат = "'" + Формат(Значение, "ДФ='гггг.ММ.дд ЧЧ:мм:сс';") + "'";
		
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекТип);
		ОбъектМетаданныхПуть = "Справочники." + МетаданныеТипа.Имя;
		
		Если Значение.Предопределенный Тогда
			ШаблонЗаполнения = НСтр("ru = '%1.%2'");
			Результат = СтрШаблон(ШаблонЗаполнения, ОбъектМетаданныхПуть, Значение.ИмяПредопределенныхДанных);
			СтрокаВариантыПредопределенных = ВариантыПредопределенныхВСтроку(МетаданныеТипа.ПолучитьИменаПредопределенных(), ", ", Значение.ИмяПредопределенныхДанных);
			ДопИнфоКомментарий = ?(СтрокаВариантыПредопределенных = "", "", " // Еще варианты предопределенных: " + СтрокаВариантыПредопределенных);
		Иначе
			ЭкранированноеНаименование = СтрЗаменить(Значение.Наименование, """", """"""); // Замена одной кавычки на две
			ШаблонЗаполнения = НСтр("ru = '%1.НайтиПоНаименованию(""%2"", Истина)'");
			Результат = СтрШаблон(ШаблонЗаполнения, ОбъектМетаданныхПуть, ЭкранированноеНаименование);
			ДопИнфоКомментарий = "";
		КонецЕсли;

	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекТип);
		ИмяПеречисления = МетаданныеТипа.Имя;
		Индекс = Перечисления[ИмяПеречисления].Индекс(Значение);
		ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[Индекс].Имя;
		Результат = "Перечисления." + ИмяПеречисления + "." + ИмяЗначенияПеречисления;
		
		ДопИнфоКомментарий = " // Еще варианты: " + ВариантыПеречисленийВСтроку(Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления, 
			", ", ИмяЗначенияПеречисления);
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекТип);
		Результат = СтрШаблон("Документы.%1.НайтиПоНомеру(""%2"", '%3')",
							  МетаданныеТипа.Имя,
							  СокрЛП(Значение.Номер),
							  Формат(Значение.Дата, "ДФ='гггг.ММ.дд ЧЧ:мм:сс';"));
		
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекТип);
		Результат = "ПланыСчетов." + МетаданныеТипа.Имя;
		
		ЕстьКод = МетаданныеТипа.ДлинаКода > 0;
		Если ЕстьКод Тогда
			Результат = Результат + ".НайтиПоКоду(""" + Значение.Код + """)";
			ДопИнфоКомментарий = " // " + Значение.Наименование;
		Иначе
			ЭкранированноеНаименование = СтрЗаменить(Значение.Наименование, """", """"""); // Замена одной кавычки на две
			Результат = Результат + ".НайтиПоНаименованию(""" + ЭкранированноеНаименование + """)";
		КонецЕсли;
		
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТекТип) Тогда
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекТип);
		Результат = "ПланыВидовХарактеристик." + МетаданныеТипа.Имя;
		
		ЕстьКод = МетаданныеТипа.ДлинаКода > 0;
		ЭкранированноеНаименование = СтрЗаменить(Значение.Наименование, """", """"""); // Замена одной кавычки на две
		Результат = Результат + ".НайтиПоНаименованию(""" + ЭкранированноеНаименование + """)";
		ДопИнфоКомментарий = "";

	ИначеЕсли ТекТип = Тип("ОписаниеТипов") Тогда
		
		Если Значение = Новый ОписаниеТипов("Булево") Тогда
		
			Результат = НСтр("ru = 'Новый ОписаниеТипов(""Булево"")'");
			
		ИначеЕсли Значение = Новый ОписаниеТипов("Число") Тогда
			
			Результат = НСтр("ru = 'Новый ОписаниеТипов(""Число"")'");
			
		ИначеЕсли Значение = Новый ОписаниеТипов("Строка") Тогда
			
			Результат = НСтр("ru = 'Новый ОписаниеТипов(""Строка"")'");
			
		Иначе
			
			Результат = "!Тип не определен!";
			
		КонецЕсли;
		
	Иначе
		
		Результат = "!Тип не определен!";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВариантыПредопределенныхВСтроку(МассивПредопределенных, Разделитель = ", ", ИсключаемоеЗначение = "")
	
	СтрокаРезультата = "";
	Для Каждого ТекЗначение Из МассивПредопределенных Цикл
	
		Если ТекЗначение = ИсключаемоеЗначение Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаРезультата) Тогда
			СтрокаРезультата = СтрокаРезультата + ", ";
		КонецЕсли;
		
		СтрокаРезультата = СтрокаРезультата + ТекЗначение;
	
	КонецЦикла;
	
	Возврат СтрокаРезультата;

КонецФункции

Функция ВариантыПеречисленийВСтроку(ЗначенияПеречисления, Разделитель = ", ", ИсключаемоеЗначение = "")

	СтрокаПеречислений = "";
	Для Каждого ТекЗначение Из ЗначенияПеречисления Цикл
		
		Если ТекЗначение.Имя = ИсключаемоеЗначение Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПеречислений) Тогда
			СтрокаПеречислений = СтрокаПеречислений + ", ";
		КонецЕсли;
		
		СтрокаПеречислений = СтрокаПеречислений + ТекЗначение.Имя;
	
	КонецЦикла;
	
	Возврат СтрокаПеречислений;

КонецФункции

#КонецОбласти

Функция ДвиженияДокумента(Документ, ИмяРегистра)
	
	ТекстЗапроса = СтрШаблон("ВЫБРАТЬ * ИЗ %1 ГДЕ Регистратор = &Регистратор", ИмяРегистра);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Регистратор", Документ);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Удалить("Регистратор");
	Результат.Колонки.Удалить("НомерСтроки");
	Результат.Колонки.Удалить("Активность");
	
	Возврат Результат;
	
КонецФункции

Функция ДополнитьСтроку(ИсходнаяСтрока, ОжидаемаяДлина, Символ = " ")
	
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
	ДополнениеСтроки = ЮТСтроки.СтрокаСимволов(Символ, ОжидаемаяДлина - ДлинаСтроки);
	Возврат "" + ИсходнаяСтрока + ДополнениеСтроки;
	
КонецФункции

Функция ЭкранированиеСтроки(Значение)
	
	ЭкранированноеНаименование = Строка(Значение);
	ЭкранированноеНаименование = СтрЗаменить(ЭкранированноеНаименование, Символы.ПС, Символы.ПС + "|" );
	ЭкранированноеНаименование = СтрЗаменить(ЭкранированноеНаименование, "'", "''" );
	ЭкранированноеНаименование = СтрЗаменить(ЭкранированноеНаименование, """", """"""); // Замена одной кавычки на две
	
	Возврат ЭкранированноеНаименование;
	
КонецФункции

#КонецОбласти

#КонецЕсли
