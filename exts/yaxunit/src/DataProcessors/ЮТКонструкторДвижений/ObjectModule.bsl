//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2025 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Тогда

#Область ОписаниеПеременных

// см. ЮТКонструкторТестовыхДанныхСлужебный.НовыйКонтекстКонструктора
Перем Контекст;

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область УстановкаЗначение

// Добавляет новую запись в набор движений. 
// При необходимости можно выполнить установку реквизитов новой записи.
//
// Параметры:
//  ЗначенияРеквизитов - Структура - Устанавливаемые значения реквизитов новой записи (по умолчанию Неопределено)
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторДвижений - Конструктор
//
// Пример:
//  Док = ЮТест.Данные().СоздатьДокумент("Документы.ПриходТовара");
//  
//  Конструктор = ЮТест.Данные().КонструкторДвижений(Док, "ТоварныеЗапасы")
//    .ДобавитьСтроку();
Функция ДобавитьСтроку(ЗначенияРеквизитов = Неопределено) Экспорт
	
	Контекст.Данные.Добавить(Новый Структура);
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает значение реквизита текущей записи набора
//
// Параметры:
//  ИмяРеквизита - Строка - Имя реквизита записи
//  Значение - Произвольный - Значение реквизита записи
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторДвижений - Конструктор
//
// Пример:
//  Док = ЮТест.Данные().СоздатьДокумент("Документы.РасходТовара");
//  Покупатель = ЮТест.Данные().СоздатьЭлемент("Справочники.Контрагенты");
//  
//  Конструктор = ЮТест.Данные().КонструкторДвижений(Док, "Продажи");
//  Конструктор.ДобавитьСтроку()
//    .Установить("Покупатель", Покупатель);
Функция Установить(ИмяРеквизита, Значение) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.Установить(Контекст, ИмяРеквизита, Значение);
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает значения реквизитов текущей записи набора
//
// Параметры:
//  ЗначенияРеквизитов - Структура - Устанавливаемые значения реквизитов
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторДвижений - Конструктор
//
// Пример:
//  Док = ЮТест.Данные().СоздатьДокумент("Документы.УстановкаЦен");
//  Значения = Новый Структура("Товар, Цена", Товар, 1500);
//  
//  Конструктор = ЮТест.Данные().КонструкторДвижений(Док, "ЦеныТоваров");
//  Конструктор.ДобавитьСтроку()
//    .УстановитьРеквизиты(Значения);
Функция УстановитьРеквизиты(ЗначенияРеквизитов) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.УстановитьРеквизиты(Контекст, ЗначенияРеквизитов);
	Возврат ЭтотОбъект;
	
КонецФункции

// Генерирует фиктивное значение для указанного реквизита. Для ссылочных типов создает новый объект, для примитивных - случайное значение
// 
// На основании менеджера и имени реквизита вычисляется его тип, а по типу генерируется фиктивное значение.
// 
// * Для примитивных значение генерируется случайное значение
// * Для ссылочных типов создается новый объект
// * Для перечислений (в том числе системных) выбирается случайно значение перечисления
// 
// Параметры:
//  ИмяРеквизита - Строка - Имя реквизита записи
//  РеквизитыЗаполнения - Структура - Значения реквизитов заполнения создаваемого объекта базы
//                      - Неопределено
//  ОграничениеТипа - Тип, ОписаниеТипов - Испольуется для ограничения типа составного реквизита, будет сгерерировано значение указанного типа
//                  - Неопределено - Будет сгенерировано значение, на основании типа реквизита,
//                                   если реквизит составной, то будет использован случайный тип
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторДвижений - Конструктор
//
// Пример:
//  Док = ЮТест.Данные().СоздатьДокумент("Документы.ПриходТовара");
//  
//  Конструктор = ЮТест.Данные().КонструкторДвижений(Док, "ТоварныеЗапасы");
//  Конструктор.ДобавитьСтроку()
//    .Фикция("Товар");
Функция Фикция(ИмяРеквизита, РеквизитыЗаполнения = Неопределено, ОграничениеТипа = Неопределено) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.Фикция(Контекст, ИмяРеквизита, РеквизитыЗаполнения, ОграничениеТипа);
	Возврат ЭтотОбъект;
	
КонецФункции

// Генерирует фиктивные значения для нескольких реквизитов
// 
// На основании менеджера и имени реквизита вычисляется его тип, а по типу генерируется фиктивное значение.
// 
// * Для примитивных значение генерируется случайное значение
// * Для ссылочных типов создается новый объект
// * Для перечислений (в том числе системных) выбирается случайно значение перечисления
// 
// Параметры:
//  ИменаРеквизитов - Строка - Имена реквизитов записи разделенные запятыми
//                  - Массив из Строка - Имена реквизитов записи
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторДвижений - Конструктор
//
// Пример:
//  Док = ЮТест.Данные().СоздатьДокумент("Документы.РасходТовара");
//  
//  Конструктор = ЮТест.Данные().КонструкторДвижений(Док, "Продажи");
//  Конструктор.ДобавитьСтроку()
//    .ФикцияРеквизитов("Покупатель, Сумма");
Функция ФикцияРеквизитов(ИменаРеквизитов) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.ФикцияРеквизитов(Контекст, ИменаРеквизитов, Ложь);
	Возврат ЭтотОбъект;
	
КонецФункции

// Генерирует фиктивные значения только для незаполненных реквизитов
// 
// На основании менеджера и имени реквизита вычисляется его тип, а по типу генерируется фиктивное значение.
// 
// * Для примитивных значение генерируется случайное значение
// * Для ссылочных типов создается новый объект
// * Для перечислений (в том числе системных) выбирается случайно значение перечисления
// 
// Параметры:
//  ИменаРеквизитов - Строка - Имена реквизитов записи разделенные запятыми
//                  - Массив из Строка - Имена реквизитов записи
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторДвижений - Конструктор
//
// Пример:
//  Док = ЮТест.Данные().СоздатьДокумент("Документы.ПриходТовара");
//  Товар = ЮТест.Данные().СоздатьЭлемент("Справочники.Товары");
//  
//  Конструктор = ЮТест.Данные().КонструкторДвижений(Док, "ТоварныеЗапасы");
//  Конструктор.ДобавитьСтроку()
//      .Установить("Товар", Товар)
//      .ФикцияНезаполненных("Склад, Количество");
Функция ФикцияНезаполненных(ИменаРеквизитов) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.ФикцияРеквизитов(Контекст, ИменаРеквизитов, Истина);
	Возврат ЭтотОбъект;
	
КонецФункции

// Автоматически заполняет все обязательные поля регистра фиктивными значениями
// 
// На основании метаданных определяются обязательные поля (Проверка заполнения = Выдавать ошибку),
// для них генерируются и устанавливаются фиктивные значение.
// 
// * Для примитивных значение генерируется случайное значение
// * Для ссылочных типов создается новый объект
// * Для перечислений (в том числе системных) выбирается случайно значение перечисления
// 
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторДвижений - Конструктор
//
// Пример:
//  Док = ЮТест.Данные().СоздатьДокумент("Документы.РасходТовара");
//  
//  Конструктор = ЮТест.Данные().КонструкторДвижений(Док, "ТоварныеЗапасы")
//    .ДобавитьСтроку().ФикцияОбязательныхПолей();
Функция ФикцияОбязательныхПолей() Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.ФикцияОбязательныхПолей(Контекст);
	Возврат ЭтотОбъект;
	
КонецФункции

// Устанавливает дополнительное свойство набора записей
//
// Параметры:
//  ИмяСвойства - Строка - Название свойства
//  Значение - Произвольный - Значение свойства (по умолчанию Неопределено)
//
// Возвращаемое значение:
//  ОбработкаОбъект.ЮТКонструкторДвижений - Конструктор
//
// Пример:
//  Док = ЮТест.Данные().СоздатьДокумент("Документы.ПриходТовара");
//  
//  Конструктор = ЮТест.Данные().КонструкторДвижений(Док, "ТоварныеЗапасы")
//    .УстановитьДополнительноеСвойство("Источник", "Импорт");
Функция УстановитьДополнительноеСвойство(ИмяСвойства, Значение = Неопределено) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.УстановитьДополнительноеСвойство(Контекст, ИмяСвойства, Значение);
	Возврат ЭтотОбъект;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанных

// Возвращает данные текущей записи движений
//
// Возвращаемое значение:
//  Структура - Значения реквизитов текущей строки
//
// Пример:
//  Док = ЮТест.Данные().СоздатьДокумент("Документы.РасходТовара");
//  
//  Конструктор = ЮТест.Данные().КонструкторДвижений(Док, "Продажи")
//    .ДобавитьСтроку().Установить("Сумма", 5000);
//  
//  ЮТест.ОжидаетЧто(Конструктор.ДанныеСтроки().Сумма).Равно(5000);
Функция ДанныеСтроки() Экспорт
	
	Возврат ЮТКонструкторТестовыхДанныхСлужебный.ДанныеСтрокиКоллекции(Контекст);
	
КонецФункции

// Возвращает все записи движений
//
// Возвращаемое значение:
//  Массив из Структура - Все записи движений
//
// Пример:
//  Док = ЮТест.Данные().СоздатьДокумент("Документы.УстановкаЦен");
//  
//  Конструктор = ЮТест.Данные().КонструкторДвижений(Док, "ЦеныТоваров")
//    .ДобавитьСтроку().ДобавитьСтроку();
//  
//  ЮТест.ОжидаетЧто(Конструктор.Данные()).ИмеетДлину(2);
Функция Данные() Экспорт
	
	Возврат ЮТКонструкторТестовыхДанныхСлужебный.ДанныеОбъекта(Контекст);
	
КонецФункции

#КонецОбласти

// Сохраняет сформированные движения документа
//
// Параметры:
//  ОбменДаннымиЗагрузка - Булево - Записать с признаком `ОбменДанными.Загрузка = Истина`
//
// Пример:
//  Док = ЮТест.Данные().СоздатьДокумент("Документы.РасходТовара");
//  
//  Конструктор = ЮТест.Данные().КонструкторДвижений(Док, "ТоварныеЗапасы")
//    .ДобавитьСтроку().ФикцияОбязательныхПолей().Записать();
//  
//  Записи = ЮТЗапросы.ДвиженияДокумента(Док, "ТоварныеЗапасы");
//  ЮТест.ОжидаетЧто(Записи).Заполнено();
Процедура Записать(ОбменДаннымиЗагрузка = Ложь) Экспорт
	
	ЮТКонструкторТестовыхДанныхСлужебный.ЗаписатьДвиженияДокумента(Контекст, ОбменДаннымиЗагрузка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура Инициализировать(Документ, ИмяРегистра) Экспорт
	
	Контекст = ЮТКонструкторТестовыхДанныхСлужебный.НовыйКонтекстКонструктораДвижений(Документ, ИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
