//©///////////////////////////////////////////////////////////////////////////©//
//
//  Copyright 2021-2023 BIA-Technologies Limited Liability Company
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//©///////////////////////////////////////////////////////////////////////////©//

#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты
		.ДобавитьТест("Что")
		.ДобавитьТест("Метод")
		.ДобавитьТест("Свойство")
		.ДобавитьТест("НетСвойства")
		.ДобавитьТест("ИмеетСвойство")
		.ДобавитьТест("НеИмеетСвойства")
		.ДобавитьТест("ЭтоИстина")
		.ДобавитьТест("ЭтоНеИстина")
		.ДобавитьТест("ЭтоЛожь")
		.ДобавитьТест("ЭтоНеЛожь")
		.ДобавитьТест("Равно")
		.ДобавитьТест("НеРавно")
		.ДобавитьТест("Больше")
		.ДобавитьТест("БольшеИлиРавно")
		.ДобавитьТест("Меньше")
		.ДобавитьТест("МеньшеИлиРавно")
		.ДобавитьТест("Заполнено")
		.ДобавитьТест("НеЗаполнено")
		.ДобавитьТест("Существует")
		.ДобавитьТест("НеСуществует")
		.ДобавитьТест("ЭтоНеопределено")
		.ДобавитьТест("ЭтоНеНеопределено")
		.ДобавитьТест("ЭтоNull")
		.ДобавитьТест("ЭтоНеNull")
		.ДобавитьТест("ИмеетТип")
		.ДобавитьТест("НеИмеетТип")
		.ДобавитьТест("Содержит")
		.ДобавитьТест("НеСодержит")
		.ДобавитьТест("ИмеетДлину")
		.ДобавитьТест("НеИмеетДлину")
		.ДобавитьТест("ВыбрасываетИсключение")
		.ДобавитьТест("НеВыбрасываетИсключение")
		.ДобавитьСерверныйТест("СравнениеСложныхОбъектов")
		.ДобавитьТест("ФормированиеСообщения")
		.ДобавитьТест("НачинаетсяС")
		.ДобавитьТест("ЗаканчиваетсяНа")
		.ДобавитьТест("МеждуВключаяГраницы")
		.ДобавитьТест("МеждуИсключаяГраницы")
		.ДобавитьТест("МеждуВключаяНачалоГраницы")
		.ДобавитьТест("МеждуВключаяОкончаниеГраницы")
		.ДобавитьТест("ИмеетСвойстваРавные")
		.ДобавитьТест("КаждыйЭлементСодержитСвойство")
		.ДобавитьТест("КаждыйЭлементСодержитСвойствоСоЗначением")
		.ДобавитьТест("ЛюбойЭлементСодержитСвойство")
		.ДобавитьТест("ЛюбойЭлементСодержитСвойствоСоЗначением")
		
		.ДобавитьТест("СоответствуетПредикату")
		.ДобавитьТест("КаждыйЭлементСоответствуетПредикату")
		.ДобавитьТест("ЛюбойЭлементСоответствуетПредикату")
	;
	
КонецПроцедуры

Процедура Что() Экспорт
	
	ЮТУтверждения.Что(1, "Проверяемый контекст");
	
	ДанныеКонтекста = ЮТКонтекст.КонтекстПроверки();
	
	ЮТУтверждения.Что(ДанныеКонтекста, "Контекст утверждений")
		.Свойство("ПрефиксОшибки").Равно("Проверяемый контекст")
		.Свойство("ИмяМетода").Равно("");
		
КонецПроцедуры

Процедура Свойство() Экспорт
	
	// Позитивные тесты
	Объект = Новый Структура("Примитив, Объект", 1, Новый Структура("Первый, Второй", 1, 2));
	
	ЮТУтверждения.Что(Объект)
		.ИмеетТип("Структура");
		
	ДанныеКонтекста = ЮТКонтекст.КонтекстПроверки();
	ЮТУтверждения.Что(ДанныеКонтекста, "Свойство не установлено")
		.Свойство("ИмяСвойства").Равно(Неопределено);
	
	ЮТУтверждения.Что(Объект)
		.Свойство("Примитив");
	
	ДанныеКонтекста = ЮТКонтекст.КонтекстПроверки();
	ЮТУтверждения.Что(ДанныеКонтекста, "Свойство установлено")
		.Свойство("ИмяСвойства").Равно("Примитив");
	
	ЮТУтверждения.Что(Объект)
		.Свойство("Объект.Первый");
	
	ДанныеКонтекста = ЮТКонтекст.КонтекстПроверки();
	ЮТУтверждения.Что(ДанныеКонтекста, "Составное свойство")
		.Свойство("ИмяСвойства").Равно("Объект.Первый");
	
	// Негативные тесты
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Объект)
			.Свойство("ЧужоеСвойство");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Структура` содержит свойство `ЧужоеСвойство`, но это не так");
	ПроверитьДанныеОшибкиСравнения(Объект, "ЧужоеСвойство");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Объект)
			.Свойство("Примитив").Равно(2);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Структура` содержит свойство `Примитив`, которое равно `2`, но это не так");
	ПроверитьДанныеОшибкиСравнения(1, 2);
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Объект)
			.Свойство("Объект.Первый").Равно(2);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Структура` содержит свойство `Объект.Первый`, которое равно `2`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Объект)
			.Свойство("1+1").Больше(2);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Структура` содержит свойство `1+1`, но это не так.");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Объект, "Невалидный составной идентификатор")
			.Свойство("Объект.1").Больше(2);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	
	ПроверитьОшибкуУтверждения(Ошибка,
		"Невалидный составной идентификатор: ожидали, что проверяемое значение `Структура` содержит свойство `Объект.1`, но это не так.");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Объект)
			.Свойство("Объект.Нулевой").Больше(2);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Структура` содержит свойство `Объект.Нулевой`, но это не так");
	
	Объект = ЮТОбщий.ЗначениеВМассиве("1", "2", "3");
	ЮТУтверждения.Что(Объект, "Проверка элементов массива")
		.Элемент(0).Равно("1")
		.Элемент(1).Равно("2")
		.Элемент(-1).Равно("3")
		.Свойство("[00]").Равно("1")
		.Свойство("[1]").Равно("2")
		.Свойство("[-1]").Равно("3")
		.НетСвойства(3)
		.НетСвойства("[3]");
		
	Объект.Добавить(Новый Структура("Первый, Второй", 1, ЮТОбщий.ЗначениеВМассиве(2)));
	ЮТУтверждения.Что(Объект, "Проверка свойства элемента массива")
		.Свойство("[3].Первый").Равно(1)
		.Свойство("[3].Второй[-1]").Равно(2)
		.Свойство("[3].Второй[0]").Равно(2)
	
КонецПроцедуры

Процедура НетСвойства() Экспорт
	
	ВложеннаяСтруктура = Новый Структура("Строка, Число", "Строка", 123);
	ВложенноеСоответствие = Новый Соответствие();
	ВложенноеСоответствие.Вставить("Строка", "Строка");
	ВложенноеСоответствие.Вставить("Число", 234);
	ВложенноеСоответствие.Вставить(123, 456);
	Объект = Новый Структура("Структура, Соответствие", ВложеннаяСтруктура, ВложенноеСоответствие);
	
	ЮТест.ОжидаетЧто(Объект)
		.Свойство("Структура").Равно(ВложеннаяСтруктура)
		.НетСвойства("Число")
		.Равно(Объект);
		
	Попытка
		Ошибка = Неопределено;
		ЮТест.ОжидаетЧто(Объект)
			.НетСвойства("Соответствие")
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Структура` не содержит свойство `Соответствие`, но это не так.");
	
КонецПроцедуры

Процедура ИмеетСвойство() Экспорт
	
	Объект = Новый Структура("Примитив, Объект", 1, Новый Структура("Первый, Второй", 1, ЮТОбщий.ЗначениеВМассиве(2, 3)));
	
	ЮТУтверждения.Что(Объект)
		.ИмеетСвойство("Примитив")
		.ИмеетСвойство("Объект")
		.ИмеетСвойство("Объект.Первый")
		.ИмеетСвойство("Объект.Второй[0]")
		.ИмеетСвойство("Объект.Второй[1]")
		.Свойство("Объект")
			.ИмеетСвойство("Первый")
			.ИмеетСвойство("Второй[0]")
			.ИмеетСвойство("Второй[1]")
		;
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Объект)
			.ИмеетСвойство("Отсутствует")
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Структура` содержит свойство `Отсутствует`, но это не так");
	
КонецПроцедуры

Процедура НеИмеетСвойства() Экспорт
	
	Объект = Новый Структура("Примитив, Объект", 1, Новый Структура("Первый, Второй", 1, ЮТОбщий.ЗначениеВМассиве(2, 3)));
	
	ЮТУтверждения.Что(Объект)
		.НеИмеетСвойства("Первый")
		.Свойство("Объект").НеИмеетСвойства("Примитив")
		.Свойство("Примитив").НеИмеетСвойства("1")
		;
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Объект)
			.НеИмеетСвойства("Примитив")
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Структура` не содержит свойство `Примитив`, но это не так");
	
КонецПроцедуры

Процедура Метод() Экспорт
	
	ЮТУтверждения.Что(ОМ_ЮТУтверждения, "Контекст метода")
		.Метод("МетодБезИсключение");
	
	Контекст = ЮТКонтекст.КонтекстПроверки();
	ЮТУтверждения.Что(Контекст)
		.Свойство("ПрефиксОшибки").Равно("Контекст метода")
		.Свойство("ИмяМетода").Равно("МетодБезИсключение")
		.Свойство("ПараметрыМетода").Равно(Неопределено);
	
	ЮТУтверждения.Что(ОМ_ЮТУтверждения, "Контекст метода с параметрами")
		.Метод("МетодБезИсключение", Новый Массив(1));
	
	Контекст = ЮТКонтекст.КонтекстПроверки();
	ЮТУтверждения.Что(Контекст)
		.Свойство("ПрефиксОшибки").Равно("Контекст метода с параметрами")
		.Свойство("ИмяМетода").Равно("МетодБезИсключение")
		.Свойство("ПараметрыМетода").ИмеетТип("Массив")
		.Свойство("ПараметрыМетода").ИмеетДлину(1);
	
КонецПроцедуры

Процедура ЭтоИстина() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что(Истина, "Базовая проверка")
		.ЭтоИстина();
	
	// Негативные тесты
	Попытка
		ЮТУтверждения.Что(1)
			.ЭтоИстина();
		Ошибка = Неопределено;
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `1` является истиной, но это не так");
	ПроверитьДанныеОшибкиСравнения(1, Истина);
	
	Попытка
		ЮТУтверждения.Что(2)
			.ЭтоИстина();
		Ошибка = Неопределено;
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `2` является истиной, но это не так");
	
	Попытка
		ЮТУтверждения.Что("Истина")
			.ЭтоИстина();
		Ошибка = Неопределено;
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Истина` является истиной, но это не так");
	
	Попытка
		ЮТУтверждения.Что(Новый Массив())
			.ЭтоИстина();
		Ошибка = Неопределено;
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Массив` является истиной, но это не так");
	
КонецПроцедуры

Процедура ЭтоНеИстина() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что(Ложь)
		.ЭтоНеИстина();
	
	ЮТУтверждения.Что(1)
		.ЭтоНеИстина();
	
	ЮТУтверждения.Что(0)
		.ЭтоНеИстина();
	
	ЮТУтверждения.Что("Истина")
		.ЭтоНеИстина();
	
	ЮТУтверждения.Что(ОМ_ЮТУтверждения)
		.ЭтоНеИстина();
	
	// Негативные тесты
	Попытка
		ЮТУтверждения.Что(Истина)
			.ЭтоНеИстина();
		Ошибка = Неопределено;
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Да` не является истиной, но это не так");
	ПроверитьДанныеОшибкиСравнения(Истина, Истина);
	
КонецПроцедуры

Процедура ЭтоЛожь() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что(False)
		.ЭтоЛожь();
	// Негативные тесты
	Попытка
		ЮТУтверждения.Что(0)
			.ЭтоЛожь();
		Ошибка = Неопределено;
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `0` является ложью, но это не так");
	ПроверитьДанныеОшибкиСравнения(0, Ложь);
	
	Попытка
		ЮТУтверждения.Что(Истина)
			.ЭтоЛожь();
		Ошибка = Неопределено;
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Да` является ложью, но это не так");
	
	Попытка
		ЮТУтверждения.Что(2)
			.ЭтоЛожь();
		Ошибка = Неопределено;
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `2` является ложью, но это не так");
	
	Попытка
		ЮТУтверждения.Что("Ложь")
			.ЭтоЛожь();
		Ошибка = Неопределено;
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Ложь` является ложью, но это не так");
	
	Попытка
		ЮТУтверждения.Что(ОМ_ЮТУтверждения)
			.ЭтоЛожь();
		Ошибка = Неопределено;
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `ОбщийМодуль` является ложью, но это не так");
	
КонецПроцедуры

Процедура ЭтоНеЛожь() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что(Истина)
		.ЭтоНеЛожь();
	
	ЮТУтверждения.Что(1)
		.ЭтоНеЛожь();
	
	ЮТУтверждения.Что(0)
		.ЭтоНеЛожь();
	
	ЮТУтверждения.Что("Истина")
		.ЭтоНеЛожь();
	
	ЮТУтверждения.Что(ОМ_ЮТУтверждения)
		.ЭтоНеЛожь();
	
	// Негативные тесты
	Попытка
		ЮТУтверждения.Что(Ложь)
			.ЭтоНеЛожь();
		Ошибка = Неопределено;
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Нет` не является ложью, но это не так");
	ПроверитьДанныеОшибкиСравнения(Ложь, Ложь);
	
КонецПроцедуры

Процедура Равно() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что(1)
		.Равно(1);
	ЮТУтверждения.Что(Неопределено)
		.Равно(Неопределено);
	// Негативные тесты
	
	Попытка
		ЮТУтверждения.Что(1)
			.Равно(Истина);
		Ошибка = Неопределено;
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `1` равно `Да`, но это не так");
	ПроверитьДанныеОшибкиСравнения(1, Истина);
	
	Попытка
		ЮТУтверждения.Что(1)
			.Равно("Один");
		Ошибка = Неопределено;
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `1` равно `Один`, но это не так");
	
	Попытка
		ЮТУтверждения.Что(1)
			.Равно(Неопределено);
		Ошибка = Неопределено;
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `1` равно ``, но это не так");
	
КонецПроцедуры

Процедура НеРавно() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что(0)
		.НеРавно(1)
		.НеРавно(Истина)
		.НеРавно(Ложь);
	ЮТУтверждения.Что(Неопределено)
		.НеРавно(Null);
	// Негативные тесты
	
	Попытка
		ЮТУтверждения.Что(1=1)
			.НеРавно(Истина);
		Ошибка = Неопределено;
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Да` не равно `Да`, но это не так");
	ПроверитьДанныеОшибкиСравнения(Истина, Истина);
	
КонецПроцедуры

Процедура Больше() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что(10)
		.Больше(-0)
		.Больше(Ложь);
	ЮТУтверждения.Что(Истина)
		.Больше(Ложь);
	ЮТУтверждения.Что("Слово")
		.Больше("")
		.Больше("Слов")
		.Больше("А");
		
	ЮТУтверждения.Что(ТекущаяДата())
		.Больше('20200101')
		.Больше('00010101');
		
	// Негативные тесты
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(10)
			.Больше(100)
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `10` больше чем `100`, но это не так");
	ПроверитьДанныеОшибкиСравнения(10, 100);
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Истина)
			.Больше(1);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Да` больше чем `1`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Ложь)
			.Больше(Истина);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Нет` больше чем `Да`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что("Слова")
			.Больше("Слово");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Слова` больше чем `Слово`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что('20200101')
			.Больше('20210101');
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `01.01.2020 0:00:00` больше чем `01.01.2021 0:00:00`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(100)
			.Больше("")
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуИсполнения(Ошибка, "Операции сравнения на больше-меньше");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(ТекущаяДата())
			.Больше(0)
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуИсполнения(Ошибка, "Операции сравнения на больше-меньше");
	
КонецПроцедуры

Процедура БольшеИлиРавно() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что(10)
		.БольшеИлиРавно(10)
		.БольшеИлиРавно(-10)
		.БольшеИлиРавно(Ложь);
	ЮТУтверждения.Что(Истина)
		.БольшеИлиРавно(Истина)
		.БольшеИлиРавно(Ложь);
	ЮТУтверждения.Что("Слово")
		.БольшеИлиРавно("")
		.БольшеИлиРавно("Слов")
		.БольшеИлиРавно("Слово");
		
	ЮТУтверждения.Что('20200102')
		.БольшеИлиРавно('20200102')
		.БольшеИлиРавно('20200101')
		.БольшеИлиРавно('00010101');
		
	// Негативные тесты
	Попытка
		Ошибка = Неопределено;
			ЮТУтверждения.Что(10)
			.БольшеИлиРавно(100)
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `10` больше или равно `100`, но это не так");
	ПроверитьДанныеОшибкиСравнения(10, 100);
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Истина)
			.БольшеИлиРавно(2);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Да` больше или равно `2`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Ложь)
			.БольшеИлиРавно(Истина);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Нет` больше или равно `Да`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что("Слов0")
			.БольшеИлиРавно("Слов1");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Слов0` больше или равно `Слов1`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что('20200101')
			.БольшеИлиРавно('20210102');
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `01.01.2020 0:00:00` больше или равно `02.01.2021 0:00:00`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(100)
			.БольшеИлиРавно("")
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуИсполнения(Ошибка, "Операции сравнения на больше-меньше");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(ТекущаяДата())
			.БольшеИлиРавно(0)
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуИсполнения(Ошибка, "Операции сравнения на больше-меньше");
	
КонецПроцедуры

Процедура Меньше() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что(1)
		.Меньше(2);
	ЮТУтверждения.Что("А")
		.Меньше("Б")
		.Меньше("АБ");
	ЮТУтверждения.Что('20200101')
		.Меньше('22220101');
	// Негативные тесты
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(10)
			.Меньше(1);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `10` меньше чем `1`, но это не так");
	ПроверитьДанныеОшибкиСравнения(10, 1);
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(1)
			.Меньше(1);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `1` меньше чем `1`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
	ЮТУтверждения.Что("Б")
		.Меньше("Б")
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Б` меньше чем `Б`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
	ЮТУтверждения.Что("В")
		.Меньше("Б")
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `В` меньше чем `Б`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
	ЮТУтверждения.Что('20200101')
		.Меньше('20200101')
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `01.01.2020 0:00:00` меньше чем `01.01.2020 0:00:00`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
	ЮТУтверждения.Что('20200102')
		.Меньше('20200101')
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `02.01.2020 0:00:00` меньше чем `01.01.2020 0:00:00`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(ТекущаяДата())
			.Меньше(0)
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуИсполнения(Ошибка, "Операции сравнения на больше-меньше");
	
КонецПроцедуры

Процедура МеньшеИлиРавно() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что(1)
		.МеньшеИлиРавно(1)
		.МеньшеИлиРавно(2);
	ЮТУтверждения.Что("А")
		.МеньшеИлиРавно("Б")
		.МеньшеИлиРавно("А");
	ЮТУтверждения.Что('20200101')
		.МеньшеИлиРавно('20200101')
		.МеньшеИлиРавно('22220101');
	// Негативные тесты
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(10)
			.МеньшеИлиРавно(1);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `10` меньше или равно `1`, но это не так");
	ПроверитьДанныеОшибкиСравнения(10, 1);
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что("В")
			.МеньшеИлиРавно("Б")
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `В` меньше или равно `Б`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что('20200102')
			.МеньшеИлиРавно('20200101')
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `02.01.2020 0:00:00` меньше или равно `01.01.2020 0:00:00`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(ТекущаяДата())
			.МеньшеИлиРавно(0)
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуИсполнения(Ошибка, "Операции сравнения на больше-меньше");
	
КонецПроцедуры

Процедура Заполнено() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что(1)
		.Заполнено();
	ЮТУтверждения.Что("1")
		.Заполнено();
	ЮТУтверждения.Что(Ложь)
		.Заполнено();
	ЮТУтверждения.Что('00010102')
		.Заполнено();
	ЮТУтверждения.Что(Новый Структура("Ключ"))
		.Заполнено();
	ЮТУтверждения.Что(Новый Массив(1))
		.Заполнено();
	ЮТУтверждения.Что(Новый УникальныйИдентификатор())
		.Заполнено();
	// Негативные тесты
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Неопределено)
			.Заполнено();
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `` является заполненным, но это не так");
	ПроверитьДанныеОшибкиСравнения(Неопределено, Неопределено);
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(0)
			.Заполнено();
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `0` является заполненным, но это не так");
	ПроверитьДанныеОшибкиСравнения(0, Неопределено);
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Новый Массив())
			.Заполнено();
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Массив` является заполненным, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(ОМ_ЮТУтверждения)
			.Заполнено()
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуИсполнения(Ошибка, "Проверка мутабельных значений на заполненность");
	
КонецПроцедуры

Процедура НеЗаполнено() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что(0, "Проверка 0")
		.НеЗаполнено();
	ЮТУтверждения.Что("", "Проверка пустой строки")
		.НеЗаполнено();
	ЮТУтверждения.Что(" ", "Проверка пробельной строки")
		.НеЗаполнено();
	ЮТУтверждения.Что(Неопределено, "Проверка неопределено")
		.НеЗаполнено();
	ЮТУтверждения.Что(Null, "Проверка Null")
		.НеЗаполнено();
	ЮТУтверждения.Что('00010101')
		.НеЗаполнено();
	ЮТУтверждения.Что(Новый Структура(), "Проверка Структура")
		.НеЗаполнено();
	ЮТУтверждения.Что(Новый Массив(), "Проверка Массив")
		.НеЗаполнено();
	ЮТУтверждения.Что(Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"), "Проверка УникальныйИдентификатор")
		.НеЗаполнено();
	// Негативные тесты
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Ложь)
			.НеЗаполнено();
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Нет` не является заполненным, но это не так");
	ПроверитьДанныеОшибкиСравнения(Ложь, Неопределено);
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(1)
			.НеЗаполнено();
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `1` не является заполненным, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(ОМ_ЮТУтверждения)
			.НеЗаполнено()
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуИсполнения(Ошибка, "Проверка мутабельных значений на заполненность");

КонецПроцедуры

Процедура Существует() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что("", "Пустая строка")
		.Существует();
	ЮТУтверждения.Что(0, "Нуль")
		.Существует();
	ЮТУтверждения.Что(Ложь, "Ложь")
		.Существует();
	// Негативные тесты
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Неопределено)
			.Существует();
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `` существует, но это не так");
	ПроверитьДанныеОшибкиСравнения(Неопределено, Неопределено);
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Null)
			.Существует();
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `` существует, но это не так");
	ПроверитьДанныеОшибкиСравнения(Null, Неопределено);
	
КонецПроцедуры

Процедура НеСуществует() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что(Неопределено, "Проверка неопределено")
		.НеСуществует();
	ЮТУтверждения.Что(Null, "Проверка Null")
		.НеСуществует();
	
	// Негативные тесты
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что("", "Пустая строка")
			.НеСуществует();
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Пустая строка: ожидали, что проверяемое значение `` не существует, но это не так");
	ПроверитьДанныеОшибкиСравнения("", Неопределено);
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(0, "Нуль")
			.НеСуществует();
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Нуль: ожидали, что проверяемое значение `0` не существует, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Ложь, "Ложь")
			.НеСуществует();
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ложь: ожидали, что проверяемое значение `Нет` не существует, но это не так");
	
КонецПроцедуры

Процедура ЭтоНеопределено() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что(Неопределено)
		.ЭтоНеопределено();
	
	// Негативные тесты
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Null)
			.ЭтоНеопределено();
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `` является неопределено, но это не так");
	ПроверитьДанныеОшибкиСравнения(Null, Неопределено);
		
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что("", "Пустая строка")
			.ЭтоНеопределено();
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Пустая строка: ожидали, что проверяемое значение `` является неопределено, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(0, "Нуль")
			.ЭтоНеопределено();
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Нуль: ожидали, что проверяемое значение `0` является неопределено, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Ложь, "Ложь")
			.ЭтоНеопределено();
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ложь: ожидали, что проверяемое значение `Нет` является неопределено, но это не так");
	
КонецПроцедуры

Процедура ЭтоНеНеопределено() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что("", "Пустая строка")
		.ЭтоНеНеопределено();
	ЮТУтверждения.Что(0, "Нуль")
		.ЭтоНеНеопределено();
	ЮТУтверждения.Что(Ложь, "Ложь")
		.ЭтоНеНеопределено();
	// Негативные тесты
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Неопределено)
			.ЭтоНеНеопределено();
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `` не является неопределено, но это не так");
	ПроверитьДанныеОшибкиСравнения(Неопределено, Неопределено);
	
КонецПроцедуры

Процедура ЭтоNull() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что(Null)
		.ЭтоNull();
	
	// Негативные тесты
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Неопределено)
			.ЭтоNull();
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `` является null, но это не так");
	ПроверитьДанныеОшибкиСравнения(Неопределено, Null);
	
КонецПроцедуры

Процедура ЭтоНеNull() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что(Неопределено)
		.ЭтоНеNull();
	
	// Негативные тесты
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Null)
			.ЭтоНеNull();
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `` не является null, но это не так");
	ПроверитьДанныеОшибкиСравнения(Null, Null);

КонецПроцедуры

Процедура ИмеетТип() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что(Неопределено)
		.ИмеетТип(Тип("Неопределено"));
	
	ЮТУтверждения.Что(Неопределено)
		.ИмеетТип("Неопределено");
	
	// Негативные тесты
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Null)
			.ИмеетТип("Неопределено");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `` имеет тип `Не определено`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(1)
			.ИмеетТип("Строка");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `1` имеет тип `Строка`, но это не так");
	ПроверитьДанныеОшибкиСравнения(Тип("Число"), Тип("Строка"));
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Неопределено)
			.ИмеетТип(Неопределено);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуИсполнения(Ошибка, "Не верный тип ожидаемого значения (`Не определено`), должен быть `Строка, Тип, Описание типов`");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Неопределено)
			.ИмеетТип("1+1");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуИсполнения(Ошибка, "Тип не определен");
	
КонецПроцедуры

Процедура НеИмеетТип() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что(Неопределено)
		.НеИмеетТип(Тип("Null"));
	
	ЮТУтверждения.Что(Неопределено)
		.НеИмеетТип("Null");
	ЮТУтверждения.Что(1)
		.НеИмеетТип("Неопределено");
	
	// Негативные тесты
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(1)
			.НеИмеетТип("Число");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `1` не имеет тип `Число`, но это не так");
	ПроверитьДанныеОшибкиСравнения(Тип("Число"), Тип("Число"));
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Неопределено)
			.НеИмеетТип(Неопределено);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуИсполнения(Ошибка, "Не верный тип ожидаемого значения (`Не определено`), должен быть `Строка, Тип, Описание типов`");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Неопределено)
			.НеИмеетТип("1+1");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуИсполнения(Ошибка, "Тип не определен");
	
КонецПроцедуры

Процедура Содержит() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что("123321")
		.Содержит(1)
		.Содержит(123)
		.Содержит("1")
		.Содержит("21");
	ЮТУтверждения.Что(ЮТОбщий.ЗначениеВМассиве("1", "2"))
		.Содержит("1");
	ЮТУтверждения.Что(Новый ФиксированныйМассив(ЮТОбщий.ЗначениеВМассиве("1", "2")))
		.Содержит("1")
		.Содержит("2");
	ЮТУтверждения.Что(Новый Структура("Ключ", "1"))
		.Содержит("1");
	ЮТУтверждения.Что(Новый ФиксированнаяСтруктура(Новый Структура("Ключ", "1")))
		.Содержит("1");
	
	Соответствие = Новый Соответствие();
	Соответствие.Вставить(1, "1");
	ЮТУтверждения.Что(Соответствие)
		.Содержит("1");
	ЮТУтверждения.Что(Новый ФиксированноеСоответствие(Соответствие))
		.Содержит("1");
		
	Список = Новый СписокЗначений();
	Список.Добавить("1", "2");
	ЮТУтверждения.Что(Список)
		.Содержит("1");
	
	ЮТУтверждения.Что("321Массив")
		.Содержит(Новый Массив());
	// Негативные тесты
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что("123321")
			.Содержит("1+1");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `123321` содержит `1+1`, но это не так");
	ПроверитьДанныеОшибкиСравнения("123321", "1+1");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Новый ФиксированныйМассив(ЮТОбщий.ЗначениеВМассиве("1", "2")))
			.Содержит("1+1");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `ФиксированныйМассив` содержит `1+1`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Неопределено)
			.Содержит("1+1");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуИсполнения(Ошибка, "Тип проверяемого значения `Не определено` не обрабатывается утверждением");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что("321")
			.Содержит(Новый Массив());
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `321` содержит `Массив`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Новый Структура("Ключ", "1"))
			.Содержит(1);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `Структура` содержит `1`, но это не так");
	
КонецПроцедуры

Процедура НеСодержит() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что("123321", "Строка")
		.НеСодержит("0")
		.НеСодержит(Новый Структура);
	ЮТУтверждения.Что(ЮТОбщий.ЗначениеВМассиве("1", "2"), "Массив")
		.НеСодержит(1)
		.НеСодержит("3");
	ЮТУтверждения.Что(Новый ФиксированныйМассив(ЮТОбщий.ЗначениеВМассиве("1", "2")), "ФиксированныйМассив")
		.НеСодержит(1)
		.НеСодержит("3");
	ЮТУтверждения.Что(Новый Структура("Ключ", "1"), "Структура")
		.НеСодержит(1);
	ЮТУтверждения.Что(Новый ФиксированнаяСтруктура(Новый Структура("Ключ", "1")), "ФиксированнаяСтруктура")
		.НеСодержит("Ключ")
		.НеСодержит(1)
		.НеСодержит("2");
	
	Соответствие = Новый Соответствие();
	Соответствие.Вставить(1, "1");
	ЮТУтверждения.Что(Соответствие)
		.НеСодержит(1)
		.НеСодержит("2");
	ЮТУтверждения.Что(Новый ФиксированноеСоответствие(Соответствие))
		.НеСодержит(1)
		.НеСодержит("2");
		
	Список = Новый СписокЗначений();
	Список.Добавить("1", "2");
	ЮТУтверждения.Что(Список)
		.НеСодержит("2");
	
	// Негативные тесты
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что("123321", "Проверка поиска строки")
			.НеСодержит("123");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Проверка поиска строки: ожидали, что проверяемое значение `123321` не содержит `123`, но это не так");
	ПроверитьДанныеОшибкиСравнения("123321", "123");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что("123321", "Проверка поиска числа")
			.НеСодержит(123);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Проверка поиска числа: ожидали, что проверяемое значение `123321` не содержит `123`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Новый ФиксированныйМассив(ЮТОбщий.ЗначениеВМассиве("1", "2")))
			.НеСодержит("1");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `ФиксированныйМассив` не содержит `1`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Неопределено)
			.НеСодержит("1+1");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуИсполнения(Ошибка, "Тип проверяемого значения `Не определено` не обрабатывается утверждением");
	
КонецПроцедуры

Процедура ИмеетДлину() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что("123", "Строка")
		.ИмеетДлину(3);
	ЮТУтверждения.Что(Новый Массив(50), "Массив")
		.ИмеетДлину(50);
	ЮТУтверждения.Что(Новый Структура("а, б, в"), "Структура")
		.ИмеетДлину(3);
	ЮТУтверждения.Что(Новый ФиксированныйМассив(Новый Массив(50)), "ФиксированныйМассив")
		.ИмеетДлину(50);
	ЮТУтверждения.Что(Новый ФиксированнаяСтруктура(Новый Структура("а, б, в")), "ФиксированнаяСтруктура")
		.ИмеетДлину(3);
	Соответствие = Новый Соответствие();
	Соответствие.Вставить(1);
	Соответствие.Вставить(5);
	Соответствие.Вставить("5");
	Соответствие.Вставить("6");
	ЮТУтверждения.Что(Соответствие, "Соответствие")
		.ИмеетДлину(4);
	ЮТУтверждения.Что(Новый ФиксированноеСоответствие(Соответствие), "ФиксированноеСоответствие")
		.ИмеетДлину(4);
	Список = Новый СписокЗначений();
	Список.ЗагрузитьЗначения(Новый Массив(13));
	ЮТУтверждения.Что(Список, "СписокЗначений")
		.ИмеетДлину(13);
	
	// Негативные тесты
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что("123")
			.ИмеетДлину(123);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `123` имеет длину (размер) `123`, но это не так");
	ПроверитьДанныеОшибкиСравнения(3, 123);
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Новый Массив(16), "Массив")
			.ИмеетДлину(1);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Массив: ожидали, что проверяемое значение `Массив` имеет длину (размер) `1`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(ТекущаяДата(), "Дата")
			.ИмеетДлину(1);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуИсполнения(Ошибка, "Дата: Тип проверяемого значения `Дата` не обрабатывается утверждением");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что("Дата")
			.ИмеетДлину(ТекущаяДата());
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуИсполнения(Ошибка, "Не верный тип ожидаемого значения (`Дата`), должен быть `Число`");
	
КонецПроцедуры

Процедура НеИмеетДлину() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что("123", "Строка")
		.НеИмеетДлину(1);
	ЮТУтверждения.Что(Новый Массив(50), "Массив")
		.НеИмеетДлину(1);
	ЮТУтверждения.Что(Новый Структура("а, б, в"), "Структура")
		.НеИмеетДлину(1);
	ЮТУтверждения.Что(Новый ФиксированныйМассив(Новый Массив(50)), "ФиксированныйМассив")
		.НеИмеетДлину(1);
	ЮТУтверждения.Что(Новый ФиксированнаяСтруктура(Новый Структура("а, б, в")), "ФиксированнаяСтруктура")
		.НеИмеетДлину(4);
	Соответствие = Новый Соответствие();
	Соответствие.Вставить(1);
	Соответствие.Вставить(5);
	Соответствие.Вставить("6");
	ЮТУтверждения.Что(Соответствие, "Соответствие")
		.НеИмеетДлину(4);
	ЮТУтверждения.Что(Новый ФиксированноеСоответствие(Соответствие), "ФиксированноеСоответствие")
		.НеИмеетДлину(6);
	Список = Новый СписокЗначений();
	Список.ЗагрузитьЗначения(Новый Массив(13));
	ЮТУтверждения.Что(Список, "СписокЗначений")
		.НеИмеетДлину(3);
	
	// Негативные тесты
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что("123")
			.НеИмеетДлину(3);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `123` не имеет длину (размер) `3`, но это не так");
	ПроверитьДанныеОшибкиСравнения(3, 3);
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Новый Массив(16), "Массив")
			.НеИмеетДлину(16);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Массив: ожидали, что проверяемое значение `Массив` не имеет длину (размер) `16`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(ТекущаяДата(), "Дата")
			.НеИмеетДлину(1);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуИсполнения(Ошибка, "Дата: Тип проверяемого значения `Дата` не обрабатывается утверждением");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что("Дата")
			.НеИмеетДлину(ТекущаяДата());
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуИсполнения(Ошибка, "Не верный тип ожидаемого значения (`Дата`), должен быть `Число`");
	
КонецПроцедуры

Процедура ВыбрасываетИсключение() Экспорт
	
	ЮТУтверждения.Что(ОМ_ЮТУтверждения)
		.Метод("МетодИсключение", ЮТОбщий.ЗначениеВМассиве("Исключение", 2))
		.ВыбрасываетИсключение("Слишком много фактических параметров");
	ЮТУтверждения.Что(ОМ_ЮТУтверждения)
		.Метод("МетодИсключение", ЮТОбщий.ЗначениеВМассиве("Исключение"))
		.ВыбрасываетИсключение("Исключение");
	ЮТУтверждения.Что(ОМ_ЮТУтверждения)
		.Метод("МетодБезИсключение")
		.ВыбрасываетИсключение("Недостаточно фактических параметров");
	ЮТУтверждения.Что(ОМ_ЮТУтверждения)
		.Метод("ПроверитьОшибкуУтверждения")
		.ВыбрасываетИсключение("1");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(ОМ_ЮТУтверждения)
			.Метод("МетодБезИсключение", Новый Массив(1))
			.ВыбрасываетИсключение("Исключение");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что метод `МетодБезИсключение` вызовет исключение `Исключение`, но это не так");
	ПроверитьДанныеОшибкиСравнения(Неопределено, "Исключение");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(ОМ_ЮТУтверждения)
			.Метод("МетодБезИсключение")
			.ВыбрасываетИсключение("Исключение");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что метод `МетодБезИсключение` вызовет исключение `Исключение`, но получили");
	ПроверитьОшибкуУтверждения(Ошибка, "Недостаточно фактических параметров");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(ОМ_ЮТУтверждения)
			.Метод("МетодБезИсключение", 1)
			.ВыбрасываетИсключение("Исключение");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуИсполнения(Ошибка, "Не верный тип параметров метода (`Число`), должен быть `Массив`");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(ОМ_ЮТУтверждения)
			.ВыбрасываетИсключение("Исключение");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуИсполнения(Ошибка, "ИмяМетода не заполнено в контексте. Воспользуйтесь предварительно методом интерфейса `Метод(ИмяМетода)`");
	
КонецПроцедуры

Процедура НеВыбрасываетИсключение() Экспорт
	
	// Позитивные тесты
	ЮТУтверждения.Что(ОМ_ЮТУтверждения)
		.Метод("МетодБезИсключение", ЮТОбщий.ЗначениеВМассиве("Исключение"))
		.НеВыбрасываетИсключение()
		.НеВыбрасываетИсключение("Ожидаемое исключение");
	
	ЮТУтверждения.Что(ОМ_ЮТУтверждения)
		.Метод("МетодИсключение", ЮТОбщий.ЗначениеВМассиве("Исключение"))
		.НеВыбрасываетИсключение("Ожидаемое исключение");
	
	// Негативные тесты
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(ОМ_ЮТУтверждения)
			.Метод("МетодИсключение", ЮТОбщий.ЗначениеВМассиве("Ожидаемое исключение"))
			.НеВыбрасываетИсключение("исключение");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что метод `МетодИсключение` не вызовет исключение `исключение`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(ОМ_ЮТУтверждения)
			.Метод("МетодБезИсключение")
			.НеВыбрасываетИсключение();
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что метод `МетодБезИсключение` не вызовет исключение, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(ОМ_ЮТУтверждения)
			.Метод("МетодБезИсключение", 1)
			.НеВыбрасываетИсключение("Исключение");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуИсполнения(Ошибка, "Не верный тип параметров метода (`Число`), должен быть `Массив`");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(ОМ_ЮТУтверждения)
			.НеВыбрасываетИсключение("Исключение");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуИсполнения(Ошибка, "ИмяМетода не заполнено в контексте. Воспользуйтесь предварительно методом интерфейса `Метод(ИмяМетода)`");

КонецПроцедуры

#Если Сервер Тогда
Процедура СравнениеСложныхОбъектов() Экспорт
	
	Варианты = Новый Массив();
	МассивЗначений = ЮТОбщий.ЗначениеВМассиве(1, "2");
	Варианты.Добавить(Новый Структура("Значение, Описание", Новый Структура("Поле1, Поле2, Коллекция", 1, "2", МассивЗначений), "Структура с массивом"));
	Варианты.Добавить(Новый Структура("Значение, Описание", Новый Структура("Поле1, Поле2", 1, "2"), "Структура примитивов"));
	Варианты.Добавить(Новый Структура("Значение, Описание", МассивЗначений, "Массив примитивов"));
	Варианты.Добавить(Новый Структура("Значение, Описание", ВидДвиженияБухгалтерии.Дебет, "Системное перечисление"));
	
	Для Каждого Вариант Из Варианты Цикл
		
		Проверяемое = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(Вариант.Значение));
		ЮТУтверждения.Что(Вариант.Значение, Вариант.Описание)
			.Равно(Проверяемое);
		
	КонецЦикла;
	
КонецПроцедуры
#КонецЕсли

Процедура ФормированиеСообщения() Экспорт
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(1, "Число")
			.Равно(2, "равно двум");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Число равно двум: ожидали, что проверяемое значение `1` равно `2`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(1)
			.Равно(2, "Число равно двум");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Число равно двум: ожидали, что проверяемое значение `1` равно `2`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(1, "Число равно двум")
			.Равно(2);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Число равно двум: ожидали, что проверяемое значение `1` равно `2`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(1)
			.Равно(2);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "Ожидали, что проверяемое значение `1` равно `2`, но это не так");
	
КонецПроцедуры

Процедура НачинаетсяС() Экспорт
	
	ЮТУтверждения.Что("Ризоватовский сельсовет").НачинаетсяС("Ризоватовский");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что("Ризоватовский сельсовет").НачинаетсяС("ризоватовский");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка,
		"Ожидали, что проверяемое значение `Ризоватовский сельсовет` начинается с `ризоватовский`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что("").НачинаетсяС("ризоватовский");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка,
		"Ожидали, что проверяемое значение `` начинается с `ризоватовский`, но это не так");
	
	Варианты = ЮТест.Варианты("ПроверяемоеЗначение, СтрокаПоиска, ОжидаемаяОшибка")
		.Добавить("Ризоватовский сельсовет", "", "Ожидали, что ожидаемое значение заполнено, но это не так")
		.Добавить(111, "1", "Не верный тип проверяемого значения (`Число`), должен быть `Строка`")
		.Добавить("111", 1, "Не верный тип ожидаемого значения (`Число`), должен быть `Строка`")
		.СписокВариантов();
	
	Для Каждого Вариант Из Варианты Цикл
		Попытка
			Ошибка = Неопределено;
			ЮТУтверждения.Что(Вариант.ПроверяемоеЗначение).НачинаетсяС(Вариант.СтрокаПоиска);
		Исключение
			Ошибка = ИнформацияОбОшибке();
		КонецПопытки;
		ПроверитьОшибкуИсполнения(Ошибка, Вариант.ОжидаемаяОшибка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаканчиваетсяНа() Экспорт
	
	ЮТУтверждения.Что("Ризоватовский сельсовет").ЗаканчиваетсяНа("сельсовет");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что("Ризоватовский сельсовет").ЗаканчиваетсяНа("Сельсовет");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка,
		"Ожидали, что проверяемое значение `Ризоватовский сельсовет` заканчивается на `Сельсовет`, но это не так");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что("").ЗаканчиваетсяНа("сельсовет");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка,
		"Ожидали, что проверяемое значение `` заканчивается на `сельсовет`, но это не так");
	
	Варианты = ЮТест.Варианты("ПроверяемоеЗначение, СтрокаПоиска, ОжидаемаяОшибка")
		.Добавить("Ризоватовский сельсовет", "", "Ожидали, что ожидаемое значение заполнено, но это не так")
		.Добавить(111, "1", "Не верный тип проверяемого значения (`Число`), должен быть `Строка`")
		.Добавить("111", 1, "Не верный тип ожидаемого значения (`Число`), должен быть `Строка`")
		.СписокВариантов();
	
	Для Каждого Вариант Из Варианты Цикл
		Попытка
			Ошибка = Неопределено;
			ЮТУтверждения.Что(Вариант.ПроверяемоеЗначение).ЗаканчиваетсяНа(Вариант.СтрокаПоиска);
		Исключение
			Ошибка = ИнформацияОбОшибке();
		КонецПопытки;
		ПроверитьОшибкуИсполнения(Ошибка, Вариант.ОжидаемаяОшибка);
	КонецЦикла;
	
КонецПроцедуры

Процедура МеждуВключаяГраницы() Экспорт
	
	Варианты = ЮТест.Варианты("ПроверяемоеЗначение, ЛеваяГраница, ПраваяГраница")
		.Добавить(10, 0, 20)
		.Добавить(10, 10, 20)
		.Добавить(10, 10, 10)
		.Добавить("10", "10", "20")
		.Добавить('20200101', '20200101', '20200101')
		.СписокВариантов();
	
	Для Каждого Вариант Из Варианты Цикл
		
		ЮТУтверждения.Что(Вариант.ПроверяемоеЗначение).МеждуВключаяГраницы(Вариант.ЛеваяГраница, Вариант.ПраваяГраница);
		
	КонецЦикла;
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(10).МеждуВключаяГраницы(5, 9);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка,
		"Ожидали, что проверяемое значение `10` находится в интервале [5; 9], но это не так");
	
	Варианты = ЮТест.Варианты("ПроверяемоеЗначение, ЛеваяГраница, ПраваяГраница, ОжидаемаяОшибка")
		.Добавить(10, "0", 10, "Не верный тип левой границы интервала (`Строка`), должен быть `Число`")
		.Добавить(10, 0, "10", "Не верный тип правой границы интервала (`Строка`), должен быть `Число`")
		.Добавить(10, 20, 0, "Не корректно задан интервал, левая граница (20) не должна быть больше правой (0)")
		.СписокВариантов();
	
	Для Каждого Вариант Из Варианты Цикл
		Попытка
			Ошибка = Неопределено;
			ЮТУтверждения.Что(Вариант.ПроверяемоеЗначение)
				.МеждуВключаяГраницы(Вариант.ЛеваяГраница, Вариант.ПраваяГраница);
		Исключение
			Ошибка = ИнформацияОбОшибке();
		КонецПопытки;
		ПроверитьОшибкуИсполнения(Ошибка, Вариант.ОжидаемаяОшибка);
	КонецЦикла;
	
КонецПроцедуры

Процедура МеждуИсключаяГраницы() Экспорт
	
	Варианты = ЮТест.Варианты("ПроверяемоеЗначение, ЛеваяГраница, ПраваяГраница")
		.Добавить(10, 0, 20)
		.Добавить("11", "10", "20")
		.Добавить('20200102', '20200101', '20200103')
		.СписокВариантов();
	
	Для Каждого Вариант Из Варианты Цикл
		
		ЮТУтверждения.Что(Вариант.ПроверяемоеЗначение).МеждуИсключаяГраницы(Вариант.ЛеваяГраница, Вариант.ПраваяГраница);
		
	КонецЦикла;
	
	Варианты = ЮТест.Варианты("ПроверяемоеЗначение, ЛеваяГраница, ПраваяГраница, ОжидаемаяОшибка")
		.Добавить(10, 5, 9, "Ожидали, что проверяемое значение `10` находится в интервале (5; 9), но это не так")
		.Добавить(10, 10, 20, "Ожидали, что проверяемое значение `10` находится в интервале (10; 20), но это не так")
		.Добавить(10, 0, 10, "Ожидали, что проверяемое значение `10` находится в интервале (0; 10), но это не так")
		.СписокВариантов();
	
	Для Каждого Вариант Из Варианты Цикл
		Попытка
			Ошибка = Неопределено;
			ЮТУтверждения.Что(Вариант.ПроверяемоеЗначение)
				.МеждуИсключаяГраницы(Вариант.ЛеваяГраница, Вариант.ПраваяГраница);
		Исключение
			Ошибка = ИнформацияОбОшибке();
		КонецПопытки;
		ПроверитьОшибкуУтверждения(Ошибка, Вариант.ОжидаемаяОшибка);
	КонецЦикла;
	
КонецПроцедуры

Процедура МеждуВключаяНачалоГраницы() Экспорт
	
	Варианты = ЮТест.Варианты("ПроверяемоеЗначение, ЛеваяГраница, ПраваяГраница")
		.Добавить(10, 0, 20)
		.Добавить(10, 10, 20)
		.Добавить("11", "10", "20")
		.Добавить('20200102', '20200101', '20200103')
		.СписокВариантов();
	
	Для Каждого Вариант Из Варианты Цикл
		ЮТУтверждения.Что(Вариант.ПроверяемоеЗначение).МеждуВключаяНачалоГраницы(Вариант.ЛеваяГраница, Вариант.ПраваяГраница);
	КонецЦикла;
	
	Варианты = ЮТест.Варианты("ПроверяемоеЗначение, ЛеваяГраница, ПраваяГраница, ОжидаемаяОшибка")
		.Добавить(10, 5, 9, "Ожидали, что проверяемое значение `10` находится в интервале [5; 9), но это не так")
		.Добавить(10, 0, 10, "Ожидали, что проверяемое значение `10` находится в интервале [0; 10), но это не так")
		.СписокВариантов();
	
	Для Каждого Вариант Из Варианты Цикл
		Попытка
			Ошибка = Неопределено;
			ЮТУтверждения.Что(Вариант.ПроверяемоеЗначение)
				.МеждуВключаяНачалоГраницы(Вариант.ЛеваяГраница, Вариант.ПраваяГраница);
		Исключение
			Ошибка = ИнформацияОбОшибке();
		КонецПопытки;
		ПроверитьОшибкуУтверждения(Ошибка, Вариант.ОжидаемаяОшибка);
	КонецЦикла;
	
КонецПроцедуры

Процедура МеждуВключаяОкончаниеГраницы() Экспорт
	
	Варианты = ЮТест.Варианты("ПроверяемоеЗначение, ЛеваяГраница, ПраваяГраница")
		.Добавить(10, 0, 20)
		.Добавить(10, 0, 10)
		.Добавить("11", "10", "20")
		.Добавить('20200102', '20200101', '20200103')
		.СписокВариантов();
	
	Для Каждого Вариант Из Варианты Цикл
		ЮТУтверждения.Что(Вариант.ПроверяемоеЗначение).МеждуВключаяОкончаниеГраницы(Вариант.ЛеваяГраница, Вариант.ПраваяГраница);
	КонецЦикла;
	
	Варианты = ЮТест.Варианты("ПроверяемоеЗначение, ЛеваяГраница, ПраваяГраница, ОжидаемаяОшибка")
		.Добавить(10, 5, 9, "Ожидали, что проверяемое значение `10` находится в интервале (5; 9], но это не так")
		.Добавить(10, 10, 20, "Ожидали, что проверяемое значение `10` находится в интервале (10; 20], но это не так")
		.СписокВариантов();
	
	Для Каждого Вариант Из Варианты Цикл
		Попытка
			Ошибка = Неопределено;
			ЮТУтверждения.Что(Вариант.ПроверяемоеЗначение)
				.МеждуВключаяОкончаниеГраницы(Вариант.ЛеваяГраница, Вариант.ПраваяГраница);
		Исключение
			Ошибка = ИнформацияОбОшибке();
		КонецПопытки;
		ПроверитьОшибкуУтверждения(Ошибка, Вариант.ОжидаемаяОшибка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИмеетСвойстваРавные() Экспорт
	
	Ключи = "Строка, Число, Дата, Коллекция";
	Эталон = Новый Структура(Ключи, ЮТест.Данные().СлучайнаяСтрока(), ЮТест.Данные().СлучайноеЧисло(), ЮТест.Данные().СлучайнаяДата());
	Эталон.Коллекция = ЮТОбщий.ЗначениеВМассиве(1, 2, 3);
	
	Объект = Новый Структура(Ключи);
	ЗаполнитьЗначенияСвойств(Объект, Эталон);
	ЮТУтверждения.Что(Объект).ИмеетСвойстваРавные(Эталон, "Копия");
	
	Объект.Коллекция = ЮТОбщий.ЗначениеВМассиве(1, 2, 3);
	ЮТУтверждения.Что(Объект).ИмеетСвойстваРавные(Эталон, "Переопределен массив");
	
	Объект.Коллекция.Добавить(4);
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Объект).ИмеетСвойстваРавные(Эталон, "Изменен вложенный массив");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "имеет свойство 'Коллекция', которое равно `Массив`");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Объект).ИмеетСвойстваРавные(Новый Структура("Булево", Истина), "Другая структура");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "проверяемое значение `Структура` не содержат свойство 'Булево'");
	
#Если Сервер Тогда
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ &Параметр1 КАК Параметр";
	Запрос.Параметры.Вставить("Параметр1", 1);
	Эталон = Новый Структура("Текст, Параметры", Запрос.Текст, Новый Структура("Параметр1", 1));
	ЮТУтверждения.Что(Запрос).ИмеетСвойстваРавные(Эталон, "Проверка запроса");
	
	Эталон.Вставить("Результат", Новый Массив());
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Запрос).ИмеетСвойстваРавные(Эталон, "Проверка запроса. Отсутствующий реквизит");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "проверяемое значение `Запрос` не содержат свойство 'Результат'");
#КонецЕсли

КонецПроцедуры

Процедура КаждыйЭлементСодержитСвойство() Экспорт
	
	Коллекция = ДанныеДляПроверкиКоллекции();
	
	ЮТУтверждения.Что(Коллекция).КаждыйЭлементСодержитСвойство("НомерСтроки");
	ЮТУтверждения.Что(Коллекция).КаждыйЭлементСодержитСвойство("Пометка");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Коллекция).КаждыйЭлементСодержитСвойство("Значение");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	Сообщение = СтрШаблон("каждый элемент проверяемого значения `%1` содержит свойство `Значение`", Коллекция);
	ПроверитьОшибкуУтверждения(Ошибка, Сообщение);
	
КонецПроцедуры

Процедура КаждыйЭлементСодержитСвойствоСоЗначением() Экспорт
	
	Коллекция = ДанныеДляПроверкиКоллекции();
	
	ЮТУтверждения.Что(Коллекция).КаждыйЭлементСодержитСвойствоСоЗначением("Пометка", Истина);
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Коллекция).КаждыйЭлементСодержитСвойствоСоЗначением("НомерСтроки", 1);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	Сообщение = СтрШаблон("каждый элемент проверяемого значения `%1` содержит свойство `НомерСтроки`, которое равно `1`", Коллекция);
	ПроверитьОшибкуУтверждения(Ошибка, Сообщение);
	
КонецПроцедуры

Процедура ЛюбойЭлементСодержитСвойство() Экспорт
	
	Коллекция = ДанныеДляПроверкиКоллекции(Истина);
	ЮТУтверждения.Что(Коллекция).ЛюбойЭлементСодержитСвойство("НомерСтроки");
	ЮТУтверждения.Что(Коллекция).ЛюбойЭлементСодержитСвойство("Пометка");
	
	Коллекция[1].Вставить("Значение", 5);
	ЮТУтверждения.Что(Коллекция).ЛюбойЭлементСодержитСвойство("Значение");
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Коллекция).ЛюбойЭлементСодержитСвойство("Значение2");
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	Сообщение = СтрШаблон("хоть один элемент проверяемого значения `%1` содержит свойство `Значение2`", Коллекция);
	ПроверитьОшибкуУтверждения(Ошибка, Сообщение);
	
КонецПроцедуры

Процедура ЛюбойЭлементСодержитСвойствоСоЗначением() Экспорт
	
	Коллекция = ДанныеДляПроверкиКоллекции(Истина);
	ЮТУтверждения.Что(Коллекция).ЛюбойЭлементСодержитСвойствоСоЗначением("Пометка", Истина);
	ЮТУтверждения.Что(Коллекция).ЛюбойЭлементСодержитСвойствоСоЗначением("НомерСтроки", 2);
	
	Коллекция[1].Вставить("Значение", 5);
	ЮТУтверждения.Что(Коллекция).ЛюбойЭлементСодержитСвойствоСоЗначением("Значение", 5);
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Коллекция).ЛюбойЭлементСодержитСвойствоСоЗначением("Значение2", 5);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	Сообщение = СтрШаблон("хоть один элемент проверяемого значения `%1` содержит свойство `Значение2`", Коллекция);
	ПроверитьОшибкуУтверждения(Ошибка, Сообщение);
	
	Попытка
		Ошибка = Неопределено;
		ЮТУтверждения.Что(Коллекция).ЛюбойЭлементСодержитСвойствоСоЗначением("НомерСтроки", 3);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	Сообщение = СтрШаблон("хоть один элемент проверяемого значения `%1` содержит свойство `НомерСтроки`, которое равно `3`", Коллекция);
	ПроверитьОшибкуУтверждения(Ошибка, Сообщение);
	
КонецПроцедуры

Процедура СоответствуетПредикату() Экспорт
	
	Дата = ЮТест.Данные().СлучайнаяДата();
	
	Объект = Новый Структура;
	Объект.Вставить("Число", 1);
	Объект.Вставить("Строка", "1");
	Объект.Вставить("Дата", Дата);
	Объект.Вставить("Массив", ЮТОбщий.ЗначениеВМассиве(1, "1"));
	
	ПроверкаЧисла = ЮТест.Предикат().Реквизит("Число").ИмеетТип(Тип("Число")).БольшеИлиРавно(1).МеньшеИлиРавно(10).Получить();
	ПроверкаДаты = ЮТест.Предикат().Реквизит("Дата").ИмеетТип(Новый ОписаниеТипов("Дата")).Равно(Дата).Получить();
	
	ЮТест.ОжидаетЧто(Объект)
		.СоответствуетПредикату(ЮТест.Предикат()
			.Заполнено()
			.ИмеетТип("Структура"))
		.СоответствуетПредикату(ПроверкаЧисла)
		.СоответствуетПредикату(ПроверкаДаты)
	;
	
	Попытка
		Ошибка = Неопределено;
		ЮТест.ОжидаетЧто(8).СоответствуетПредикату(ЮТест.Предикат().Равно(10));
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "проверяемое значение `8` равно `10`");
	
	Попытка
		Ошибка = Неопределено;
		ЮТест.ОжидаетЧто(Объект).СоответствуетПредикату(ЮТест.Предикат().Реквизит("Число").Равно(10));
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	
	Попытка
		Ошибка = Неопределено;
		Объект.Число = -10;
		ЮТест.ОжидаетЧто(Объект).СоответствуетПредикату(ПроверкаЧисла);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	ПроверитьОшибкуУтверждения(Ошибка, "проверяемое значение `Структура` содержит свойство `Число`, которое больше или равно `1`");
	
КонецПроцедуры

Процедура КаждыйЭлементСоответствуетПредикату() Экспорт
	
	Дата = ЮТест.Данные().СлучайнаяДата();
	Объект = Новый Структура;
	Объект.Вставить("Число", 1);
	Объект.Вставить("Строка", "1");
	Объект.Вставить("Дата", Дата);
	Объект.Вставить("Массив", ЮТОбщий.ЗначениеВМассиве(1, "1"));
	
	Объект2 = ПомощникТестированияВызовСервера.СоздатьКопию(Объект);
	
	Коллекция = ЮТОбщий.ЗначениеВМассиве(Объект, Объект2);
	
	Предикаты = ЮТест.Предикат()
		.ИмеетТип("Структура")
		.ИмеетСвойство("Число")
		.ИмеетСвойство("Строка")
		.ИмеетСвойство("Дата")
		.ИмеетСвойство("Массив")
		.Реквизит("Число").Равно(1)
		.Реквизит("Строка").Равно("1")
		.Реквизит("Дата").Равно(Дата)
		.Реквизит("Массив").ИмеетТип("Массив")
		.Реквизит("Массив").ИмеетДлину(2)
	;
		
	ЮТест.ОжидаетЧто(Коллекция).КаждыйЭлементСоответствуетПредикату(Предикаты);
	
	Попытка
		Объект2.Число = 5;
		Ошибка = Неопределено;
		ЮТест.ОжидаетЧто(Коллекция).КаждыйЭлементСоответствуетПредикату(Предикаты);
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	Сообщение = СтрШаблон("каждый элемент проверяемого значения `%1` содержит свойство `Число`, которое равно `1`", Коллекция);
	ПроверитьОшибкуУтверждения(Ошибка, Сообщение);
	
КонецПроцедуры

Процедура ЛюбойЭлементСоответствуетПредикату() Экспорт
	
	Дата = '20200220130001';
	Объект = Новый Структура("Число, Строка, Дата, Массив", 1, "2", Дата, ЮТОбщий.ЗначениеВМассиве(3, "1"));
	Объект2 = Новый Структура("Число, Строка, Дата, Массив", 2, "1", Дата, ЮТОбщий.ЗначениеВМассиве(1, "3"));
	Коллекция = ЮТОбщий.ЗначениеВМассиве(Объект, Объект2);
	
	ЮТест.ОжидаетЧто(Коллекция).ЛюбойЭлементСоответствуетПредикату(Ютест.Предикат().Реквизит("Число").Равно(2));
	ЮТест.ОжидаетЧто(Коллекция).ЛюбойЭлементСоответствуетПредикату(Ютест.Предикат().Реквизит("Число").Равно(1));
	
	Попытка
		Ошибка = Неопределено;
		ЮТест.ОжидаетЧто(Коллекция).ЛюбойЭлементСоответствуетПредикату(Ютест.Предикат().Заполнено().ИмеетТип("Массив"));
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	Сообщение = СтрШаблон("один из элементов проверяемого значения `%1` является заполненным и имеет тип `Массив`", Коллекция);
	ПроверитьОшибкуУтверждения(Ошибка, Сообщение);
	
	Попытка
		Ошибка = Неопределено;
		ЮТест.ОжидаетЧто(Коллекция).ЛюбойЭлементСоответствуетПредикату(Ютест.Предикат().Реквизит("Число").Равно(3));
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	Сообщение = СтрШаблон("один из элементов проверяемого значения `%1` содержит свойство `Число`, которое равно `3`", Коллекция);
	ПроверитьОшибкуУтверждения(Ошибка, Сообщение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьОшибкуУтверждения(ИнформацияОбОшибке, ОжидаемоеОписание)
	
	Если ИнформацияОбОшибке = Неопределено Тогда
		
		Сообщение = СтрШаблон("Ожидали, что возникнет ошибка утверждений [%1]", ОжидаемоеОписание);
		ЮТРегистрацияОшибок.УстановитьДанныеОшибкиСравнения("", ОжидаемоеОписание);
		
	ИначеЕсли НЕ СтрНачинаетсяС(ИнформацияОбОшибке.Описание, "[Failed]") Тогда
		
		Сообщение = СтрШаблон("Ожидали поймать ошибку утверждений [%1], а получили ошибку исполнения [%2]", ОжидаемоеОписание, ИнформацияОбОшибке.Описание);
		ЮТРегистрацияОшибок.УстановитьДанныеОшибкиСравнения(ИнформацияОбОшибке.Описание, ОжидаемоеОписание);
		
	ИначеЕсли СтрНайти(ИнформацияОбОшибке.Описание, ОжидаемоеОписание) = 0 Тогда
		
		Сообщение = СтрШаблон("Ожидали поймать ошибку [%1], а получили [%2]", ОжидаемоеОписание, ИнформацияОбОшибке.Описание);
		ЮТРегистрацияОшибок.УстановитьДанныеОшибкиСравнения(ИнформацияОбОшибке.Описание, ОжидаемоеОписание);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сообщение) Тогда
		ЮТРегистрацияОшибок.ВызватьОшибкуПроверки(Сообщение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОшибкуИсполнения(ИнформацияОбОшибке, ОжидаемоеОписание)
	
	Если ИнформацияОбОшибке = Неопределено Тогда
		
		Сообщение = СтрШаблон("Ожидали, что возникнет ошибка исполнения [%1]", ОжидаемоеОписание);
		ЮТРегистрацияОшибок.УстановитьДанныеОшибкиСравнения("", ОжидаемоеОписание);
		
	ИначеЕсли НЕ СтрНачинаетсяС(ИнформацияОбОшибке.Описание, "[Broken]") Тогда
		
		Сообщение = СтрШаблон("Ожидали поймать ошибку исполнения [%1], а получили ошибку без модификатора [%2]", ОжидаемоеОписание, ИнформацияОбОшибке.Описание);
		ЮТРегистрацияОшибок.УстановитьДанныеОшибкиСравнения(ИнформацияОбОшибке.Описание, ОжидаемоеОписание);
		
	ИначеЕсли СтрНайти(ИнформацияОбОшибке.Описание, ОжидаемоеОписание) = 0 Тогда
		
		Сообщение = СтрШаблон("Ожидали поймать ошибку [%1], а получили [%2]", ОжидаемоеОписание, ИнформацияОбОшибке.Описание);
		ЮТРегистрацияОшибок.УстановитьДанныеОшибкиСравнения(ИнформацияОбОшибке.Описание, ОжидаемоеОписание);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сообщение) Тогда
		ЮТРегистрацияОшибок.ВызватьОшибкуПроверки(Сообщение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДанныеОшибкиСравнения(Знач ПроверяемоеЗначение, Знач ОжидаемоеЗначение)
	
	ОжидаемоеЗначение = ЮТОбщий.ПредставлениеЗначения(ОжидаемоеЗначение);
	ПроверяемоеЗначение = ЮТОбщий.ПредставлениеЗначения(ПроверяемоеЗначение);
	ДанныеОшибки = ЮТКонтекст.КонтекстОшибки();
	
	Сообщение = Неопределено;
	
	Если НЕ ДанныеОшибки.ОшибкаУтверждения Тогда
		Сообщение = "Ожидали установленный признак `ОшибкаСравнения`";
	ИначеЕсли ДанныеОшибки.ОжидаемоеЗначение <> ОжидаемоеЗначение Тогда
		Сообщение = СтрШаблон("`ДанныеОшибки.ОжидаемоеЗначение` не соответствует ожидаемому. Ожидаемый: `%1`, фактический: `%2`",
							  ОжидаемоеЗначение,
							  ДанныеОшибки.ОжидаемоеЗначение);
	ИначеЕсли ДанныеОшибки.ПроверяемоеЗначение <> ПроверяемоеЗначение Тогда
		Сообщение = СтрШаблон("`ДанныеОшибки.ПроверяемоеЗначение` не соответствует ожидаемому. Ожидаемый: `%1`, фактический: `%2`",
							  ПроверяемоеЗначение,
							  ДанныеОшибки.ПроверяемоеЗначение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сообщение) Тогда
		ЮТРегистрацияОшибок.ВызватьОшибкуПроверки(Сообщение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДанныеОшибкиУтверждения(Знач ПроверяемоеЗначение)
	
	ПроверяемоеЗначение = ЮТОбщий.ПредставлениеЗначения(ПроверяемоеЗначение);
	ДанныеОшибки = ЮТКонтекст.КонтекстОшибки();
	
	Сообщение = Неопределено;
	
	Если НЕ ДанныеОшибки.ОшибкаУтверждения Тогда
		Сообщение = "Ожидали установленный признак `ОшибкаСравнения`";
	ИначеЕсли ДанныеОшибки.ОжидаемоеЗначение <> Неопределено Тогда
		Сообщение = СтрШаблон("`ДанныеОшибки.ОжидаемоеЗначение` должно быть пустым, фактический: `%1`", ДанныеОшибки.ОжидаемоеЗначение);
	ИначеЕсли ДанныеОшибки.ПроверяемоеЗначение <> ПроверяемоеЗначение Тогда
		Сообщение = СтрШаблон("`ДанныеОшибки.ПроверяемоеЗначение` не соответствует ожидаемому. Ожидаемый: `%1`, фактический: `%2`",
							  ПроверяемоеЗначение,
							  ДанныеОшибки.ПроверяемоеЗначение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сообщение) Тогда
		ЮТРегистрацияОшибок.ВызватьОшибкуПроверки(Сообщение);
	КонецЕсли;
	
КонецПроцедуры

Функция МетодИсключение(ТекстИсключения) Экспорт
	
	ВызватьИсключение ТекстИсключения;
	
КонецФункции

Функция МетодБезИсключение(ТекстИсключения) Экспорт
	
	Возврат ТекстИсключения;
	
КонецФункции

Функция ДанныеДляПроверкиКоллекции(Знач ВернутьСтруктуру = Неопределено)
	
	Если ВернутьСтруктуру = Неопределено Тогда
#Если Клиент Тогда
		ВернутьСтруктуру = Истина;
#Иначе
		ВернутьСтруктуру = Ложь;
#КонецЕсли
	КонецЕсли;
	
	Если ВернутьСтруктуру Тогда
		Коллекция = Новый Массив();
		Коллекция.Добавить(Новый Структура("НомерСтроки, Пометка", 1, Истина));
		Коллекция.Добавить(Новый Структура("НомерСтроки, Пометка", 2, Истина));
	Иначе
#Если Сервер Тогда
		Коллекция = Новый ТаблицаЗначений();
		Коллекция.Колонки.Добавить("НомерСтроки");
		Коллекция.Колонки.Добавить("Пометка");
		
		Строка = Коллекция.Добавить();
		Строка.НомерСтроки = 1;
		Строка.Пометка = Истина;
		
		Строка = Коллекция.Добавить();
		Строка.НомерСтроки = 2;
		Строка.Пометка = Истина;
#КонецЕсли
	КонецЕсли;
	
	Возврат Коллекция;
	
КонецФункции

#КонецОбласти
